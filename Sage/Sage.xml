<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sage</name>
    </assembly>
    <members>
        <member name="T:Highpoint.Sage.SimCore.DefaultValueAttribute">
            <summary>
            Used as a marker in enum declarations to indicate to the Sage initialization mechanism, which is to be the default initial value.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExceptionHandler">
            <summary>
            Delegate ExceptionHandler is implemented by anything that can handle an exception.
            If [true] is returned, the exception is not propagated any further.
            </summary>
            <param name="model">The model.</param>
            <param name="e">The e.</param>
            <param name="handled">if set to <c>true</c> [handled].</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecController">
            <summary>
            This object will govern the real-time frequency at which the Render event fires, and will also govern
            the simulation time that is allowed to pass between Render events. So with a frame rate of 20, there
            will be 20 Render events fired per second. With a scale of 2, 10^2, or 100 times that 1/20th of a
            second (therefore 2 seconds of simulation time) will be allowed to transpire between render events.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecController.#ctor(Highpoint.Sage.SimCore.IModel,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.ExecController"/> class. The model is used as UserData.
            <br></br>Frame rate must be from zero to 25. If zero, no constraint is imposed.
            </summary>
            <param name="model">The model.</param>
            <param name="scale">The (logarithmic) run time scale.</param>
            <param name="frameRate">The frame rate in render events per second. If zero, execution is unconstrained.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecController.#ctor(Highpoint.Sage.SimCore.IExecutive,System.Double,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.ExecController"/> class. The caller may specify userData.
            <br></br>Frame rate must be from zero to 25. If zero, no contraint is imposed.
            </summary>
            <param name="exec">The executive being controlled.</param>
            <param name="scale">The (logarithmic) run time scale. If set to double.MinValue, the model runs at full speed.</param>
            <param name="frameRate">The frame rate in render events per second. If zero, execution is unconstrained.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecController.#ctor(System.Double,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.ExecController"/> class. The caller may specify userData.
            <br></br>Frame rate must be from zero to 25. If zero, no contraint is imposed. For this constructor,
            the executive will be set while the model sets its ExecController.
            </summary>
            <param name="scale">The (logarithmic) run time scale. If set to double.MinValue, the model runs at full speed.</param>
            <param name="frameRate">The frame rate in render events per second. If zero, execution is unconstrained.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecController.SetExecutive(Highpoint.Sage.SimCore.IExecutive)">
            <summary>
            Sets the executive on which this controller will operate. This API should only be called once. The
            ExecController cannot be targeted to control a different executive.
            </summary>
            <param name="exec">The executive on which this controller will operate.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecController.Scale">
            <summary>
            Gets or sets the logarithmic scale of run speed to sim speed. For example, for a sim that runs 
            100 x faster than a real-world clock, use a scale of 2.0.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecController.LinearScale">
            <summary>
            Gets or sets the linear scale of run speed to sim speed. For example, for a sim that runs 
            100 x faster than a real-world clock, the linear scale would be 100.
            </summary>
            <value>The scale.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecController.FrameRate">
            <summary>
            Gets or sets the frame rate - an integer that represents the preferred number of rendering callbacks received per second.
            </summary>
            <value>The frame rate.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecController.RateString">
            <summary>
            A user-friendly representation of the simulation speed.
            </summary>
            <value>The rate string.</value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecController.Render">
            <summary>
            This event is expected to drive rendering at the prescribed frame rate.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecController.RetardExecution(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Retards the executive by putting it to sleep until real time has caught up with the scale.
            </summary>
            <param name="exec"></param>
            <param name="userData"></param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecFactory">
            <summary>
            ExecFactory produces instances of objects that implement IExecutive.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecFactory.Instance">
            <summary>
            Provides a reference to the one ExecFactory in the current Application Context.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecFactory.CreateExecutive">
            <summary>
            Creates a copy of the default type of executive.
            </summary>
            <returns>An instance of the default executive type.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecFactory.CreateExecutive(System.Guid)">
            <summary>
            Creates a copy of the default type of executive.
            </summary>
            <param name="execGuid">The guid to be assigned to the new executive.</param>
            <returns>A copy of the default executive.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.Executive">
            <summary>
            This is a full-featured executive, with rescindable and detachable events, support for pause and resume and
            event priority sorting within the same timeslice, and detection of causality violations. Use FastExecutive
            if these features are unimportant and you want blistering speed.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.LiveDetachableEvents">
            <summary>
            Returns a read-only list of the detachable events that are currently running.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.EventList">
            <summary>
            Returns a read-only list of the ExecEvents currently in queue for execution.
            Cast the elements in the list to IExecEvent to access the items' field values.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.Now">
            <summary>
            Returns the simulation time that the executive is currently processing. Any event submitted with a requested
            service time prior to this time, will initiate a causality violation. If the App.Config file is not set to
            ignore these (see below), this will result in a CausalityException being thrown.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.LastEventServed">
            <summary>
            If this executive has been run, this holds the DateTime of the last event serviced. May be from a previous run.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.CurrentPriorityLevel">
            <summary>
            Returns the simulation time that the executive is currently processing. For a given time, any priority event
            may be submitted. For example, if the executive is processing an event with priority 1.5, and another event
            is requested with priority 2.0, (higher priorities are serviced first), that event will be the next to be
            serviced.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.State">
            <summary>
            The state of the executive - Stopped, Running, Paused, Finished.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestDaemonEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests that the executive queue up a daemon event to be serviced at a specific time and
            priority. If only daemon events are enqueued, the executive will not be kept alive.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. Higher numbers mean higher priorities.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero, and the userData object is assumeds to be null.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Object)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests scheduling of a synchronous event. Event service takes the form of a call, by the executive, into a specified method
            on a specified object, passing it the executive and a specified user data object. The method, the object and the
            user data are specified at the time of scheduling the event (i.e. when making this call). <p></p><p></p>
            <B>Note:</B> The event will be scheduled as a synchronous event. If you want another type of event, use the other
            form of this API.
            </summary>
            <param name="eer">The ExecEventReceiver (a delegate) that will accept the call from the executive.</param>
            <param name="when">The DateTime at which the event is to be served.</param>
            <param name="priority">The priority at which the event is to be serviced. Higher values are serviced first,
            if both are scheduled for the same precise time.</param>
            <param name="userData">An object of any type that the code scheduling the event (i.e. making this call) wants to
            have passed to the code executing the event (i.e. the body of the ExecEventReceiver.)</param>
            <returns>A long, which is a number that serves as a key. This key is used, for example, to unrequest the event.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests scheduling of an event, allowing the caller to specify the type of the event. Event service takes the
            form of a call, by the executive, into a specified method on a specified object, passing it the executive and a
            specified user data object. The method, the object and the user data are specified at the time of scheduling the
            event (i.e. when making this call). 
            </summary>
            <param name="eer">The ExecEventReceiver (a delegate) that will accept the call from the executive.</param>
            <param name="when">The DateTime at which the event is to be served.</param>
            <param name="priority">The priority at which the event is to be serviced. Higher values are serviced first,
            if both are scheduled for the same precise time.</param>
            <param name="userData">An object of any type that the code scheduling the event (i.e. making this call) wants to
            have passed to the code executing the event (i.e. the body of the ExecEventReceiver.)</param>
            <param name="execEventType">Specifies the type of event dispatching to be employed for this event.</param>
            <returns>A long, which is a number that serves as a key. This key is used, for example, to unrequest the event.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.RequestImmediateEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests that the executive queue up an event to be serviced at the current executive time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <param name="execEventType">The way the event is to be served by the executive.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Join(System.Int64[])">
            <summary>
            This method blocks until the events that correlate to the provided event codes (which are returned from the RequestEvent
            APIs) have been completely serviced. The event on whose thread this method is called must be a detachable event, all of
            the provided events must have been requested already, and none can have already been serviced.
            </summary>
            <param name="eventCodes">The event codes.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.EventCount">
            <summary>
            The number of events that have been serviced on this run.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Executive.CurrentEventType">
            <summary>
            The type of event currently being serviced by the executive.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Pause">
            <summary>
            If running, pauses the executive and transitions its state to 'Paused'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Resume">
            <summary>
            If paused, unpauses the executive and transitions its state to 'Running'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Reset">
            <summary>
            Resets the executive - this clears the event list and resets now to 1/1/01, 12:00 AM
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Detach(System.Object)">
            <summary>
            Removes all instances of .NET event and simulation discrete event callbacks from this executive.
            </summary>
            <param name="target">The object to be detached from this executive.</param>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Executive.ExecutivePaused">
            <summary>
            Fired when this executive pauses.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Executive.ExecutiveResumed">
            <summary>
            Fired when this executive resumes.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Executive.ClockAboutToChange">
            <summary>
            Fired after service of the last event scheduled in the executive to fire at a specific time,
            assuming that there are more non-daemon events to fire.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Executive.EventAboutToFire">
            <summary>
            Fired after an event has been selected to be fired, but before it actually fires.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Executive.EventHasCompleted">
            <summary>
            Fired after an event has been selected to be fired, and after it actually fires.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.Dispose">
            <summary>
            Must call this before disposing of a model.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.AcquireEventLock">
            <summary>
            Acquires the event lock.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Executive.ReleaseEventLock">
            <summary>
            Releases the event lock.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.RuntimeException">
            <summary>
            MissingParameterException is thrown when a required parameter is missing. Typically used in a late bound, read-from-name/value pair collection scenario.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.RuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.RuntimeException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.CausalityException">
            <summary>
            A CausalityException is raised if the executive encounters a request to fire an event at a time earlier than the
            current time whose events are being served.
            </summary>
            <seealso cref="T:System.ApplicationException" />
        </member>
        <member name="T:Highpoint.Sage.SimCore.DetachableEventAbortHandler">
            <summary>
            Delegate DetachableEventAbortHandler is the signature implemented by a method intended to respond to the aborting of a detachable event.
            </summary>
            <param name="exec">The executive whose detachable event is being aborted.</param>
            <param name="idec">The detachable event controller.</param>
            <param name="args">The arguments that were to have been provided to the ExecEventReceiver.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.DetachableEvent.Suspend">
            <summary>
            Suspends this detachable event until it is explicitly resumed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IExecEvent">
            <summary>
            Interface IExecEvent is implemented by an internal class that keeps track of all of the key data
            about an event that is to be served by the Executive.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.ExecEventReceiver">
            <summary>
            Gets the ExecEventReceiver (the delegate into which the event will be served.)
            </summary>
            <value>The execute event receiver.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.When">
            <summary>
            Gets the date &amp; time that the event is to be served.
            </summary>
            <value>The date &amp; time that the event is to be served.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.Priority">
            <summary>
            Gets the priority of the event.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.UserData">
            <summary>
            Gets the user data to be provided to the method into which the event will be served.).
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.EventType">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.SimCore.ExecEventType"/> of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecEvent.Key">
            <summary>
            Gets the key by which the event is known. This is useful when the event is being rescinded or logged.
            </summary>
            <value>The key.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecutiveFastLight">
            <summary>
            This is a very fast executive, designed for applications in which raw speed is the greatest and most
            overriding concern. This executive accomplishes this goal without rescindable or detachable events,
            support for pause and resume, event priority sorting within the same timeslice, or detection of
            causality violations. Use the Executive class if these features are important and you are willing to
            sacrifice a little bit of speed to get them. Note that if you are doing anything non-trivial in your
            event handlers, this 'sacrifice' quickly becomes unnoticeable.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecutiveFastLight.InitialSize">
            <summary>
            The initial size of the event heap.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Executive3"/> class.
            </summary>
            <param name="execGuid">The GUID by which this executive will be known.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.Guid">
            <summary>
            The Guid by which this executive is known.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.Now">
            <summary>
            The current DateTime being managed by this executive. This is the 'Now' point of a
            simulation being run by this executive.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.LastEventServed">
            <summary>
            If this executive has been run, this holds the DateTime of the last event serviced. May be from a previous run.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.CurrentPriorityLevel">
            <summary>
            The priority of the event currently being serviced. This executive forces all priorities to zero.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.State">
            <summary>
            The current <see cref="T:Highpoint.Sage.SimCore.ExecState"/> of this executive (running, stopped, paused, finished)...
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.RequestDaemonEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests that the executive queue up a daemon event to be serviced at a specific time and
            priority. If only daemon events are enqueued, the executive will not be kept alive.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. This executive forces all priorities to zero.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero, and the userData object is assumeds to be null.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Object)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.RequestImmediateEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests that the executive queue up an event to be serviced at the current executive time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <param name="eet">The EventType that declares how the event is to be served by the executive.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. This executive forces all priorities to zero.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Highpoint#Sage#SimCore#IExecutive#RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. This executive forces all priorities to zero.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <param name="execEventType">The way the event is to be served by the executive.</param>
            <returns>
            A code that can subsequently be used to identify the request, e.g. for removal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.UnRequestEvent(System.Int64)">
            <summary>
            This executive does not support unrequesting already-submitted event requests.
            </summary>
            <param name="eventHashCode">The code that identifies the event request to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.UnRequestEvents(Highpoint.Sage.SimCore.IExecEventSelector)">
            <summary>
            This executive does not support unrequesting already-submitted event requests.
            </summary>
            <param name="ees">An object that will be used to select the events to remove.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Highpoint#Sage#SimCore#IExecutive#UnRequestEvents(System.Object)">
            <summary>
            This executive does not support unrequesting already-submitted event requests.
            </summary>
            <param name="execEventReceiverTarget">The callback target for which all queued events are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Highpoint#Sage#SimCore#IExecutive#UnRequestEvents(System.Delegate)">
            <summary>
            This executive does not support unrequesting already-submitted event requests.
            </summary>
            <param name="execEventReceiverMethod">The callback method for which all queued events are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Join(System.Int64[])">
            <summary>
            This high performance exec does not support Joining on events.
            </summary>
            <param name="eventCodes">The event codes.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Start">
            <summary>
            Starts the executive. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Stop">
            <summary>
            Stops the executive. This may be a pause or a stop, depending on if events are queued or running at the time of call.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Pause">
            <summary>
            If running, pauses the executive and transitions its state to 'Paused'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Abort">
            <summary>
            If running, pauses the executive and transitions its state to 'Paused'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Resume">
            <summary>
            If paused, unpauses the executive and transitions its state to 'Running'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Reset">
            <summary>
            Resets the executive - this clears the event list and resets now to 1/1/01, 12:00 AM
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.ClearVolatiles(System.Collections.IDictionary)">
            <summary>
            This high performance exec does not support volatiles.
            </summary>
            <param name="dictionary">The task graph context to be 'reset'.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.CurrentEventController">
            <summary>
            This high performance exec does not support detached events.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.CurrentEventType">
            <summary>
            The type of event currently being serviced by the executive. This executive services only Synchronous events.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.LiveDetachableEvents">
            <summary>
            Returns a list of the detachable events that are currently running. As this high performance exec does not support detached events, this list will always be empty.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.EventList">
            <summary>
            Returns a read-only list of the ExecEvents currently in queue for execution.
            Cast the elements in the list to IExecEvent to access the items' field values.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.RunNumber">
            <summary>
            The integer count of the number of times this executive has been run.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ExecutiveFastLight.EventCount">
            <summary>
            The number of events that have been serviced on this run.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.ExecutivePaused">
            <summary>
            Fired when this executive pauses.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.ExecutiveResumed">
            <summary>
            Fired when this executive resumes.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.EventAboutToFire">
            <summary>
            Fired after an event has been selected to be fired, but before it actually fires.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.EventHasCompleted">
            <summary>
            Fired after an event has been selected to be fired, and after it actually fires.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.ExecutiveReset">
            <summary>
            Resetting is not supported by this high performance executive.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.ExecutiveAborted">
            <summary>
            This fires when the executive has been aborted. This high performance executive does not support being aborted. Call Stop instead.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ExecutiveFastLight.ClockAboutToChange">
            <summary>
            Fired after service of the last event scheduled in the executive to fire at a specific time,
            assuming that there are more non-daemon events to fire.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveFastLight.Dispose">
            <summary>
            This high performance exec does nothing on Dispose.
            </summary>
            <value></value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecEventReceiver">
            <summary>
            This delegate is implemented by any method that is to receive a time-based callback
            from the executive.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.EventMonitor">
            <summary>
            Implemented by any object that wishes to be notified as an event is firing.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecutiveEvent">
            <summary>
            Implemented by any method that wants to receive notification of an executive event
            such as ExecutiveStarted, ExecutiveStopped, ExecutiveReset, ExecutiveFinished.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecState">
            <summary>
            Describes the state of the executive.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecState.Stopped">
            <summary>
            The executive is stopped.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecState.Running">
            <summary>
            The executive is running.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecState.Paused">
            <summary>
            The executive is paused.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecState.Finished">
            <summary>
            The executive is finished.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecEventType">
            <summary>
            Used to select the way the Executive dispatches an event once its time has arrived.
            These mechanisms are as follows:
            Synchronous – the callback is called on the dispatch thread, and upon completion,
            the next callback is selected based upon scheduled time and priority.
            Detachable – the callback is called on a thread from the .Net thread pool, and the
            dispatch thread then suspends awaiting the completion or suspension of that thread.
            If the event thread is suspended, an event controller is made available to other
            entities which can be used to resume or abort that thread. This is useful for modeling
            “intelligent entities” and situations where the developer wants to easily represent a
            delay or interruption of a process.
            Batched – all events at the current time and priority are called, each on separate
            threads, and the executive, except for servicing any new events registered for that
            time and priority, awaits completion of all running events. This may bring about higher
            performance in cases such as battlefield and transportation simulations where multiple
            entities may sense current conditions, plan and execute against that plan.
            Asynchronous - This mechanism is not yet supported.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecEventType.Synchronous">
            <summary>
            The executive event (served to a requester) is synchronous. It will execute to its
            completion on the executive's thread, and no new events will be serviced until after
            its return.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecEventType.Detachable">
            <summary>
            The execution event (served to a requester) is detachable. It is executed in its own
            thread, and may be paused or put to sleep, joined with other threads, or allowed by
            the programmer to run in parallel to other executing executive threads. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecEventType.Asynchronous">
            <summary>
            The execution event (served to a requester) is asynchronous. The thread is given the
            callback, the callback is fired, and the executive runs on. Useful for I/O. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.ExecEventType.None">
            <summary>
            This enumeration value should not be used to request an event. It is used to indicate
            that no event is currently being serviced.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IDetachableEventController">
            <summary>
            This interface is implemented by a DetachableEventController - a DEC is associated
            with an event that is fired as a detachable event, and in that event's thread, can
            be obtained from the executive.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.Suspend">
            <summary>
            Suspends this detachable event until it is explicitly resumed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.Resume">
            <summary>
            Explicitly resumes this detachable event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.Resume(System.Double)">
            <summary>
            Explicitly resumes this detachable event with a specified (override) priority.
            This does not replace the initiating event's actual priority, and affects only the scheduling of the resuming event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.SuspendFor(System.TimeSpan)">
            <summary>
            Suspends this detachable event for a specified duration.
            </summary>
            <param name="howLong"></param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.SuspendUntil(System.DateTime)">
            <summary>
            Suspends this detachable event until a specified time.
            </summary>
            <param name="when"></param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IDetachableEventController.SuspendedStackTrace">
            <summary>
            When a detachable event is suspended, and if DetachableEventController diagnostics are turned on,
            this will return a stackTrace of the location where the DEC is suspended.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.IsWaiting">
            <summary>
            Returns true if the IDetachableEventController is at a wait. If this is true,
            and the IExecutive has completed its run, it usually means that some event in
            the simulation is blocked.
            </summary>
            <returns>true if the IDetachableEventController is at a wait.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.SetAbortHandler(Highpoint.Sage.SimCore.DetachableEventAbortHandler,System.Object[])">
            <summary>
            Sets the abort handler.
            </summary>
            <param name="handler">The handler.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.ClearAbortHandler">
            <summary>
            Clears the abort handler.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IDetachableEventController.FireAbortHandler">
            <summary>
            Fires, and then clears, the abort handler.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IDetachableEventController.RootEvent">
            <summary>
            Returns the event that initially created this DetachableEventController.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IExecEventSelector">
            <summary>
            Implemented by an object that can select events, typically for removal from the
            event queue. It is, effectively, a filter. It is able to discern whether an event
            meets some criteria.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecEventSelector.SelectThisEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Determines if the presented event is a candidate for the operation being considered, such as removal from the event queue.
            </summary>
            <param name="eer">The ExecEventReceiver that is to receive this event.</param>
            <param name="when">The DateTime that the event was to have been fired.</param>
            <param name="priority">The priority of the event.</param>
            <param name="userData">The user data that was presented with this event.</param>
            <param name="eet">The type of event (synchronous, batched, detachable, etc.)</param>
            <returns>True if this event is a candidate for the operation (e.g. removal), False if not.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ExecutiveException">
            <summary>
            A marker class that indicates that a given exception was thrown by the executive, rather than
            the application code.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ExecutiveException.#ctor(System.String)">
            <summary>
            Creates an ExecutiveException.
            </summary>
            <param name="message">The message to be delivered by the exception.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.TaskGraphVolatileAttribute">
            <summary>
            Used to decorate the key or the value for anything that is going to be put 
            into the task graph that must be cleared out for each new run.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.VolatileKey">
            <summary>
            This class can be used as a key for an object into a Task Graph's graphContext, where the
            contents of the key are intended to be cleared out of the GC after each run of the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.VolatileKey.#ctor">
            <summary>
            Creates a VolatileKey for use as a key for an object into a Task Graph's graphContext.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.VolatileKey.#ctor(System.String)">
            <summary>
            Creates a VolatileKey for use as a key for an object into a Task Graph's graphContext.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.VolatileKey.ToString">
            <summary>
            Returns the name of this key.
            </summary>
            <returns>The name of this key.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IExecutive">
            <summary>
            Interface that is implemented by an executive.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.Guid">
            <summary>
            The Guid by which this executive is known.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.Now">
            <summary>
            The current DateTime being managed by this executive. This is the 'Now' point of a
            simulation being run by this executive.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.LastEventServed">
            <summary>
            If this executive has been run, this holds the DateTime of the last event serviced. May be from a previous run.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.CurrentPriorityLevel">
            <summary>
            The priority of the event currently being serviced.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.State">
            <summary>
            The current state of this executive (running, stopped, paused, finished)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestImmediateEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests that the executive queue up an event to be serviced at the current executive time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <param name="execEventType">The way the event is to be served by the executive.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestDaemonEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests that the executive queue up a daemon event to be serviced at a specific time and
            priority. If only daemon events are enqueued, the executive will not be kept alive.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. Higher numbers mean higher priorities.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero, and the userData object is assumeds to be null.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Object)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time. Priority is assumed
            to be zero.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. Higher numbers mean higher priorities.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.RequestEvent(Highpoint.Sage.SimCore.ExecEventReceiver,System.DateTime,System.Double,System.Object,Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Requests that the executive queue up an event to be serviced at a specific time and
            priority.
            </summary>
            <param name="eer">The ExecEventReceiver callback that is to receive the callback.</param>
            <param name="when">The date &amp; time at which the callback is to be made.</param>
            <param name="priority">The priority of the callback. Higher numbers mean higher priorities.</param>
            <param name="userData">Object data to be provided in the callback.</param>
            <param name="execEventType">The way the event is to be served by the executive.</param>
            <returns>A code that can subsequently be used to identify the request, e.g. for removal.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.UnRequestEvent(System.Int64)">
            <summary>
            Removes an already-submitted request for a time-based notification.
            </summary>
            <param name="eventHashCode">The code that identifies the event request to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.UnRequestEvents(Highpoint.Sage.SimCore.IExecEventSelector)">
            <summary>
            Removes an already-submitted request for a time-based notification based on a user-provided selector object.
            </summary>
            <param name="ees">An object that will be used to select the events to remove.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.UnRequestEvents(System.Object)">
            <summary>
            Removes all already-submitted requests for a time-based notification into a specific callback target object.
            </summary>
            <param name="execEventReceiverTarget">The callback target for which all queued events are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.UnRequestEvents(System.Delegate)">
            <summary>
            Removes all already-submitted requests for a time-based notification into a specific callback target object.
            </summary>
            <param name="execEventReceiverMethod">The callback method for which all queued events are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Join(System.Int64[])">
            <summary>
            This method blocks until the events that correlate to the provided event codes (which are returned from the RequestEvent
            APIs) are completely serviced. The event on whose thread this method is called must be a detachable event, all of the
            provided events must have been requested already, and none can have already been serviced.
            </summary>
            <param name="eventCodes">The event codes.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Start">
            <summary>
            Starts the executive. The calling thread will be the primary execution thread, and will not return until
            execution is completed (via completion of all non-daemon events or the Abort method.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Pause">
            <summary>
            If running, pauses the executive and transitions its state to 'Paused'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Resume">
            <summary>
            If paused, unpauses the executive and transitions its state to 'Running'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Stop">
            <summary>
            Stops the executive. This may be a pause or a stop, depending on if events are queued or running at the time of call.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Abort">
            <summary>
            Aborts the executive. This always flushes the event queue and terminates all running events.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Reset">
            <summary>
            Resets the executive - this clears the event list and resets now to 1/1/01, 12:00 AM
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.Detach(System.Object)">
            <summary>
            Removes all instances of .NET event and simulation discrete event callbacks from this executive.
            </summary>
            <param name="target">The object to be detached from this executive.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IExecutive.ClearVolatiles(System.Collections.IDictionary)">
            <summary>
            Removes any entries in the task graph whose keys or values have the TaskGraphVolatile attribute.
            This is used, typically, to 'reset' the task graph for a new simulation run.
            </summary>
            <param name="dictionary">The task graph context to be 'reset'.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.CurrentEventController">
            <summary>
            The DetachableEventController associated with the currently-executing event, if it was
            launched as a detachable event. Otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.CurrentEventType">
            <summary>
            The type of event currently being serviced by the executive.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.LiveDetachableEvents">
            <summary>
            Returns a list of the detachable events that are currently running.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.EventList">
            <summary>
            Returns a read-only list of the ExecEvents currently in queue for execution.
            Cast the elements in the list to IExecEvent to access the items' field values.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.RunNumber">
            <summary>
            The integer count of the number of times this executive has been run.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IExecutive.EventCount">
            <summary>
            The number of events that have been serviced on this run.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveStarted_SingleShot">
            <summary>
            Fired when this executive starts. All events are fired once, and then cleared.
            This enables the designer to register this event on starting the model, to
            set up the simulation model when the executive starts. If it was not then cleared,
            it would be re-registered and then called twice on the second start, three times
            on the third call, etc.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveStarted">
            <summary>
            Fired when this executive starts.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutivePaused">
            <summary>
            Fired when this executive pauses.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveResumed">
            <summary>
            Fired when this executive resumes.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveStopped">
            <summary>
            Fired when this executive stops.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveFinished">
            <summary>
            Fired when this executive finishes (including after an abort).
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveReset">
            <summary>
            Fired when this executive is reset.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ExecutiveAborted">
            <summary>
            Fired when this executive has been aborted.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.ClockAboutToChange">
            <summary>
            Fired after service of the last event scheduled in the executive to fire at a specific time,
            assuming that there are more non-daemon events to fire.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.EventAboutToFire">
            <summary>
            Fired after an event has been selected to be fired, but before it actually fires.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IExecutive.EventHasCompleted">
            <summary>
            Fired after an event has been selected to be fired, and after it actually fires.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.WarningEvent">
            <summary>
            Implemented by a method that is to be called when an warning is added to, or removed from the model.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ErrorEvent">
            <summary>
            Implemented by a method that is to be called when an error is added to, or removed from the model.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IModel">
            <summary>
            The base class from which models are built or derived. Models provide a state machine,
            error and warning management, task processor management (for Task Graphs) and access
            and control functions to the Executive that is running the simulation embodied in this
            model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.RandomSeed">
            <summary>
            Gets the random seed in use by this model.
            </summary>
            <value>The random seed in use by this model.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.RandomServer">
            <summary>
            Gets the random server.
            </summary>
            <value>The random server.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.ModelObjects">
            <summary>
            A dictionary of currently live IModelObjects. An IModelObject that is garbage-
            collected is automatically removed from this collection. Note that the object
            is not necessarily removed at the time of last release, but at the time of
            garbage collection. Code can call Remove(...) to explicitly remove the object.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.AddModelObject(Highpoint.Sage.SimCore.IModelObject)">
            <summary>
            Adds a model object to this model's ModelObjects collection.
            </summary>
            <param name="modelObject">The model object.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.ModelConfig">
            <summary>
            The ModelConfig is an object that holds the contents of the Sage section of the
            app.config file.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.ExecutiveController">
            <summary>
            Gets the executive controller that governs the rate-throttling and frame-rendering event frequency of this model.
            </summary>
            <value>The executive controller.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.Executive">
            <summary>
            Provides access to the executive being used by this model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.Warnings">
            <summary>
            An collection of all of the warnings currently applicable to this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.AddWarning(Highpoint.Sage.SimCore.IModelWarning)">
            <summary>
            Adds a warning to this model, e.g. a 'GenericModelWarning'...
            </summary>
            <param name="theWarning">The warning to be added.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.HasWarnings">
            <summary>
            Returns true if this model has any active warnings.
            </summary>
            <returns>Returns true if this model has any active warnings - otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.ClearAllWarnings">
            <summary>
            Clears all of the warnings applicable to this model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.ErrorHappened">
            <summary>
            Fired when an error happens in (is added to) a model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.ErrorCleared">
            <summary>
            Fired when an error is removed from a model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.AddErrorHandler(Highpoint.Sage.SimCore.IErrorHandler)">
            <summary>
            Enables a user/developer to add an error handler to the model in real time,
            (e.g. during a simulation run) and ensures that that handler is called for
            any errors currently in existence in the model.
            </summary>
            <param name="theErrorHandler">The error handler delegate that is to receive notification of the error events.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.RemoveErrorHandler(Highpoint.Sage.SimCore.IErrorHandler)">
            <summary>
            Removes an error handler from the model.
            </summary>
            <param name="theErrorHandler">The error handler to be removed from the model.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.Errors">
            <summary>
            An enumeration over all of the errors in the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.AddError(Highpoint.Sage.SimCore.IModelError)">
            <summary>
            Adds an error to the model, and iterates over all of the error handlers,
            allowing each in turn to respond to the error. As soon as any errorHandler
            indicates that it has HANDLED the error (by returning true from 'HandleError'),
            the error is cleared, and further handlers are not called.
            </summary>
            <param name="theError">The error that is to be added to the model's error list.</param>
            <returns>True if the error was successfully added to the model, false if it was cleared by a handler.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.RemoveError(Highpoint.Sage.SimCore.IModelError)">
            <summary>
            Removes the error from the model's collection of errors.
            </summary>
            <param name="theError">The error to be removed from the model.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.ClearAllErrors">
            <summary>
            Removes all errors.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.ClearAllErrorsFor(System.Object)">
            <summary>
            Removes all errors whose target is the specified object.
            </summary>
            <param name="target">The object for whom all errors are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.HasErrors">
            <summary>
            Returns true if the model has errors.
            </summary>
            <returns>true if the model has errors.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.ErrorSummary">
            <summary>
            Provides a string that summarizes all of the errors currently active in this model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.StateMachine">
            <summary>
            Provides access to the state machine being used by this model. While the state machine
            can be set, too, this is an advanced feature, and should not be done unless the developer
            is sure what they are doing.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.IsPaused">
            <summary>
            Gets or sets a value indicating whether this instance is paused.
            </summary>
            <value><c>true</c> if this instance is paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.IsCompleted">
            <summary>
            Gets or sets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModel.IsReady">
            <summary>
            Gets or sets a value indicating whether this instance is ready to be started.
            </summary>
            <value><c>true</c> if this instance is ready to be started; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.Start">
            <summary>
            Starts the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.Pause">
            <summary>
            Pauses execution of this model after completion of the running callback of the current event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.Resume">
            <summary>
            Resumes execution of this model. Ignored if the model is not already paused.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.Abort">
            <summary>
            Aborts the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.Reset">
            <summary>
            Resets the model. First resets the executive, then fires the Model.Resetting event.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.Starting">
            <summary>
            Fired when the model has been commanded to start.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.Stopping">
            <summary>
            Fired when the model has been commanded to stop.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.Resetting">
            <summary>
            Fired when the model has been commanded to reset.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.IModel.Completed">
            <summary>
            Fired when the model has completed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.AddService``1(``0,System.String)">
            <summary>
            Adds the specified service with the provided name.
            </summary>
            <typeparam name="T">The type of service we are adding.</typeparam>
            <param name="service">The service.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModel.GetService``1(System.String)">
            <summary>
            Gets the service of the specified type, and known by the provided name.
            </summary>
            <typeparam name="T">The type of service we are looking for.</typeparam>
            <param name="identifier">The identifier.</param>
            <returns>T.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IHasName">
            <summary>
            An interface implemented by anything that is known by a name. The name is not necessarily required to be unique.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IHasName.Name">
            <summary>
            The user-friendly name for this object.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IHasIdentity">
            <summary>
            Implemented by any object that is likely to be tracked by the core, or
            perhaps a user, framework.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IHasIdentity.Description">
            <summary>
            A description of this object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IHasIdentity.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IHasParameters">
            <summary>
            Implemented by any object that has a dictionary of parameters.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IHasParameters.Parameters">
            <summary>
            Gets the parameters dictionary.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.HasNameComparer">
            <summary>
            A Comparer that is used to sort implementers of IHasIdentity on their names.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.HasNameComparer`1">
            <summary>
            A Comparer that is used to sort implementers of IHasIdentity on their names.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IModelObject">
            <summary>
            Implemented by an object that 'belongs' to a model, or that needs to know its
            model in order to function properly.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModelObject.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModelObject.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IMOHelper">
            <summary>
            A helper class that contains logic for initializing and registering ModelObjects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IMOHelper.Initialize(Highpoint.Sage.SimCore.IModel@,Highpoint.Sage.SimCore.IModel,System.String@,System.String,System.String@,System.String,System.Guid@,System.Guid)">
            <summary>
            Initializes the specified m_model.
            </summary>
            <param name="m_model">The m_model field in the IModelObject.</param>
            <param name="model">The model to initialize the IModelObject's field with.</param>
            <param name="m_name">The m_name field in the IModelObject.</param>
            <param name="name">The name to initialize the IModelObject's field with.</param>
            <param name="m_description">The m_description field in the IModelObject.</param>
            <param name="description">The description to initialize the IModelObject's field with.</param>
            <param name="m_guid">The m_guid field in the IModelObject.</param>
            <param name="guid">The GUID to initialize the IModelObject's field with.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IMOHelper.RegisterWithModel(Highpoint.Sage.SimCore.IModelObject)">
            <summary>
            Registers the IModelObject with the model by adding the IModelObject to the IModel's ModelObjectDictionary.
            </summary>
            <param name="imo">The IModelObject.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IMOHelper.RegisterWithModel(Highpoint.Sage.SimCore.IModelObject,System.Boolean)">
            <summary>
            Registers the provided IModelObject, keyed on its Guid, with the model, replacing any existing one with the new one, if so indicated.
            </summary>
            <param name="imo">The imo.</param>
            <param name="replaceOk">if set to <c>true</c> [replace OK].</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IModelService">
            <summary>
            Interface IModelService is implemented by anything that can act as a service that has been injected into a model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IModelService.InitializeService(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Initializes the service to run in the provided model. This is called by the model immediately after the service is added.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModelService.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance has been initialized yet.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModelService.InlineInitialization">
            <summary>
            Gets a value indicating whether the service is to be automatically initialized inline when
            the service is added to the model, or if the user (i.e. the custom model class) will do so later.
            </summary>
            <value><c>true</c> if initialization is to occur inline, otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.InitializerAttribute">
            <summary>
            Class InitializerAttribute decorates any method intended to be called by an initializationManager. It declares
            whether the method is to be called during model setup, or during the model's run.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Highpoint.Sage.SimCore.InitializerAttribute.InitializationType">
            <summary>
            This enumeration describes when in the lifecycle of a model, the initializer is called.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.InitializerAttribute.InitializationType.PreRun">
            <summary>
            The initializer is called during model setup, in the transition from Dirty to initialized.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.InitializerAttribute.InitializationType.RunTime">
            <summary>
            The initializer is called during model run, while the model is in the running state.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.Initializer">
            <summary>
            Delegate Initializer is implemented by any method that wishes to be called for initialization by an InitializationManager.
            </summary>
            <param name="model">The model.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.InitializationManager">
            <summary>
            The InitializationManager provides methods and mechanisms for running the initialization of a model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializationManager.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance has been initialized yet.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializationManager.InlineInitialization">
            <summary>
            Gets a value indicating whether the service is to be automatically initialized inline when
            the service is added to the model, or if the user (i.e. the custom model class) will do so later.
            </summary>
            <value><c>true</c> if initialization is to occur inline, otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationManager.#ctor(System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> class. An entity created this way will 
            perform initialization actions when the application's state machine transitions into a specified state.
            </summary>
            <param name="initState">The state, in the model's state machine, whose entry-to will invoke initialization.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationManager.#ctor(System.Enum,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> class. An entity created this way will 
            perform initialization actions when the application's state machine transitions from one specified state to another.
            </summary>
            <param name="initFromState">The transition source state.</param>
            <param name="initToState">The transition destination state.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.InitializationException">
            <summary>
            InitializationException summary
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationException.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.RefType">
            <summary>
            An enum that is used to describe the nature of a dependency relationship. It always refers to one
            object in context of another, such as in an InitializerArgAttribute, where it describes the 
            relationship of the object being referred to in the argument to the object that owns the Initialize
            call. The documentation below will refer to the object that owns the initializer as the 'owner', and
            the object being referred to in the argument as the 'subject'.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.RefType.Private">
            <summary>
            The subject is fully owned by the owner - no other object may reference it during initialization.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.RefType.Owned">
            <summary>
            The subject is owned by the owner, but may be referenced by others.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.RefType.Watched">
            <summary>
            This subject must appear as an argument that is denoted as a Master on some other owner.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.RefType.Shared">
            <summary>
            This subject may be declared as a shared subject by more than one object.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.InitializerArgAttribute">
            <summary>
            An InitializerArgAttribute is an attribute that is attached to an argument to an IModelObject Initialize(...)
            method. The method argument list must always begin with the Model, Name, Guid and Description arguments, and
            then the specific arguments necessary to initialize the object. These specific arguments are the ones that are
            decorated with this attribute type.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializerArgAttribute.#ctor(System.Int32,System.String,Highpoint.Sage.SimCore.RefType,System.Type,System.String)">
            <summary>
            Decorates an argument in an Initialize method. The argument is not optional, and if the argument is an array, it may have no more than one element. 
            </summary>
            <param name="paramIndex">0 for the first Initializer argument (not counting model, name, decription, guid), 1 for the second, etc.</param>
            <param name="argName">The display name for the argument.</param>
            <param name="argDescription">A description of the purpose of the argument.</param>
            <param name="argRefType">The RefType (Master, Slave, Shared, Private) of the argument or object represented by the argument.</param>
            <param name="argType">The Runtime Type of the argument (particularly relevant when the argument is an IModelObject guid.)</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializerArgAttribute.#ctor(System.Int32,System.String,Highpoint.Sage.SimCore.RefType,System.Type,System.Boolean,System.String)">
            <summary>
            Decorates an argument in an Initialize method. If the argument is an array, it may have no more than one element. 
            </summary>
            <param name="paramIndex">0 for the first Initializer argument (not counting model, name, decription, guid), 1 for the second, etc.</param>
            <param name="argName">The display name for the argument.</param>
            <param name="argDescription">A description of the purpose of the argument.</param>
            <param name="argRefType">The RefType (Master, Slave, Shared, Private) of the argument or object represented by the argument.</param>
            <param name="argType">The Runtime Type of the argument (particularly relevant when the argument is an IModelObject guid.</param>
            <param name="optional">True if this argument is a guid that can be Guid.Empty (which maps to 'null' in the ModelObjectDictionary.)</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.InitializerArgAttribute.#ctor(System.Int32,System.String,Highpoint.Sage.SimCore.RefType,System.Type,System.Boolean,System.Int32,System.String)">
            <summary>
            Decorates an argument in an Initialize method. 
            </summary>
            <param name="paramIndex">0 for the first Initializer argument (not counting model, name, decription, guid), 1 for the second, etc.</param>
            <param name="argName">The display name for the argument.</param>
            <param name="argDescription">A description of the purpose of the argument.</param>
            <param name="argRefType">The RefType (Master, Slave, Shared, Private) of the argument or object represented by the argument.</param>
            <param name="argType">The Runtime Type of the argument (particularly relevant when the argument is an IModelObject guid.</param>
            <param name="optional">True if this argument is a guid that can be Guid.Empty (which maps to 'null' in the ModelObjectDictionary.)</param>
            <param name="upperBound">If the argment type is an array, this integer depicts the largest number of elements it can have.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.Name">
            <summary>
            Gets the name of this InitializerArgAttribute.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.Description">
            <summary>
            Gets the description of this InitializerArgAttribute.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.RefType">
            <summary>
            Gets the <see cref="P:Highpoint.Sage.SimCore.InitializerArgAttribute.RefType"/> of this InitializerArgAttribute.
            </summary>
            <value>The type of the ref.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.Type">
            <summary>
            Gets the type of this InitializerArgAttribute.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.Optional">
            <summary>
            Gets a value indicating whether this <see cref="T:InitializerArgAttribute"/> is optional.
            </summary>
            <value><c>true</c> if optional; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.UpperBound">
            <summary>
            Gets the upper bound of this InitializerArgAttribute.
            </summary>
            <value>The upper bound.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.ParamIndex">
            <summary>
            Gets the index of this InitializerArgAttribute.
            </summary>
            <value>The index of the param.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.InitializerArgAttribute.DefaultValue">
            <summary>
            Gets the default value of this InitializerArgAttribute.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IResettable">
            <summary>
            Interface IResettable is implemented by any <see cref="T:Highpoint.Sage.SimCore.IModelObject" /> that can be reset.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IResettable.Reset">
            <summary>
            Performs a reset operation on this instance.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.MetronomeBase">
            <summary>
            Abstract base class from which concrete Metronomes derive. Provides basic services
            and event handlers for a Metronome, which is an object that uses a model's executive
            to create a series of 'tick' events with a consistent period - Simulation Objects
            that are written to expect a uniform discrete time notification can use a metronome
            to achieve that. Multiple metronomes may be defined within a model, with different
            periods, start times and/or finish times.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.MetronomeBase.#ctor(Highpoint.Sage.SimCore.IExecutive,System.TimeSpan)">
            <summary>
            Abstract base class constructor for the Metronome_Base class. Assumes both autostart
            and autofinish for this metronome.
            </summary>
            <param name="exec">The executive that will be serving the events.</param>
            <param name="period">The periodicity of the event train.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.MetronomeBase.#ctor(Highpoint.Sage.SimCore.IExecutive,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Abstract base class constructor for the Metronome_Base class.
            </summary>
            <param name="exec">The executive that will be serving the events.</param>
            <param name="startAt">The start time for the event train.</param>
            <param name="finishAfter">The end time for the event train.</param>
            <param name="period">The periodicity of the event train.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.Metronome_Simple">
            <summary>
            Simple Metronome class is an object that uses a model's executive
            to create a series of 'tick' events with a consistent period - Simulation Objects
            that are written to expect a uniform discrete time notification can use a metronome
            to achieve that. Multiple metronomes may be defined within a model, with different
            periods, start times and/or finish times.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Metronome_Simple.#ctor(Highpoint.Sage.SimCore.IExecutive,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Constructor for the Metronome_Simple class.
            </summary>
            <param name="exec">The executive that will be serving the events.</param>
            <param name="startAt">The start time for the event train.</param>
            <param name="finishAfter">The end time for the event train.</param>
            <param name="period">The periodicity of the event train.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Metronome_Simple.#ctor(Highpoint.Sage.SimCore.IExecutive,System.TimeSpan)">
            <summary>
            Constructor for the Metronome_Simple class. Assumes auto-start, and auto-finish.
            </summary>
            <param name="exec">The executive that will be serving the events.</param>
            <param name="period">The periodicity of the event train.</param>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Metronome_Simple.TickEvent">
            <summary>
            The tick event that is fired by this metronome. Simulation objects expecting to
            receive periodic notifications will receive them from this event. Note that there is
            no inferred sequence to these notifications. If a dependency order is required, then
            the Metronone_Dependencies class should be used.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.TaskProcessorListener">
            <summary>
            This delegate is implemented by any method that wishes to be called back when a task
            processor event, such as 'TaskProcessorAdded' and 'TaskProcessorRemoved' is fired.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ModelEvent">
            <summary>
            This delegate is implemented by any method that wishes to be called back when a model
            is, for example, starting or stopping.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.DefaultModelStates">
            <summary>
            The two default states for a model. The Model's state machine can be replaced with a
            custom one, but these are the states of the default state machine.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.DefaultModelStates.Idle">
            <summary>
            The state machine is idle.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.DefaultModelStates.Running">
            <summary>
            The state machine is running.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.Model">
            <summary>
            The base class from which models are built or derived. Models provide a state machine,
            error and warning management, task processor management (for Task Graphs) and access
            and control functions to the Executive that is running the simulation embodied in this
            model.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.Model.Exec">
            <summary>
            The executive that this model is using.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.#ctor">
            <summary>
            Creates a model with a default name ('Model1', 'Model2', etc.) and self-declared Guid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.#ctor(System.String)">
            <summary>
            Creates a model with a specified name, and self-declared Guid.
            </summary>
            <param name="name">The name for the new model.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.#ctor(System.String,System.Guid)">
            <summary>
            Creates a model with a specified name and Guid.
            </summary>
            <param name="name">The name for the new model.</param>
            <param name="guid">The guid for the new model.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.ModelObjects">
            <summary>
            A dictionary of currently live IModelObjects. An IModelObject that is garbage-
            collected is automatically removed from this collection. Note that the object
            is not necessarily removed at the time of last release, but at the time of
            garbage collection. Code can call Remove(...) to explicitly remove the object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.RandomServer">
            <summary>
            Gets the random server in use by this model.
            </summary>
            <value>The random server.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.RandomSeed">
            <summary>
            Gets the random seed in use by this model.
            </summary>
            <value>The random seed in use by this model.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.ModelConfig">
            <summary>
            The ModelConfig is an object that holds the contents of the Sage® section of the
            app.config file.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.ExecutiveController">
            <summary>
            Gets the executive controller that governs the rate-throttling and frame-rendering event frequency of this model.
            </summary>
            <value>The executive controller.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Executive">
            <summary>
            Provides access to the executive being used by this model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.StateMachine">
            <summary>
            Provides access to the state machine being used by this model. While the state machine
            can be set, too, this is an advanced feature, and should not be done unless the developer
            is sure what they are doing.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value><c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.IsPaused">
            <summary>
            Gets or sets a value indicating whether this instance is paused.
            </summary>
            <value><c>true</c> if this instance is paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.IsCompleted">
            <summary>
            Gets or sets a value indicating whether this instance is completed.
            </summary>
            <value><c>true</c> if this instance is completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.IsReady">
            <summary>
            Gets or sets a value indicating whether this instance is ready to be started.
            </summary>
            <value><c>true</c> if this instance is ready to be started; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.CreateModelExecutive">
            <summary>
            Called during the creation of the model, this method creates the executive. It is intended
            to be overridden in derived classes if the designer wishes to create a new and different
            executive instead of the standard executive.
            </summary>
            <returns>The executive to be used by this model.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.OnNewResourceCreated(Highpoint.Sage.Resources.IResource)">
            <summary>
            Must be called by the creator when a new resource is created.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.ResourceCreatedEvent">
            <summary>
            Event that is fired when a new resource has been created.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Parameters">
            <summary>
            Gets the parameters dictionary, a free-form dictionary of model-wide parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.WarningHappened">
            <summary>
            Fired when a warning is added to the model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Warnings">
            <summary>
            An enumeration of all of the warnings currently applicable to this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.AddWarning(Highpoint.Sage.SimCore.IModelWarning)">
            <summary>
            Adds a warning to this model, e.g. a 'GenericModelWarning'...
            </summary>
            <param name="theWarning">The warning to be added.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.HasWarnings">
            <summary>
            Returns true if this model has any active warnings.
            </summary>
            <returns>Returns true if this model has any active warnings - otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.ClearAllWarnings">
            <summary>
            Clears all of the warnings applicable to this model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.ErrorHappened">
            <summary>
            Fired when an error happens in (is added to) a model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.ErrorCleared">
            <summary>
            Fired when an error is removed from a model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.AddErrorHandler(Highpoint.Sage.SimCore.IErrorHandler)">
            <summary>
            Enables a user/developer to add an error handler to the model in real time,
            (e.g. during a simulation run) and ensures that that handler is called for
            any errors currently in existence in the model.
            </summary>
            <param name="theErrorHandler">The error handler delegate that is to receive notification of the error events.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.RemoveErrorHandler(Highpoint.Sage.SimCore.IErrorHandler)">
            <summary>
            Removes an error handler from the model.
            </summary>
            <param name="theErrorHandler">The error handler to be removed from the model.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Errors">
            <summary>
            An enumeration over all of the errors in the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.AddError(Highpoint.Sage.SimCore.IModelError)">
            <summary>
            Adds an error to the model, and iterates over all of the error handlers,
            allowing each in turn to respond to the error. As soon as any errorHandler
            indicates that it has HANDLED the error (by returning true from 'HandleError'),
            the error is cleared, and further handlers are not called.
            </summary>
            <param name="theError">The error that is to be added to the model's error list.</param>
            <returns>True if the error was successfully added to the model, false if it was cleared by a handler.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.AddErrorCheckHandlerWithModelAbortOnFailure(System.Enum)">
            <summary>
            Adds a handler that, after transition to a specified state, will check the
            model for errors and if it finds any, will abort the model, putting it back to idle.
            </summary>
            <param name="onTransitionToWhichState">The model state in which the model is to be checked for errors.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.RemoveAutoclearedErrors">
            <summary>
            Removes ModelErrors whose 'AutoClear' value is set to true. Typically applied to errors 
            that do not persist from run to run - i.e. that are run time, not configuration, errors.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.RemoveError(Highpoint.Sage.SimCore.IModelError)">
            <summary>
            Removes the error from the model's collection of errors.
            </summary>
            <param name="theError">The error to be removed from the model.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.ClearAllErrorsFor(System.Object)">
            <summary>
            Removes all errors whose target is the specified object.
            </summary>
            <param name="target">The object for whom all errors are to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.ClearAllErrors">
            <summary>
            Removes all errors.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.HasErrors">
            <summary>
            Returns true if the model has errors.
            </summary>
            <returns>true if the model has errors.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.ErrorSummary">
            <summary>
            Provides a string that summarizes all of the errors currently active in this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.CreateStateMachine">
            <summary>
            Creates the state machine to be used by this model. Called by the framework, 
            and intended to be overridden by a derived class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.GetStartEnum">
            <summary>
            Returns the enumeration that represents the resultant state of the START transition in this model's state machine.
            <p><b>NOTE:</b></p>
            This method, when added to a derived class, needs to ne 'new'ed, not overridden. 
            </summary>
            <returns>The enumeration that represents the resultant state of the START transition in this model's state machine.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.GetAbortEnum">
            <summary>
            Returns the enumeration that represents the resultant state of the ABORT transition in this model's state machine.
            </summary>
            <p><b>NOTE:</b></p>
            This method, when added to a derived class, needs to ne 'new'ed, not overridden. 
            <returns>The enumeration that represents the resultant state of the ABORT transition in this model's state machine.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.GetIdleEnum">
            <summary>
            Returns the enumeration that represents the state of this model's state machine from which START is a legal transition.
            </summary>
            <p><b>NOTE:</b></p>
            This method, when added to a derived class, needs to be 'new'ed, not overridden. 
            <returns>The enumeration that represents the state of this model's state machine from which START is a legal transition.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.Start">
            <summary>
            Starts the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.Pause">
            <summary>
            Pauses execution of this model after completion of the running callback of the current event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.Resume">
            <summary>
            Resumes execution of this model. Ignored if the model is not already paused.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.Abort">
            <summary>
            Aborts the model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.Starting">
            <summary>
            Fired when the model has been commanded to start. Should only be used to queue up events in the executive.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.Stopping">
            <summary>
            Fired when the model has been commanded to stop.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.Resetting">
            <summary>
            Fired when the model has been commanded to reset.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.Model.Completed">
            <summary>
            Fired when the model has completed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.FireModelStartingEvent">
            <summary>
            Called by a derived class to cause this base class to fire the Model.Starting event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.FireModelStoppingEvent">
            <summary>
            Called by a derived class to cause this base class to fire the Model.Stopping event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.FireModelCompletedEvent">
            <summary>
            Called by a derived class to cause this base class to fire the Model.Completed event.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Name">
            <summary>
            The name of this model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Description">
            <summary>
            A description of this Model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.Model.Guid">
            <summary>
            The Guid by which this model will be known.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.Model.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid"></param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ModelConfig">
            <summary>
            Class ModelConfig is a collection of initialization parameters that is intended to be available to the model in the app.config file.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.INotification">
            <summary>
            This interface is implemented by an object that provides notification of some event.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.INotification.Name">
            <summary>
            The name of the notification.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.INotification.Narrative">
            <summary>
            A descriptive text that describes what happened.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.INotification.Target">
            <summary>
            Target is the place that the notification occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.INotification.Subject">
            <summary>
            Subject is the thing that (probably) caused the notification.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IModelError">
            <summary>
            This interface is implemented by an object that serves to indicate that an
            error has occurred in the model.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModelError.InnerException">
            <summary>
            An exception that may have been caught in the detection of this error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IModelError.AutoClear">
            <summary>
            Gets a value indicating whether this error should be automatically cleared at the start of a simulation.
            </summary>
            <value><c>true</c> if [auto clear]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IModelWarning">
            <summary>
            This interface is implemented by an object that serves to indicate that a
            warning has occurred in the model.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IErrorHandler">
            <summary>
            Implemented by an object that is able to handle (and perhaps resolve) an error.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IErrorHandler.HandleError(Highpoint.Sage.SimCore.IModelError)">
            <summary>
            Called when an individual error occurs, and gives the error handler an opportunity to
            resolve the error.
            </summary>
            <param name="modelError">The error that just occurred.</param>
            <returns>true if the error was handled.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IErrorHandler.HandleErrors(System.Collections.IEnumerable)">
            <summary>
            Called to give the error handler an opportunity to handle all currently-existent errors
            in one fell swoop. This is typically called immediately prior to attempting a requested
            state transition, and if, after attempting resolution, any errors remain, the requested
            transition is made to fail.
            </summary>
            <param name="modelErrors">An IEnumerable that contains the errors to be handled.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.GenericModelError">
            <summary>
            A basic implementation of IModelError. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.GenericModelError.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            Creates an instance of a basic implementation of IModelError.
            </summary>
            <param name="name">The short name of the error.</param>
            <param name="narrative">A longer narrative of the error.</param>
            <param name="target">The target of the error - where the error happened.</param>
            <param name="subject">The subject of the error - who probably caused it.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.GenericModelError.#ctor(System.String,System.String,System.Object,System.Object,System.Exception)">
            <summary>
            Creates an instance of a basic implementation of IModelError.
            </summary>
            <param name="name">The short name of the error.</param>
            <param name="narrative">A longer narrative of the error.</param>
            <param name="target">The target of the error - where the error happened.</param>
            <param name="subject">The subject of the error - who probably caused it.</param>
            <param name="innerException">An exception that may have been caught in the detection of this error.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.Name">
            <summary>
            The short name of the error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.Narrative">
            <summary>
            A longer narrative of the error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.Target">
            <summary>
            The target of the error - where the error happened.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.Subject">
            <summary>
            The subject of the error - who probably caused it.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.InnerException">
            <summary>
            The exception, if any, that generated this ModelError.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelError.AutoClear">
            <summary>
            Gets a value indicating whether this error should be automatically cleared at the start of a simulation.
            </summary>
            <value><c>true</c> if [auto clear]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.GenericModelWarning">
            <summary>
            A basic implementation of IModelWarning. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.GenericModelWarning.#ctor(System.String,System.String,System.Object,System.Object)">
            <summary>
            Creates an instance of a basic implementation of IModelWarning.
            </summary>
            <param name="name">The short name of the warning.</param>
            <param name="narrative">A longer narrative of the warning.</param>
            <param name="target">The target of the warning - where the warning happened.</param>
            <param name="subject">The subject of the warning - who probably caused it.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelWarning.Name">
            <summary>
            The short name of the warning.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelWarning.Narrative">
            <summary>
            A longer narrative of the warning.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelWarning.Target">
            <summary>
            The target of the warning - where the warning happened.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.GenericModelWarning.Subject">
            <summary>
            The subject of the warning - who probably caused it.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ModelExceptionError">
            <summary>
            An error that is registered as a result of an exception having been thrown, unhandled, by the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelExceptionError.#ctor(System.Exception)">
            <summary>
            Creates a ModelExceptionError around a thrown exception.
            </summary>
            <param name="ex">The exception that caused this error.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelExceptionError.BaseException">
            <summary>
            The exception that caused this error.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ModelObjectEvent">
            <summary>
            An event that notifies listeners of something happening to an IModelObject.
            </summary>
            <param name="imo">The IModelObject of interest.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.GuidEvent">
            <summary>
            An event that notifies listeners of something happening related to a specified Guid.
            </summary>
            <param name="key">The Guid of interest.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ModelObjectDictionary">
            <summary>
            A ModelObjectDictionary is a passive directory of objects owned by this model. It not 
            intended to be the primary holder of references, but rather to be a navigation aid 
            among objects that already "belong" to the model, and that are removed once the model
            no longer wants/needs them. As long as someone, somewhere (presumably a hierarchy owned
            somehow &amp; somewhere in the model) has a reference to all useful IModelObjects, they
            will be available in this dictionary. However, in order to clean out this dictionary 
            automatically as objects are no longer in use in the model, it uses a WeakReference
            to track the object. Thus, as soon as no one else has a reference to the object, it 
            will be cleaned out of this dictionary as soon as the next Garbage Collection sweep.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.#ctor">
            <summary>
            ModelObjectDictionary is a dictionary that keeps references to all ModelObjects
            and can retrieve those references based on the ModelObjects' Guids. It fires an
            event when asked to retrieve an object that it does not have already stored.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.#ctor(System.Boolean)">
            <summary>
            ModelObjectDictionary is a dictionary that keeps references to all ModelObjects
            and can retrieve those references based on the ModelObjects' Guids. It fires an
            event when asked to retrieve an object that it does not have already stored.
            </summary>
            <param name="retainHardReference">if set to <c>true</c> the dictionary uses a
            Hashtable instead of a WeakHashtable. This means that this dictionary can be used
            to maintain connections to the objects it contains, but it also means that the
            developer is responsible for explicitly removing objects from this dictionaary if
            they are no longer desired.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Delete(System.Guid,Highpoint.Sage.SimCore.IModelObject)">
            <summary>
            Deletes the object in this dictionary with the specified key, replacing it
            with the new entry.
            </summary>
            <param name="keyForCurrentEntry">The key for current entry.</param>
            <param name="newEntryToReplaceIt">The new entry to replace it.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.FindAll(System.Predicate{Highpoint.Sage.SimCore.IModelObject})">
            <summary>
            Retrieves all model objects that satisfy the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.FindByType``1(System.Boolean)">
            <summary>
            Retrieves a depth-first iterator over all nodes in this PFC that satisfy the predicate.
            </summary>
            <param name="mustbeExactTypeMatch">if set to <c>true</c>, a returned IModelObject mustbe exact type match to the provided type.</param>
            <returns></returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ModelObjectDictionary.NewModelObjectAdded">
            <summary>
            Fired when a model object is added to this ModelObjectDictionary
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ModelObjectDictionary.ExistingModelObjectRemoved">
            <summary>
            Fired when a model object is removed from this ModelObjectDictionary
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ModelObjectDictionary.UnknownModelObjectRequested">
            <summary>
            This event is fired any time someone asks for a model object, and the
            ModelObjectDictionary does not have a record of such an object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionaryEnumerator"></see> object for the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionaryEnumerator"></see> object for the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.Item(System.Guid)">
            <summary>
            Retrieves the ModelObject whose key is the specified Guid. Guid.Empty is considered
            an explicit request for a null return, and adding an object with Guid.Empty as the
            key is considered illegal. All other Guids, if not contained in the dictionary, will
            result in the firing of the UnknownModelObjectRequested event.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.Item(System.Object)">
            <summary>
            Retrieves the ModelObject whose key is the specified Guid. Guid.Empty is considered
            an explicit request for a null return, and adding an object with Guid.Empty as the
            key is considered illegal. All other Guids, if not contained in the dictionary, will
            result in the firing of the UnknownModelObjectRequested event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Remove(System.Guid)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object is read-only.-or- The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object is read-only.-or- The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Contains(System.Guid)">
            <summary>
            Determines whether the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object is read-only. </exception>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.Values">
            <summary>
            Gets an <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object containing the values in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object containing the values in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Add(System.Guid,Highpoint.Sage.SimCore.IModelObject)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> is read-only.-or- The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> is read-only.-or- The <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.Keys">
            <summary>
            Gets an <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object containing the keys of the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object containing the keys of the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ModelObjectDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ModelObjectDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:Highpoint.Sage.SimCore.ModelObjectDictionary"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.PrepareTransitionEvent">
            <summary>
            This delegate is implemented by a method that is intended to perform part
            of the preparation for a transition. It accepts the model, and returns a
            reason for failing the transition, or null if the implementer of the 
            delegate condones the completion of the transition.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.CommitTransitionEvent">
            <summary>
            This delegate is implemented by a method that is intended to be notified
            of the successful attempt to perform a transition, and to take part in
            the commitment of that transition attempt. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.RollbackTransitionEvent">
            <summary>
            This delegate is implemented by a method that is intended to be notified
            of the unsuccessful attempt to perform a transition, and to take part in
            the rollback of that transition attempt. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ITransitionHandler">
            <summary>
            Implemented by a transition handler. A transition handler embodies
            the actions to be performed when the state machine is asked to make
            a transition from one state to another. The transition is performed
            via a two-phase protocol, first preparing to make the transition,
            and then if no handler that was involved in the preparation phase
            registered a failure reason, a commit operation is begun. Otherwise,
            if objections were registered, a rollback operation is begun. 
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ITransitionHandler.Prepare">
            <summary>
            This event is fired when the transition is beginning, and all
            handlers are given an opportunity to register failure reasons.
            This event permits registration for the preparation using the
            standard += and -= syntax.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ITransitionHandler.Commit">
            <summary>
            If preparation is successful, this event is fired to signify
            commitment of the transition.
            This event permits registration for the commitment using the
            standard += and -= syntax.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ITransitionHandler.Rollback">
            <summary>
            If preparation is not successful, this event is fired to
            signify the failure of an attempted transition.
            This event permits registration for the rollback using the
            standard += and -= syntax.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ITransitionHandler.IsValidTransition">
            <summary>
            Indicates whether this transition is permissible.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.AddPrepareEvent(Highpoint.Sage.SimCore.PrepareTransitionEvent,System.Double)">
            <summary>
            Adds a handler to the Prepare event with an explicitly-specified
            sequence number. The sequence begins with those handlers that 
            have a low sequence number.
            </summary>
            <param name="pte">The handler for the Prepare event.</param>
            <param name="sequence">The sequence number for the handler.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.RemovePrepareEvent(Highpoint.Sage.SimCore.PrepareTransitionEvent)">
            <summary>
            Removes a handler from the set of handlers that are registered
            for the prepare event.
            </summary>
            <param name="pte">The PrepareTransitionEvent handler to remove.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.AddCommitEvent(Highpoint.Sage.SimCore.CommitTransitionEvent,System.Double)">
            <summary>
            Adds a handler to the Commit event with an explicitly-specified
            sequence number. The sequence begins with those handlers that 
            have a low sequence number.
            </summary>
            <param name="cte">The handler for the CommitTransitionEvent</param>
            <param name="sequence">The sequence number for the handler.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.RemoveCommitEvent(Highpoint.Sage.SimCore.CommitTransitionEvent)">
            <summary>
            Removes a handler from the set of handlers that are registered
            for the commit event.
            </summary>
            <param name="cte">The handler for the CommitTransitionEvent</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.AddRollbackEvent(Highpoint.Sage.SimCore.RollbackTransitionEvent,System.Double)">
            <summary>
            Adds a handler to the Prepare event with an explicitly-specified
            sequence number. The sequence begins with those handlers that 
            have a low sequence number.
            </summary>
            <param name="rte">The handler for the Rollback event.</param>
            <param name="sequence">The sequence number for the handler.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ITransitionHandler.RemoveRollbackEvent(Highpoint.Sage.SimCore.RollbackTransitionEvent)">
            <summary>
            Removes a handler from the set of handlers that are registered
            for the rollback event.
            </summary>
            <param name="rte">The handler for the Rollback event.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.StateMethod">
            <summary>
            Implemented by a method that is to be called once the state machine
            completes transition to a specified state.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.StateMachine">
            <summary>
            A table-driven, two-phase-transaction state machine. The user configures
            the state machine with a number of states, and the state machine creates
            handlers for transition out of and into each state, as well as handlers
            for transitions between two specific states, and one universal transition
            handler. Each handler provides events that are fired when the state machine
            attempts and then either completes or rolls back a transition.  When a
            transition is requested, the state machine collects all of the outbound 
            transition handlers from the current state, all of the handlers into the 
            destination state, all handlers specified for both the current and destination
            states, and the universal handler. These handlers' 'Prepare' events are called
            in the order implied by their sequence numbers (if no sequence number was
            specified, it is assumed to be 0.0.) If all 'Prepare' handlers' event targets
            are called with none returning a TransitionFailureReason, then the State
            Machine calls all of the Commit events. If there was at least one
            TransitionFailureReason, then the 'Rollback' event handlers are called.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.StateMachine.GenericStates">
            <summary>
            Generic states are states that all state machines should support, and in declaring their states, set equality from
            appropriate states to these states. This will support interoperability of many libraries into state machines
            declared differently for different solutions, but with some of the same states defined in their lifecycles.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.StateMachine.GenericStates.Idle">
            <summary>
            The model is idle. It has been built, perhaps not completely, but has not gone through any validation. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.StateMachine.GenericStates.Validated">
            <summary>
            The model is structurally valid.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.StateMachine.GenericStates.Initialized">
            <summary>
            The model has been properly initialized, and is ready to be run.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.StateMachine.GenericStates.Running">
            <summary>
            The model is currently running.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.StateMachine.GenericStates.Finished">
            <summary>
            The model has completed running. The executive will read the last event time, or DateTime.MaxValue. Post-run data
            may be available, and a call to Reset() is probably necessary to run it again.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.#ctor(System.Boolean[0:,0:],System.Enum[],System.Enum)">
            <summary>
            Creates a state machine that does not reference a Model. Many of the event
            delegates send a model reference with the notification. If the recipients
            all either (a) don't need this reference, (b) have it from elsewhere, or
            (c) the entity creating this state machine will set the Model later, then
            this constructor may be used.
            </summary>
            <param name="transitionMatrix">A matrix of booleans. 'From' states are the 
            row indices, and 'To' states are the column indices. The contents of a given
            cell in the matrix indicates whether that transition is permissible.</param>
            <param name="followOnStates">An array of enumerations of states, indicating
            which transition should occur automatically, if any, after transition into
            a given state has completed successfully.</param>
            <param name="initialState">Specifies the state in the state machine that is
            to be the initial state.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.#ctor(Highpoint.Sage.SimCore.IModel,System.Boolean[0:,0:],System.Enum[],System.Enum)">
            <summary>
            Creates a state machine that references a Model. Many of the event
            delegates send a model reference with the notification.
            </summary>
            <param name="model">The model to which this State Machine belongs.</param>
            <param name="transitionMatrix">A matrix of booleans. 'From' states are the 
            row indices, and 'To' states are the column indices. The contents of a given
            cell in the matrix indicates whether that transition is permissible.</param>
            <param name="followOnStates">An array of enumerations of states, indicating
            which transition should occur automatically, if any, after transition into
            a given state has completed successfully.</param>
            <param name="initialState">Specifies the state in the state machine that is
            to be the initial state.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.SetModel(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Allows the caller to set the model that this State Machine
            references. 
            </summary>
            <param name="model">The model that this state machine references.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.TransitionHandler(System.Enum,System.Enum)">
            <summary>
            Provides a reference to the transition handler that helps govern the
            transition between two specified states.
            </summary>
            <param name="from">The 'from' state that will select the transition handler.</param>
            <param name="to">The 'to' state that will select the transition handler.</param>
            <returns>The transition handler that will govern the transition between two
            specified states.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.OutboundTransitionHandler(System.Enum)">
            <summary>
            Provides a reference to the transition handler that helps govern all
            transitions OUT OF a specified state.
            </summary>
            <param name="from">The 'from' state that will select the transition handler.</param>
            <returns>A reference to the transition handler that helps govern the
            transitions OUT OF a specified state.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.InboundTransitionHandler(System.Enum)">
            <summary>
            Provides a reference to the transition handler that helps govern all
            transitions INTO a specified state.
            </summary>
            <param name="to">The 'to' state that will select the transition handler.</param>
            <returns>A reference to the transition handler that helps govern the
            transitions INTO a specified state.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.UniversalTransitionHandler">
            <summary>
            Provides a reference to the transition handler that helps govern all transitions.
            </summary>
            <returns>A reference to the transition handler that helps govern all transitions.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.StateMachine.State">
            <summary>
            The current state of the state machine.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.ForceOverrideState(System.Enum)">
            <summary>
            Forces the state machine into the new state. No transitions are done, no handlers are called - It's just POOF, new state. Use this with extreme caution!
            </summary>
            <param name="state">The state into which the state machine is to be placed.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.StateMachine.IsTransitioning">
            <summary>
            True if the state machine is in the process of performing a transition.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.StateMachine.NextState">
            <summary>
            Provides the identity of the next state that the State Machine will enter.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.SetStateMethod(Highpoint.Sage.SimCore.StateMethod,System.Enum)">
            <summary>
            Sets the method that will be called when the state machine enters a given state.
            </summary>
            <param name="newStateMethod">The method to be called.</param>
            <param name="forWhichState">The state in which the new method should be called.</param>
            <returns>The old state method, or null if there was none assigned.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.DoTransition(System.Enum)">
            <summary>
            Commands the state machine to attempt transition to the indicated state.
            Returns a list of ITransitionFailureReasons. If this list is empty, the
            transition was successful.
            </summary>
            <param name="toWhatState">The desired new state of the State Machine.</param>
            <returns>A  list of ITransitionFailureReasons. (Empty if successful.)</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.DoTransition(System.Enum,System.Object)">
            <summary>
            Commands the state machine to attempt transition to the indicated state.
            Returns a list of ITransitionFailureReasons. If this list is empty, the
            transition was successful.
            </summary>
            <param name="toWhatState">The desired new state of the State Machine.</param>
            <param name="userData">The user data to pass into this transition request - it will be sent out of each state change notification and state method.</param>
            <returns>
            A  list of ITransitionFailureReasons. (Empty if successful.)
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.RunTransitionSequence(System.Enum[])">
            <summary>
            Attempts to run the sequence of transitions. If any fail, the call returns in the state where the failure occurred,
            and the reason list contains whatever reasons were given for the failure. This is to be used if the progression is
            simple. If checks and responses need to be done, the developer should build a more step-by-step sequencing mechanism.
            </summary>
            <param name="states">The states.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.IsStateQuiescent(System.Enum)">
            <summary>
            Determines whether the specified state is quiescent - i.e. has no automatic follow-on state.
            </summary>
            <param name="whichState">the specified state.</param>
            <returns>
            	<c>true</c> if the specified state is quiescent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.SetGenericStateEquivalents(System.Enum,System.Enum,System.Enum,System.Enum,System.Enum)">
            <summary>
            Sets the model-specific enums (states) that equate to each of the StateMachine.GenericState values.
            </summary>
            <param name="idle">The equivalent state for the generic idle state.</param>
            <param name="validated">The equivalent state for the generic validated state.</param>
            <param name="initialized">The equivalent state for the generic initialized state.</param>
            <param name="running">The equivalent state for the generic running state.</param>
            <param name="finished">The equivalent state for the generic finished state.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.GetStateEquivalentTo(Highpoint.Sage.SimCore.StateMachine.GenericStates)">
            <summary>
            Gets the application defined Enum (state) that equates to the provided generic state.
            </summary>
            <param name="equivalentGenericState">The genericState whose equivalent is desired.</param>
            <returns>The enum that is equivalent, conceptually, the provided generic state.</returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.StateMachine.TransitionCompletedSuccessfully">
            <summary>
            This event fires when a transition completes successfully, and reaches the intended new state.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.InitializeStateTranslationTable(System.Enum)">
            <summary>
            Prepares the state translation table
            </summary>
            <param name="state">Provides the enum type that contains the various states</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine.GetStateNumber(System.Enum)">
            <summary>
            Gets the state number for the provided state.
            </summary>
            <param name="stateEnum">The enum that represents the provided state.</param>
            <returns>The state number.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.StateMachine._TestGetStateNumber(System.Enum)">
            <summary>
            Test method that exposes a state machine's state's number.
            </summary>
            <param name="stateEnum">The state.</param>
            <returns>The number that represents that state.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.TransitionFailureException">
            <summary>
            An exception that is fired if and when a transition fails for a reason
            internal to the state machine - currently, this is only in the case of
            a request to perform an illegal state transition.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.TransitionFailureException.#ctor(System.Collections.IList)">
            <summary>
            Creates a TransitionFailureException around a list of failure reasons.
            </summary>
            <param name="reasons">A list of failure reasons.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.TransitionFailureException.#ctor(Highpoint.Sage.SimCore.ITransitionFailureReason)">
            <summary>
            Creates a TransitionFailureException around a single reason.
            </summary>
            <param name="reason">The TransitionFailureReason.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.TransitionFailureException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.TransitionFailureException.Reasons">
            <summary>
            Gives the caller access to the list (collection) of failure reasons.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.TransitionFailureException.ToString">
            <summary>
            Provides a human-readable representation of the failure exception,
            in the form of a narrative describing the failure reasons.
            </summary>
            <returns>A narrative describing the failure reasons.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ITransitionFailureReason">
            <summary>
            Encapsulates the reason for a transition failure, including what went wrong,
            and where.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ITransitionFailureReason.Reason">
            <summary>
            What went wrong.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ITransitionFailureReason.Object">
            <summary>
            Where the problem arose.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SimpleTransitionFailureReason">
            <summary>
            A simple class that implements ITransitionFailureReason
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SimpleTransitionFailureReason.#ctor(System.String,System.Object)">
            <summary>
            Creates a SimpleTransitionFailureReason around a reason string and an object that
            indicates where the problem arose.
            </summary>
            <param name="reason">What went wrong.</param>
            <param name="Object">Where the problem arose.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SimpleTransitionFailureReason.Reason">
            <summary>
            What went wrong.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SimpleTransitionFailureReason.Object">
            <summary>
            Where the problem arose.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.EnumStateMachine`1">
            <summary>
            The EnumStateMachine represents a simple state machine whose states are the values of the enum,
            whose transitions are all allowable, and which tracks the amount of run-time spent in each state.
            A developer can wrap this class in another to limit the permissible transitions, add handlers,
            etc.
            </summary>
            <typeparam name="TEnum">The type of the t enum.</typeparam>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EnumStateMachine`1.#ctor(Highpoint.Sage.SimCore.IExecutive,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.SimCore.EnumStateMachine`1"/> class.
            </summary>
            <param name="exec">The executive whose time sequence will be followed in collecting statistics for this machine.</param>
            <param name="initialState">The state in which the machine initially resides.</param>
            <param name="trackTransitions">if set to <c>true</c>, the state machine will track the from, to, and time of each transition.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EnumStateMachine`1.TimeSpentInState(`0)">
            <summary>
            The amount of time the machine spent in the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EnumStateMachine`1.ResetStatistics(System.DateTime)">
            <summary>
            Resets the statistics kept on this machine's last run.
            </summary>
            <param name="when">The when.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EnumStateMachine`1.ToState(`0)">
            <summary>
            Transitions the state of this machine to the specified state.
            </summary>
            <param name="toState">The requested destination state.</param>
            <returns><c>true</c> if the transition was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.CurrentState">
            <summary>
            Gets the current state of the machine.
            </summary>
            <value>The state of the current.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.StateTimes">
            <summary>
            Gets the state times in a dictionary of DateTimes, keyed on the enum value that represents the state.
            </summary>
            <value>The state times.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.Transitions">
            <summary>
            Gets the list of transitions experienced in the last run of the executive.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.EnumStateMachine`1.TransitionRecord">
            <summary>
            Records data on Transitions
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.TransitionRecord.From">
            <summary>
            The state from which the transition occurred.
            </summary>
            <value>From.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.TransitionRecord.To">
            <summary>
            The state to which the transition occurred.
            </summary>
            <value>To.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.EnumStateMachine`1.TransitionRecord.When">
            <summary>
            When the transition occurred.
            </summary>
            <value>The when.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ISynchronizer">
            <summary>
            Interface implemented by all synchronizers. A Synchronizer is an object
            that is capable of making sure that things that could otherwise take place
            at differing times, occur at the same time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ISynchronizer.GetSynchChannel(System.IComparable)">
            <summary>
            Acquires a Synchronization Channel. A synch channel is used once by one
            object that wishes to be synchronized. Once all channels that have been
            acquired from a synchronizer have had their 'Synchronize' methods called,
            all channels' users are allowed to proceed.
            </summary>
            <param name="sequence">A sequence indicator that determines which synch
            channels' owners are instructed to proceed first. Lesser IComparables go
            first.</param>
            <returns>A Synch Channel with the assigned priority.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ISynchChannel">
            <summary>
            Implemented by a synch channel. A synch channel is obtained from a Synchronizer, and
            is a one-use, one-client mechanism for gating execution. Once all clients that have 
            acquired synch channels have called 'Synchronize' on those channels, they are all allowed
            to proceed, in the order implied by the Sequencer IComparable.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ISynchChannel.Synchronize">
            <summary>
            Called by a synch channel to indicate that it is ready to proceed. It will be
            allowed to do so once all clients have called this method.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ISynchChannel.Sequencer">
            <summary>
            Gets a sequencer that can be used in a Sort operation to determine the order in which the 
            clients are allowed to proceed.
            </summary>
            <value>The sequencer.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.DetachableEventSynchronizer">
            <summary>
            Synchronizes a series of threads that are all running on DetachableEvent handlers.
            The clients will call Synchronize on DetachableEvent threads, and the threads will
            pause until all open channels contain paused threads. Then, in the specified sequence,
            all clients will be resumed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.DetachableEventSynchronizer.#ctor(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Creates a DetachableEventSynchronizer and attaches it to the specified executive.
            </summary>
            <param name="model">The model that owns the executive that will be managing all of the Detachable Events
            that are to be synchronized.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.DetachableEventSynchronizer.GetSynchChannel(System.IComparable)">
            <summary>
            Acquires a Synchronization Channel. A synch channel is used once by one
            object that wishes to be synchronized. Once all channels that have been
            acquired from a synchronizer have had their 'Synchronize' methods called,
            all channels' users are allowed to proceed. Note that the constructor need
            not be called from a DetachableEvent thread - but Synchronize(...) will
            need to be.
            </summary>
            <param name="sequencer">A sequence indicator that determines which synch
            channels' owners are instructed to proceed first.</param>
            <returns>A Synch Channel with the assigned priority.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.DetachableEventSynchronizer.SynchChannel">
            A synch channel is obtained from a Synchronizer, and
            is a one-use, one-client mechanism for gating execution. Once all clients that have 
            acquired synch channels have called 'Synchronize' on those channels, they are all allowed
            to proceed, in the order implied by the Sequencer IComparable.
        </member>
        <member name="M:Highpoint.Sage.SimCore.DetachableEventSynchronizer.SynchChannel.#ctor(Highpoint.Sage.SimCore.DetachableEventSynchronizer,System.IComparable)">
            <summary>
            Creates a new instance of the <see cref="T:SynchChannel"/> class.
            </summary>
            <param name="ds">The <see cref="T:Highpoint.Sage.SimCore.DetachableEventSynchronizer"/>.</param>
            <param name="sortKey">The sort key.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.DetachableEventSynchronizer.SynchChannel.Sequencer">
            <summary>
            Gets a sequencer that can be used in a Sort operation to determine the order in which the
            clients of a Synchronizer are allowed to proceed.
            </summary>
            <value>The sequencer.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.DetachableEventSynchronizer.SynchChannel.Synchronize">
            <summary>
            Called by a synch channel to indicate that it is ready to proceed. It will be
            allowed to do so once all clients have called this method.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IHasWriteLock">
            <summary>
            Implemented by an object that can be set to read-only.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.IHasWriteLock.IsWritable">
            <summary>
            Gets a value indicating whether this instance is currently writable.
            </summary>
            <value>
            	<c>true</c> if this instance is writable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.WritabilityChangeEvent">
            <summary>
            Fires when an object that can be made read-only, changes its writability status.
            </summary>
            <param name="newWritableState">true if the object is now writable.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.WriteLock">
            <summary>
            A class that manages the details of nestable write locking - that is, a parent that is write-locked implies that its children are thereby also write-locked.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteLock.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WriteLock"/> class.
            </summary>
            <param name="initiallyWritable">if set to <c>true</c> [initially writable].</param>
        </member>
        <member name="E:Highpoint.Sage.SimCore.WriteLock.WritabilityChanged">
            <summary>
            Fires when the object that this lock is overseeing, changes its writability status.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.WriteLock.IsWritable">
            <summary>
            Gets a value indicating whether this instance is currently writable.
            </summary>
            <value>
            	<c>true</c> if this instance is writable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteLock.SetWritable(System.Boolean)">
            <summary>
            Sets the value indicating whether this instance is currently writable.
            </summary>
            <param name="writable">if set to <c>true</c> [writable].</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.WriteLock.WhereApplied">
            <summary>
            Gets the location in a hierarchy of write-locked objects where the write-lock was applied.
            </summary>
            <value>The where applied.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteLock.AddChild(Highpoint.Sage.SimCore.WriteLock)">
            <summary>
            Adds a dependent child object to this WriteLock.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteLock.RemoveChild(Highpoint.Sage.SimCore.WriteLock)">
            <summary>
            Removes a dependent child object from this WriteLock.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteLock.ClearChildren">
            <summary>
            Clears the children from this WriteLock.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">
            <summary>
            Thrown when someone tries to change a value that is write-locked.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteProtectionViolationException.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WriteProtectionViolationException"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteProtectionViolationException.#ctor(System.Object,Highpoint.Sage.SimCore.WriteLock)">
            <summary>
            Creates a new instance of the <see cref="T:WriteProtectionViolationException"/> class.
            </summary>
            <param name="target">The target - the object that received the attempt to change its value.</param>
            <param name="writeLock">The write lock that is watching that target.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.WriteProtectionViolationException.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:WriteProtectionViolationException"/> class.
            </summary>
            <param name="target">The target - the object that received the attempt to change its value.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.WriteProtectionViolationException.Target">
            <summary>
            Gets the target - the object that received the attempt to change its value.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ISPBTreeNode">
            <summary>
            An interface that, when implemented by an element in a smart property bag,
            provides a hint to diagnostic routines, particularly with respect to generating output.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.ISPBTreeNode.IsLeaf">
            <summary>
            True if this entry in a SmartPropertyBag is a leaf node.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry">
            <summary>
            A structure that is used in the creation of a hierarchical dictionary. Such
            a dictionary structure can contain smart property bags and other dictionaries
            as leaf nodes, as well as having IDictionaries implementing the tree-like
            structure of the root dictionary. This is used so that a node in a SmartPropertyBag
            can have an atomic meaning in a real-world sense (such as a temperature controller
            on a piece of equipment, but still be implemented as an IDictionary or even a
            SmartPropertyBag.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates a HierarchicalDictionaryEntry.
            </summary>
            <param name="key">The key by which the object is known in the dictionary.</param>
            <param name="val">The object value of the entry in the dictionary.</param>
            <param name="isLeaf">True if this is a semantic leaf-node.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.Key">
            <summary>
            The key by which the object is known in the dictionary.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.Value">
            <summary>
            The object value of the entry in the dictionary.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.IsLeaf">
            <summary>
            True if this is a semantic leaf-node.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.HierarchicalDictionaryEntry.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SmartPropertyBag">
            <summary>
            NOTE: This is an older class whose utility may have been subsumed into other,
            newer .NET classes such as tuples and the mechanisms for lambda expressions.
            However, it is used in various places in the library, so it is retained.
            <para/>
            A SmartPropertyBag (SPB) is at its basic level, a collection of name/value pairs.
            The power of a smart property bag lies in the fact that entries in the bag
            can be any of a number of specialized types - 
            <para/><b>Simple data (Value) : </b>Any primitive that is convertible to a double, string or boolean.
            <para/><b>Expression : </b>An expression is a string such as "X + Y" that, when
            queried (assuming that X and Y are entries in the bag) is evaluated and returns 
            the result of the evaluation.
            <para/><b>Alias : </b>A name value pair that points to an entry in another SPB.
            <para/><b>Delegate : </b>A delegate to a method that returns a double. When this entry 
            is requested, the delegate is called and the resulting value is returned.
            <para/><b>SPB : </b>An entry in a SPB may be another SPB, which effectively
            becomes a child of this SPB. Thus, a SPB representing a truck may contain several
            other SPBs representing each load placed on that truck, and thereafter, the key
            "TruckA.LoadB.Customer" will retrieve, for example, a string containing the name or
            ID of the customer for whom load B is destined.<p></p>
            <para/><b>ISnapShottable : </b>Any arbitrary object can be stored in a SPB if it
            implements the ISnapshottable interface. The SPB enables storage of booleans, doubles,
            and strings through the use of internal classes SPBBooleanWrapper, SPBDoubleValueWrapper,
            and  SPBStringWrapper, respectively - each of which implements ISnapshottable.
            <hr></hr>
            A SmartPropertyBag can also be write-locked, allowing it temporarily or permanently
            to be read but not written.<p></p>
            A SmartPropertyBag also maintains a memento, an object that records the SPB's internal
            state and can restore that state at any time. This is useful for a model element
            that may need to be "rolled back" to a prior state. This memento is only recalculated
            when it is requested, and only the portions that have changed are re-recorded into the
            memento.<p></p>
            A SmartPropertyBag is useful when an application is required to support significant
            configurability at run time. An example might be a modeling tool that incorporates the
            concept of a vessel for chemical manufacturing, but does not know at the time of app
            design, all of the characteristics that will be of interest in that vessel, and all
            of the attachments that will be made available on that vessel at a later time or by
            the designer using the application.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.#ctor">
            <summary>
            Creates a SmartPropertyBag.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SmartPropertyBag.IHasValue">
            <summary>
            Any item added to a SPB must implement this interface.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.IHasValue.GetValue">
            <summary>
            Retrieves the underlying value object contained in this entry.
            </summary>
            <returns>The underlying value object contained in this entry.</returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.MementoChangeEvent">
            <summary>
            Fired whenever the memento maintained by this SPB has changed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SmartPropertyBag.SPBDoubleDelegate">
            <summary>
            Delegate that is implemented by a delegate that is being added to the SPB, returning a double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.IsWritable">
            <summary>
            Indicates if write operations on this equipment are permitted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.IsLeaf">
            <summary>
            Indicates if this SPB is a leaf (whether it contains entries). Fulfills
            obligation incurred by implementing TreeNode.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.op_Explicit(Highpoint.Sage.SimCore.SmartPropertyBag)~Highpoint.Sage.SimCore.WriteLock">
            <summary>
            Allows the SPB to be treated as a writelock, to determine if it is write-protected.
            </summary>
            <param name="spb">The SPB whose writability is being queried.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.Contains(System.Object)">
            <summary>
            Determines whether this smart property bag contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if this smart property bag contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBExpressionWrapper.SPBExpressionWrapperMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBExpressionWrapper.SPBExpressionWrapperMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.SPBAlias.#ctor">
            <summary>
            A default constructor, to be used for creating an empty object prior to reconstitution from a serializer.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.SPBAlias.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Serializes this object to the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext into which this object is to be stored.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.SPBAlias.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Deserializes this object from the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext from which this object is to be reconstituted.</param>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBAlias.SPBAliasMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBAlias.SPBAliasMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBDoubleDelegateWrapper.SPBDoubleDelegateWrapperMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBDoubleDelegateWrapper.SPBDoubleDelegateWrapperMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBValueHolder.SPBValueHolderMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBValueHolder.SPBValueHolderMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBStringHolder.SPBStringHolderMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBStringHolder.SPBStringHolderMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SPBBooleanHolder.SPBBooleanHolderMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SPBBooleanHolder.SPBBooleanHolderMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.GetEnumerator">
            <summary>
            Retrieves an enumerator that cycles through all of the entries in this SPB.
            If the entry is not a leaf node, then it can have its enumerator invoked,
            allowing that entry's child list to be walked, and so forth.
            <p/>
            <code>
            private void DumpEnumerable( IEnumerable enumerable, int depth ) {
            	foreach ( HierarchicalDictionaryEntry hde in enumerable ) {
            		for ( int i = 0 ; i &lt; depth ; i++ ) Trace.Write("\t");
            		Trace.Write(hde.Key.ToString() + ", ");
            		Trace.Write(hde.Value.GetType() + ", ");
            		if ( hde.IsLeaf ) {
            			Trace.Write(hde.Value.ToString());
            			if ( hde.Value is double ) {
            	 			Trace.WriteLine(" &lt;NOTE: this is a double.&gt;"); 
            			} else {
            				Trace.WriteLine("");
            			}
            		} else {
            			Trace.WriteLine("");
            			DumpEnumerable((IEnumerable)hde.Value,depth+1);
            		}
            	}
            </code>
            </summary>
            <returns>An enumerator that cycles through all of the entries in this SPB.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddExpression(System.String,System.String,System.String[])">
            <summary>
            Adds an expression to this SPB. 
            </summary>
            <param name="key">The key by which this expression will be known. (e.g. "PackagingRate")</param>
            <param name="expression">The expression. (e.g. "InFlowRate*SelectedPackageSize")</param>
            <param name="argNames">The names of the arguments in the expression (e.g. new string[]{"InFlowRate","SelectedPackageSize"}</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddAlias(System.String,Highpoint.Sage.SimCore.SmartPropertyBag,System.String)">
            <summary>
            Adds an alias to this SPB. An alias points to an entry in another SPB. The other SPB
            need not be a child of this SPB.
            </summary>
            <param name="key">The key in this SPB by which this alias will be known.</param>
            <param name="otherBag">The SPB to which this alias points.</param>
            <param name="otherKey">The key in the otherBag that holds the aliased object.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddChildSPB(System.String,Highpoint.Sage.SimCore.SmartPropertyBag)">
            <summary>
            Adds a child SPB to this SPB. A child SPB is one that is owned by this bag,
            and whose entries can be treated as sub-entries of this bag. For example, a
            if a bag, representing a pallet, were to contain another SPB under the key
            of "Crates", and that SPB contained one SPB for each crate (one of which was
            keyed as "123-45", and that SPB had a string keyed as "SKU" and another keyed
            as "Batch", then the following code would retrieve the SKU directly:
            <code>string theSKU = (string)myPallet["Crates.123-45.SKU"];</code>
            </summary>
            <param name="key">The key by which the child SPB is going to be known.</param>
            <param name="spb">The child SPB.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddValue(System.String,System.Object)">
            <summary>
            Adds a value (convertible to double) to the SPB under a specified key.
            </summary>
            <param name="key">The key by which the value will known and/or retrieved.</param>
            <param name="valConvertibleToDouble">An object that is convertible to a double.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddString(System.String,System.String)">
            <summary>
            Adds a string value to the SPB under a specified key.
            </summary>
            <param name="key">The key by which the string value will known and/or retrieved.</param>
            <param name="val">The string that will be stored in the SPB.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddBoolean(System.String,System.Boolean)">
            <summary>
            Adds a boolean value to the SPB under a specified key.
            </summary>
            <param name="key">The key by which the boolean value will known and/or retrieved.</param>
            <param name="val">The boolean that will be stored in the SPB.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddSnapshottable(System.String,Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Any object can be stored in a SPB if it implements ISupportsMementos. This API
            performs such storage.
            </summary>
            <param name="key">The key under which the ISupportsMementos implementer is to 
            be known.</param>
            <param name="iss">the object that implements ISupportsMementos.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.AddDelegate(System.String,Highpoint.Sage.SimCore.SmartPropertyBag.SPBDoubleDelegate)">
            <summary>
            Adds a delegate to the SPB under a specified key. When this entry is retrieved
            from the SPB, it will first be located by key, and then be evaluated by calling
            it, and the value returned from the delegate invocation will be returned to the
            entity calling into the SPB. Example:
            <code>
            SPBDoubleDelegate spbdd = new SPBDoubleDelegate(this.GetAValue);
            mySPB.AddDelegate("someValue",spbdd); // Add the delegate to the SPB.
            double theValue = mySPB["someValue"]; // calls into 'this.GetAValue()' and returns the answer.
            </code>
            </summary>
            <param name="key">The key by which the delegate's value will known and/or retrieved.</param>
            <param name="val">The delegate that will be stored in the SPB.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.Remove(System.String)">
            <summary>
            Removes an object from this SPB.
            </summary>
            <param name="key">The key of the object that is being removed.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.Clear">
            <summary>
            Removes all objects from the SPB.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.Item(System.String)">
            <summary>
            Retrieves an entry from this SPB. Compound keys may be specified if appropriate.
            For example, if a bag, representing a pallet, were to contain another SPB under
            the key of "Crates", and that SPB contained one SPB for each crate (one of which
            was keyed as "123-45", and that SPB had a string keyed as "SKU" and another keyed
            as "Batch", then the following code would retrieve the SKU directly:
            <code>string theSKU = (string)myPallet["Crates.123-45.SKU"];</code>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.GetContentsOfKey(System.String)">
            <summary>
            Retrieves the contents of a key known to exist in THIS SPB.
            Throws a SmartPropertyBagContentsException if the key does
            not exist in this bag.
            </summary>
            <param name="key">The key under which the lookup is to be
            performed. Compound keys are not permitted, here.</param>
            <returns>The contents of the key.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.ExistsKey(System.String)">
            <summary>
            Returns true if this dictionary (or any dictionary below it)
            contains a value stored under this key.
            </summary>
            <param name="key">The key under which the lookup is to be
            performed. Compound keys are not permitted, here.</param>
            <returns>The contents of the key.</returns>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.Memento">
            <summary>
            Retrieves the memento of this SPB. Includes all state from this bag,
            other bags' aliased entries, and child bags, as well as the mementos
            from any entry that implements ISupportsMementos. Optimizations are
            applied such that a minimum of computation is required to perform the
            extraction.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.HasChanged">
            <summary>
            True if this SPB has changed in any way since the last time it was
            snapshotted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.ReportsOwnChanges">
            <summary>
            True if this SPB is capable of reporting its own changes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.Equals(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Returns true if the two SPBs are semantically equal. (In other words,
            if both have the same entries, and each evaluates as being '.Equal()'
            to its opposite, then the two bags are equal.)
            </summary>
            <param name="otherGuy">The other SPB. If it is an ISupportsMementos that
            is not also a SPB, it will return false.</param>
            <returns>True if the two SPBs are semantically equal.</returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.SmartPropertyBag.SmartPropertyBagMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SmartPropertyBag.SmartPropertyBagMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBag.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SmartPropertyBagException">
            <summary>
            A general exception that is fired by a SPB for reasons specific to the SPB.
            The message will provide an explanation of the error.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBagException.#ctor(System.String)">
            <summary>
            Creates a SmartPropertyBagException with a given message.
            </summary>
            <param name="msg">The message that will be associate with this SmartPropertyBagException</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SmartPropertyBagContentsException">
            <summary>
            An exception that is fired when the SPB is asked to add/remove/retrieve a
            key that is inappropriate for some reason. 	The message will provide an
            explanation of the error.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SmartPropertyBagContentsException.#ctor(System.String)">
            <summary>
            Creates a SmartPropertyBagContentsException with a given message.
            </summary>
            <param name="msg">The message that will be associate with this SmartPropertyBagContentsException</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.SPBInitializer">
            <summary>
            An SPBInitializer is an object that can be used to automatically initialize a
            SmartPropertyBag. For example, if the need was to add some user-defined fields to each piece
            of equipment (modeled as a SPB) as it was created, the following code would be
            useful:
            <code>
            // Presume that m_initializers was a hashtable of initializers...
            public void InitializeEquipment(SOMEquipment equipment){
                foreach (SPBInitializer initializer in m_initializers.Values){
                    initializer.Initialize(equipment);
                }
            }
            </code>
            This class is typically derived-from, with serial number incrementation, driver
            or operator name assignment, etc, provided in a custom method.
            <p></p>
            <b>Note : </b>The initializer, once created, is configured to initialize only
            one way, e.g. creating an entry called 'Mixer' that is set to "Off".
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.Key">
            <summary>
            The key to be initialized when this initializer runs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.BoolValue">
            <summary>
            The boolean value to be placed under the specified key in the SPB when
            this initializer runs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.StringValue">
            <summary>
            The string value to be placed under the specified key in the SPB when
            this initializer runs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.DoubleValue">
            <summary>
            The double value to be placed under the specified key in the SPB when
            this initializer runs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.ForceCreation">
            <summary>
            If this is true, and a SPB is being initialized, the field will be created
            if it does not already exist.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SPBInitializer.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            Creates a SPBInitializer with the specified key and value, with a
            flag indicating to force the creation of the field if necessary.
            </summary>
            <param name="key">The key that, in a SPB, will be initialized
            by this initializer.</param>
            <param name="val">The double value that will be initialized into
            the specified field.</param>
            <param name="forceCreation">If this is true, the field will be
            created in the SPB if it does not already exist.</param>
        </member>
        <member name="P:Highpoint.Sage.SimCore.SPBInitializer.InitializationType">
            <summary>
            Returns the type of this initializer, whether _bool, _double, or _string.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SPBInitializer.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a SPBInitializer with the specified key and value, with a
            flag indicating to force the creation of the field if necessary.
            </summary>
            <param name="key">The key that, in a SPB, will be initialized by
            this initializer.</param>
            <param name="val">The double value that will be initialized into the
            specified field.</param>
            <param name="forceCreation">If this is true, the field will be created
            in the SPB if it does not already exist.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SPBInitializer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a SPBInitializer with the specified key and value, with a
            flag indicating to force the creation of the field if necessary.
            </summary>
            <param name="key">The key that, in a SPB, will be initialized by 
            this initializer.</param>
            <param name="val">The string value that will be initialized into 
            the specified field.</param>
            <param name="forceCreation">If this is true, the field will be 
            created in the SPB if it does not already exist.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SPBInitializer.Initialize(Highpoint.Sage.SimCore.SmartPropertyBag)">
            <summary>
            Initializes a SPB with the type, name and contents of the field
            depicted in this SmartPropertyBagInitializer.
            </summary>
            <param name="spb">The SmartPropertyBag to be initialized.</param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.SPBInitializer.#ctor">
            <summary>
            Constructor for use in initialization.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.BaseModelObject.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.BaseModelObject.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.BaseModelObject.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.SimCore.BaseModelObject.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.SimCore.BaseModelObject.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.CompileFailedException">
            <summary>
            An exception that encapsulates the errors encountered in trying to compile an expression.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.CompileFailedException.m_cec">
            <summary>
            A collection of compiler error objects encountered in trying to compile an expression.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.SimCore.CompileFailedException.Errors">
            <summary>
            Property that gets the collection of compiler error objects encountered in trying to compile an expression.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.CompileFailedException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Constructor for an exception indicating that an attempt to compile an expression, failed.
            </summary>
            <param name="cec"></param>
        </member>
        <member name="M:Highpoint.Sage.SimCore.CompileFailedException.ToString">
            <summary>
            Produces a human-readable compilation of the reasons why a compilation attempt failed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.Evaluator">
            <summary>
            A delegate returned by the evaluator factory, which will evaluate a precompiled expression with the
            the supplied argument values. Important to remember that the arguments passed in to an evaluator are
            treated as objects, so if it is expecting a double, and you pass in '3', it gets converted to an
            instance of System.Int32, and cannot be converted (implicitly) to a double.
            <para/>
            This means that if it's expecting a double, pass in 3.0, not 3, or you'll get an invalid cast exception. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.EvaluatorFactory">
            <summary>
            The Evaluator Factory creates objects that can evaluate expressions provided by the caller.
            First an expression is provided and compiled into an object that can evaluate it - that
            object is passed back as an Evaluator delegate. Then later the Evaluator delegate is called
            with the values appropriate to the variables that are a part of the pre-provided expression.
            The result of this evaluation is the (double) value that is computed.
            <br></br>
            The body of the evaluator can be any compilable statement. If the evaluator is to return a
            value, the body must assign that value to the (predefined) variable "Result".
            <br></br>
            The ArgNames array is an array of strings that contain the names of the arguments to the
            evaluation of the expression. The defaults of those argNames is:
            <p></p>
            {"PA","PB","PC","PD","PE","PF","PG","PH","PJ","PK","RA","RB","RC","RD","RE","RF","RG","RH","RJ","RK"};
            <p></p>
            An example of using this class might be as follows:
            <code>
            Evaluator eval = EvaluatorFactory.CreateEvaluator("Result = RA+(RB/RC);",new string[]{"RA","RB","RC"});
            </code>
            ...and this eval could later be called with:
            <code>
            Trace.WriteLine(eval(3.0,4.0,5.0));
            </code>
            which would result in 3.8 being written to the Trace.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.EvaluatorFactory._calcCtr">
            <summary>
            A counter of Evaluators. Thus, the 4th Evaluator will be called, MyEvaluator4.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.SimCore.EvaluatorFactory.s_defaultArgNames">
            <summary>
            The default argument names placed into the expression call.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EvaluatorFactory.CreateEvaluator(System.String,System.String[])">
            <summary>
            Creates an Evaluator with the specified body and argument names.
            <para/>
            </summary>
            <param name="body">The body of the statement that will be evaluated.</param>
            <param name="argNames">The names of the arguments provided to that evaluator.
            Note that it must include the names of all non-intrinsic variables in the statement.</param>
            <returns>A delegate behind which is the evaluator generated from compiling the provided statement.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EvaluatorFactory.CreateEvaluator(System.String)">
            <summary>
            Creates an Evaluator with the specified body. Argument names default to
            <code>new string[]{"PA","PB","PC","PD","PE","PF","PG","PH","PJ","PK",
            "RA","RB","RC","RD","RE","RF","RG","RH","RJ","RK"};</code>
            </summary>
            <param name="body">The body of the statement that will be evaluated.</param>
            <returns>A delegate behind which is the evaluator generated from compiling the provided statement.</returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EvaluatorFactory.CreateEvaluator(System.String,System.String,System.String[])">
            <summary>
            Creates an Evaluator with the specified body, return expression, and argument names.
            </summary>
            <param name="body">The statement body of the evaluator.</param>
            <param name="retExpr">The return expression of the evaluator.</param>
            <param name="argNames">The names of the arguments fed into the evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.SimCore.EvaluatorFactory.PrepareBody(System.String)">
            <summary>
            called to decorate the body statement prior to an attempted compilation.
            </summary>
            <param name="body">The user-supplied statement body.</param>
            <returns>The "Ready-to-compile" version of the body.</returns>
        </member>
        <member name="T:Highpoint.Sage.SimCore.CloneHandler">
            <summary>
            Implemented in a method that is to be called after a cloning operation occurs.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.ICloneable">
            <summary>
            ICloneable is implemented by an object that is capable of being cloned.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.ICloneable.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="E:Highpoint.Sage.SimCore.ICloneable.CloneEvent">
            <summary>
            CloneHandler is an event that is fired after a cloning operation is completed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IVisitor">
            <summary>
            Implemented by an object that can visit.
            <p></p>
            The purpose of the Visitor Pattern is to encapsulate
            an operation that you want to perform on the elements
            of a data structure. In this way, you can change the
            operation being performed on a structure without the
            need of changing the classes of the elements that you
            are operating on. Using a Visitor pattern allows you to
            decouple the classes for the data structure and the
            algorithms used upon them.
            <p></p>
            Each node in the data structure "accepts" a Visitor, which
            sends a message to the Visitor which includes the node's
            class. The visitor will then execute its algorithm for that
            element. This process is known as "Double Dispatching." The
            node makes a call to the Visitor, passing itself in, and the
            Visitor executes its algorithm on the node. In Double Dispatching,
            the call made depends upon the type of the Visitor and of the Host
            (data structure node), not just of one component.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IVisitor.Visit(System.Object)">
            <summary>
            Called by the object being visited, asking the visitor to do its
            thing. In derived classes, new methods that provide more specific
            classes of visitee result in the visitee calling implementation-
            specific methods in the visitor.
            </summary>
            <param name="visitee">The object being visited.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IVisitable">
            <summary>
            An interface that is implemented by any object that can be visited. It
            typically does very little more than call iv.Visit(this);
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IVisitable.Accept(Highpoint.Sage.SimCore.IVisitor)">
            <summary>
            Requests that the IVisitable allow the visitor to visit.
            </summary>
            <param name="iv">The visitor.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IVisitor`1">
            <summary>
            Implemented by an object that can visit.
            <p></p>
            The purpose of the Visitor Pattern is to encapsulate
            an operation that you want to perform on the elements
            of a data structure. In this way, you can change the
            operation being performed on a structure without the
            need of changing the classes of the elements that you
            are operating on. Using a Visitor pattern allows you to
            decouple the classes for the data structure and the
            algorithms used upon them.
            <p></p>
            Each node in the data structure "accepts" a Visitor, which
            sends a message to the Visitor which includes the node's
            class. The visitor will then execute its algorithm for that
            element. This process is known as "Double Dispatching." The
            node makes a call to the Visitor, passing itself in, and the
            Visitor executes its algorithm on the node. In Double Dispatching,
            the call made depends upon the type of the Visitor and of the Host
            (data structure node), not just of one component.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IVisitor`1.Visit(`0)">
            <summary>
            Called by the object being visited, asking the visitor to do its
            thing. In derived classes, new methods that provide more specific
            classes of visitee result in the visitee calling implementation-
            specific methods in the visitor.
            </summary>
            <param name="visitee">The object being visited.</param>
        </member>
        <member name="T:Highpoint.Sage.SimCore.IVisitable`1">
            <summary>
            An interface that is implemented by any object that can be visited. It
            typically does very little more than call iv.Visit(this);
            </summary>
        </member>
        <member name="M:Highpoint.Sage.SimCore.IVisitable`1.Accept(Highpoint.Sage.SimCore.IVisitor{`0})">
            <summary>
            Requests that the IVisitable allow the visitor to visit.
            </summary>
            <param name="iv">The visitor.</param>
        </member>
        <member name="T:Highpoint.Sage.Dependencies.GraphSequencer">
            <summary>
            Analyzes a collection of vertices that implement IDependencyVertex, producing, if possible, a sequence
            in which to process the vertices such that no vertex is processed before all vertices on which it depends have been processed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:GraphSequencer"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.AddVertices(System.Collections.ICollection)">
            <summary>
            Call this with a collection of IDependencyVertex objects to add them to the
            sequencer for consideration next time there is a request for a service 
            sequence list.
            </summary>
            <param name="vertices">A collection of IDependencyVertex objects</param>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.AddVertex(Highpoint.Sage.Dependencies.IDependencyVertex)">
            <summary>
            Call this with an IDependencyVertex object to add it to the sequencer
            for consideration next time there is a request for a service sequence list.
            </summary>
            <param name="vertex">An IDependencyVertex object</param>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.GetServiceSequenceList">
            <summary>
            Returns an ordered list of vertices in which the order is the order in which
            the vertices should be serviced.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.RecalculateServiceSequence">
            <summary>
            Recalculates the service sequence.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphSequencer.GetVertexComparer">
            <summary>
            Gets the vertex comparer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Dependencies.GraphCycleException">
            <summary>
            An exception that is thrown if there is a cycle in a dependency graph that has been analyzed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphCycleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Highpoint.Sage.Dependencies.GraphCycleException.Members">
            <summary>
            Gets the members of the cycle.
            </summary>
            <value>The members of the cycle.</value>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphCycleException.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphCycleException.#ctor(System.String,System.Collections.IList)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
            <param name="members">The members of the cycle.</param>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.GraphCycleException.#ctor(System.String,System.Exception,System.Collections.IList)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
            <param name="members">The members of the cycle.</param>
        </member>
        <member name="T:Highpoint.Sage.Dependencies.IDependencyVertex">
            <summary>
            This interface is implemented by the class whose objects are to
            act as vertices in the Directed Acyclic Graph.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Dependencies.IDependencyVertex.SortCriteria">
            <summary>
            An IComparable that determines how otherwise equal vertices
            are to be sorted. Note that 'otherwise equal' means that the 
            vertices are equal after a dependency analysis is done,
            and that both are independent of each other in the graph.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Dependencies.IDependencyVertex.PredecessorList">
            <summary>
            This is a list of other vertices, that implement 
            IDependencyVertex as well, upon which this object depends. 
            These are all vertices that may need to be notified 
            before this implementer can generate a stable output. In other
            words, they are vertices that provide input to this vertex.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Dependencies.ISequencer">
            <summary>
            Implemented by an object that perform a sequence determination
            across a collection of vertices that implement IDependencyVertex.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.ISequencer.AddVertices(System.Collections.ICollection)">
            <summary>
            Call this with a collection of IDependencyVertex objects to 
            add them to the sequencer for consideration next time there 
            is a request for a service sequence list.
            </summary>
            <param name="vertices">A collection of IDependencyVertex 
            objects</param>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.ISequencer.AddVertex(Highpoint.Sage.Dependencies.IDependencyVertex)">
            <summary>
            Call this with an IDependencyVertex object to add it to the 
            sequencer for consideration next time there is a request for
            a service sequence list.
            </summary>
            <param name="vertex">An IDependencyVertex object</param>
        </member>
        <member name="M:Highpoint.Sage.Dependencies.ISequencer.GetServiceSequenceList">
            <summary>
            Returns an ordered list of vertices in which the order is the 
            order in which the vertices should be serviced.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.TaskProcessorAddedEvent">
            <summary>
            Fired when a TaskProcessor is added to this model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.TaskProcessorRemovedEvent">
            <summary>
            Fired when a TaskProcessor is removed from this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.AddTaskProcessor(Highpoint.Sage.Graphs.Tasks.TaskProcessor)">
            <summary>
            Adds a task processor to this model. A Task Processor is an entity that knows when to
            start executing a given task graph. This method must be called before the model starts.
            </summary>
            <param name="taskProcessor">The task processor being added to this model.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.RemoveTaskProcessor(Highpoint.Sage.Graphs.Tasks.TaskProcessor)">
            <summary>
            Removes a task processor from this model. This method must be called before the model starts.
            </summary>
            <param name="taskProcessor">The task processor being removed from this model.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.TaskProcessors">
            <summary>
            The collection of task processors being managed by this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.GetTaskProcessor(System.Guid)">
            <summary>
            Locates a task processor by its Guid.
            </summary>
            <param name="guid">The Guid of the task processor to be located.</param>
            <returns>The task processor, if found, otherwise null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.ITaskManagementService.GetTasks(System.Boolean)">
            <summary>
            Returns the tasks known to this model.
            </summary>
            <param name="masterTasksOnly">If this is true, then only the root (master) tasks of all of the
            known task graphs are returned. Otherwise, all tasks under those root tasks are included as well.</param>
            <returns>A collection of the requested tasks.</returns>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.TaskManagementService.TaskProcessorAddedEvent">
            <summary>
            Fired when a TaskProcessor is added to this model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.TaskManagementService.TaskProcessorRemovedEvent">
            <summary>
            Fired when a TaskProcessor is removed from this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.AddTaskProcessor(Highpoint.Sage.Graphs.Tasks.TaskProcessor)">
            <summary>
            Adds a task processor to this model. A Task Processor is an entity that knows when to
            start executing a given task graph. This method must be called before the model starts.
            </summary>
            <param name="taskProcessor">The task processor being added to this model.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.RemoveTaskProcessor(Highpoint.Sage.Graphs.Tasks.TaskProcessor)">
            <summary>
            Removes a task processor from this model. This method must be called before the model starts.
            </summary>
            <param name="taskProcessor">The task processor being removed from this model.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskManagementService.TaskProcessors">
            <summary>
            The collection of task processors being managed by this model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.GetTaskProcessor(System.Guid)">
            <summary>
            Locates a task processor by its Guid.
            </summary>
            <param name="guid">The Guid of the task processor to be located.</param>
            <returns>The task processor, if found, otherwise null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.GetTasks(System.Boolean)">
            <summary>
            Returns the tasks known to this model.
            </summary>
            <param name="masterTasksOnly">If this is true, then only the root (master) tasks of all of the
            known task graphs are returned. Otherwise, all tasks under those root tasks are included as well.</param>
            <returns>A collection of the requested tasks.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.ClearOrphanedErrors">
            <summary>
            Clears any errors whose target (the place where the error occurred) is a task that has been 
            removed from the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskManagementService.GetPostMortems">
            <summary>
            Returns the post mortem data on all known task graph executions. This data indicates the vertices
            and edges that fired and those that did not fire. It is typically fed into the Diagnostics class'
            DumpPostMortemData(...) API.
            </summary>
            <returns>A Hashtable of postmortem data.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Tasks.ITaskFactory">
            <summary>
            Implemented by an object that can create Task objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.ITaskFactory.CreateTask(Highpoint.Sage.SimCore.IModel,System.Collections.Hashtable)">
            <summary>
            Creates a task object that is a part of the provided model.
            </summary>
            <param name="model">The model in which this task will run.</param>
            <param name="creationContext">The creation context (collection of serialization-related data) that this serialization stream uses.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Tasks.Task">
            <summary>
            A Task is an edge that incorporates durational aspects, supports the concept of
            children (child tasks are tasks that "belong to" the parent, and usually provide
            the detailed execution sequence &amp; aspects of the conceptual parent task. Tasks
            also support the concept of validity, where a task is valid if (a) it's own state
            is valid, (b) all of its children are valid, and (c) all of its predecessor
            tasks are valid.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Tasks.Task.EecsKey">
            <summary>
            The ke under which this task's Edge Execution Completion Signaler is stored, in the Graph Context.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskStartingEvent">
            <summary>
            Fired when the task is starting, as a result of the EdgeStartingEvent, which is fired when the preVertex has been fully satisfied.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskFinishingEvent">
            <summary>
            Fired when the task is finishing, as a result of the EdgeCompletionEvent, which is fired when the postVertex has been fully satisfied.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskExecutionStartingEvent">
            <summary>
            Fired immediately prior to calling the ExecutionDelegate (where application code is run.)
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskExecutionFinishingEvent">
            <summary>
            Fired immediately following completion of the ExecutionDelegate (where application code was run.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.#ctor(Highpoint.Sage.SimCore.IModel,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Task"/> class. Creates an arbitrary Guid for the new task.
            </summary>
            <param name="model">The model in which the task runs.</param>
            <param name="name">The name of the task.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Task"/> class.
            </summary>
            <param name="model">The model in which the task runs.</param>
            <param name="name">The name of the task.</param>
            <param name="guid">The GUID of the task.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model in which the task runs.</param>
            <param name="name">The name of the task.</param>
            <param name="description">The description of the task.</param>
            <param name="guid">The GUID of the task.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.KeepTimingData">
            <summary>
            Gets or sets a value indicating whether we want to keep timing data as this task executes.
            </summary>
            <value><c>true</c> if [keep timing data]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetNominalDuration">
            <summary>
            Nominal duration is the average amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The nominal duration for this task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetOptimisticDuration">
            <summary>
            Optimistic duration is the minimum amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The optimistic duration for this task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetPessimisticDuration">
            <summary>
            Pessimistic duration is the maximum amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The pessimistic duration for this task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.SetDurationData(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Sets the duration data to be used in PERT &amp; CPM analysis.
            </summary>
            <param name="optimistic">The optimistic (shortest) duration.</param>
            <param name="nominal">The nominal (average) duration.</param>
            <param name="pessimistic">The pessimistic (longest) duration.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.ResetDurationData">
            <summary>
            Resets the duration data to TimeSpan.MaxValue for the minimum, MinValue for the maximum, and zero for aggregate.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.ResetDurationStats">
            <summary>
            Resets the duration statistics. Since a task can run many times and track its min, max and average, this resets the min, 
            max, aggregate and count-of executions.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.RecursivelyResetAllDurationStats(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Recursivelies the reset all duration statistics for this task and all tasks below this task.
            </summary>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetStartTime(System.Collections.IDictionary)">
            <summary>
            Gets the time at which this task began in the specified GraphContext.
            </summary>
            <param name="graphContext">The context in which the given start time is desired.</param>
            <returns>The time at which this task began in the specified GraphContext.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.RecordStartTime(System.Collections.IDictionary,System.DateTime,System.Boolean)">
            <summary>
            Records the time that this task started execution.
            </summary>
            <param name="graphContext">The graphContext in which the task's execution took place.</param>
            <param name="startTime">The time that the task began.</param>
            <param name="clearFinishTime">True if caller wants the finish time to be cleared out (as it would be at the start of a new run.)</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetFinishTime(System.Collections.IDictionary)">
            <summary>
            Gets the time at which this task completed in the specified GraphContext.
            </summary>
            <param name="graphContext">The context in which the given finish time is desired.</param>
            <returns>The time at which this task completed in the specified GraphContext.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.RecordFinishTime(System.Collections.IDictionary,System.DateTime)">
            <summary>
            Records the time that this task completed execution.
            </summary>
            <param name="graphContext">The graphContext in which the task's execution took place.</param>
            <param name="finishTime">The time that the task finished.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetRecordedDuration(System.Collections.IDictionary)">
            <summary>
            Returns the duration of this task in the specified GraphContext.
            </summary>
            <param name="graphContext">The context in which the duration is desired.</param>
            <returns>The duration of this task in the specified GraphContext.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance. This method calls _PopulateClone.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetRootTask">
            <summary>
            Gets the root task of the graph to which this edge belongs.
            </summary>
            <returns>The root task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.OnEdgeExecution(System.Collections.IDictionary,Highpoint.Sage.Graphs.Edge,Highpoint.Sage.Graphs.EdgeExecutionCompletionSignaler)">
            <summary>
            Called when edge execution is to begin. This is the method that subclasses of this class implement to hold
            application code.
            </summary>
            <param name="graphContext">The graph context.</param>
            <param name="theEdge">The edge - this. This allows multiple edges and edge types to call library code.</param>
            <param name="eecs">The EdgeExecutionCompletionSignaler.</param>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskBecameValidEvent">
            <summary>
            This event is fired when the task becomes valid.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Tasks.Task.TaskBecameInvalidEvent">
            <summary>
            This event is fired when the task becomes invalid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.RemovePredecessor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Either removes a <see cref="T:Ligature"/> between the provided edge's postVertex and this one's PreVertex,
            removing the provided edge as a predecessor to this one. If the provided edge is a <see cref="T:Ligature"/>, then
            the ligature itself is disconnected from this edge. This API also interacts with a
            <see cref="T:Highpoint.Sage.Graphs.Validity.ValidationService"/> to enable it to correctly
            manage graph validity state.
            </summary>
            <param name="preEdge">The pre edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.DoTask(System.Collections.IDictionary)">
            <summary>
            Performs the processing that is embodied in this task object. This method is called at the simulation
            time that the task is to begin, and the call returns once the processing has completed.<para></para>
            <u>It is imperative that a developer, overriding this method, ensure that they call <see cref="T:Highpoint.Sage.Graphs.Tasks.Task#SignalTaskCompletion"/></u>
            </summary>
            <param name="graphContext">The graph context in which the execution is to proceed.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.SignalTaskCompletion(System.Collections.IDictionary)">
            <summary>
            Signals to the engine that the task has completed all of its execution, and that execution of the next task may be notified that this one has completed.
            </summary>
            <param name="graphContext">The graph context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetChildTasks(System.Boolean)">
            <summary>
            Gets the child tasks of this task.
            </summary>
            <param name="shallow">if set to <c>true</c>, only gets children. Otherwise, gets all descendants.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.ValidityState">
            <summary>
            Gets a value indicating whether this task is valid overall - meaning that it, all of its children and all of its predecessors are themselves valid.
            </summary>
            <value><c>true</c> if this task is valid overall; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.SelfValidState">
            <summary>
            Gets or sets a value indicating whether this task's state is appropriate to call this task, irrespective of predecessors and children, valid.
            </summary>
            <value><c>true</c> if this task's state is appropriate to call this task valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.SelfState">
            <summary>
            Gets or sets the state (from a perspective of validity) of the implementer.
            </summary>
            <value>The state of the self.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.GetChildren">
            <summary>
            Gets the children (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.AllUpstreamValid">
            <summary>
            Gets a value indicating whether [all upstream valid].
            </summary>
            <value><c>true</c> if [all upstream valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.AllChildrenValid">
            <summary>
            Gets a value indicating whether [all children valid].
            </summary>
            <value><c>true</c> if [all children valid]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value>The Guid</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.Task.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.#ctor">
            <summary>
            Default constructor for serialization only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.Task.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskError.InnerException">
            <summary>
            An exception that may have been caught in the detection of this error.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskList.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskList.#ctor">
            <summary>
            Default constructor for serialization only.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskList.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskList.Description">
            <summary>
            A description of this TaskList.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Tasks.TaskProcessor">
            <summary>
            TaskProcessor encapsulates a task, and is responsible for scheduling its
            execution. It must be run by an external entity, often at the model's
            start. This external entity must call Activate in order to cause the
            task to be scheduled, and subsequently run - the default Model implementation
            does this automatically in the Running state method.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskProcessor.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskProcessor.MasterTask">
            <summary>
            Gets the master task for this Task Processor - the task that holds the root level of the task graph to be performed.
            </summary>
            <value>The master task.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskProcessor.Description">
            <summary>
            A description of this TaskProcessor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Tasks.TaskProcessor.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Tasks.TaskProcessor.#ctor">
            <summary>
            Default constructor for serialization only.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.ISupportsCpmAnalysis">
            <summary>
            Implemented by an object that can take part in a CPM (non-probabilistic)
            time cycle analysis. Presumption is that the implementer is also capable
            of acting as an edge or vertex in a network.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.ISupportsCpmAnalysis.GetNominalDuration">
            <summary>
            Nominal duration is the average amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The nominal duration for this task.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.CpmAnalyst">
            <summary>
            An object that is capable of examining a network of edges that implement
            ISupportsCPMAnalysis and determining CPM data (earliest and latest firing
            times for each vertex.<p></p>
            The algorithm here is that we start at the beginning, traversing each path, and
            advancing elapsed time by the duration of the edge as we cross each edge. We 
            record the earliest time we reach each vertex - that is the earliest possible
            start for the principal edge if it is a pre-vertex, and the earlies possible
            completion if it is a postVertex. For the second pass, we take the "earliest"
            time that the finish vertex was reached, which is the earliest that the whole
            recipe can be completed. Using that as the overall duration, we traverse back-
            wards, subtracting the duration of each edge and assigning the time of arrival
            at each vertex as the "latest possible" start or finish.
            This works great until you start constraining vertices, with the Vertex
            Synchronizer. In this case, the synchronizer delineates a set of synchronized
            vertices, none of which can fire until all are ready to be fired. So the
            earliest a set of synchronized vertices can fire is the LATEST 'earliest' time
            that any of the member vertices can fire. So, we have a SynchronizerData object
            that tracks how many vertices in its member set have been visited, and does not
            allow traversal beyond that set of vertices until all of them have been visited
            and their 'earliest' settings set to the latest time that any of them were
            visited. Then, 'elapsedTime' is set to that 'latest' time, and all member vertices
            are used, in turn, as roots from which to probe forward.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Start">
            <summary>
            The start vertex for the section of the graph that is to be analyzed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Finish">
            <summary>
            The finish vertex for the section of the graph that is to be analyzed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Edges">
            <summary>
            A hashtable of edge-related data compiled by this analyst. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Vertices">
            <summary>
            A hashtable of vertex-related data compiled by this analyst. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.VertexPegs">
            <summary>
            A hashtable of vertices that this analyst knows to be pegged at certain times. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Synchronizers">
            <summary>
            A hashtable of synchronizer-related data compiled by this analyst. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.#ctor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Creates a CPMAnalyst that analyzes a given edge and all of its children.
            </summary>
            <param name="edge">The edge whose start and finish vertices are to be the subject of this analyst's 
            evaluation.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Reset">
            <summary>
            Resets the analyst so that it can perform its analysis again.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.Analyze">
            <summary>
            Performs the CPM analysis that this object has been configured for.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.ProbeForward(Highpoint.Sage.Graphs.Vertex,System.Int64)">
            <summary>
            Recursively traverses forward from a given vertex, adding the earliest-possible
            arrival time to each vertex as it goes.
            </summary>
            <param name="vertex">the vertex forward from which we will probe.</param>
            <param name="elapsedTime">the current elapsed time.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.ProbeBackward(Highpoint.Sage.Graphs.Vertex,System.Int64)">
            <summary>
            Recursively traverses backward from a given vertex, adding the latest-possible
            arrival time to each vertex as it goes.
            </summary>
            <param name="vertex">The vertex from which the backward probing is to be done.</param>
            <param name="elapsedTime">The time that has elapsed thus far in the backward traversal.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.FixUpSynchedTasksPostVertices">
            <summary>
            This method visits the post vertices of all edges that have synchronizers
            attached to their prevertices, and modifies them to reflect that their latest
            time is always the latest of their prevertex plus the edge's nominal duration.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.GetEarliestStart(Highpoint.Sage.Graphs.Edge)">
            <summary>
            After an analysis has been performed, this accessor method will get the earliest
            start time observed for a specified edge.
            </summary>
            <param name="edge">The edge for which the start time is desired.</param>
            <returns>The earliest start time observed for the specified edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.GetEarliestFinish(Highpoint.Sage.Graphs.Edge)">
            <summary>
            After an analysis has been performed, this accessor method will get the earliest
            finish time observed for a specified edge.
            </summary>
            <param name="edge">The edge for which the finish time is desired.</param>
            <returns>The earliest finish time observed for the specified edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.GetLatestStart(Highpoint.Sage.Graphs.Edge)">
            <summary>
            After an analysis has been performed, this accessor method will get the latest
            start time observed for a specified edge.
            </summary>
            <param name="edge">The edge for which the start time is desired.</param>
            <returns>The latest start time observed for the specified edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.GetLatestFinish(Highpoint.Sage.Graphs.Edge)">
            <summary>
            After an analysis has been performed, this accessor method will get the latest
            finish time observed for a specified edge.
            </summary>
            <param name="edge">The edge for which the finish time is desired.</param>
            <returns>The latest finish time observed for the specified edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.GetAcceptableSlip(Highpoint.Sage.Graphs.Edge)">
            <summary>
            This method returns the number of ticks in the acceptable slip of an edge. This is
            the difference between the earliest and latest permissible start times for the edge's
            preVertex.
            </summary>
            <param name="edge">The edge for which the slip time is desired.</param>
            <returns>The slip time, in ticks, that was recorded for the specified edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.CpmAnalyst.IsCriticalPath(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Returns true if, in the graph or subgraph that was analyzed, this edge was on the
            critical path.
            </summary>
            <param name="edge">The edge to be analyzed.</param>
            <returns>true, if this edge is on the critical path.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException">
            <summary>
            MissingParameterException is thrown when a required parameter is missing. Typically used in a late bound, read-from-name/value pair collection scenario.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.#ctor(System.String,System.Collections.IList)">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class with a specific message and a list of the DAG elements that caused the problem.
            </summary>
            <param name="message">The exception message.</param>
            <param name="problemElements">The problem elements.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:AnalysisFailedException"/> class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Analysis.AnalysisFailedException.ProblemElements">
            <summary>
            Gets the list of problem elements.
            </summary>
            <value>The problem elements.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.PathLength">
            <summary>
            This class provides the analytical capability to discern the shortest 
            path from one vertex to another, or from one edge to another. Its
            methods are static, but since all of its data members are locals, it
            may be considered threadsafe.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.ISupportsPertAnalysis">
            <summary>
            This interface is implemented by any edge in a graph where the edge has
            duration, and therefore can be used as a part of the computations necessary
            to performing a PERT analysis.
            NOTE: WORKS-IN-PROGRESS
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.ISupportsPertAnalysis.GetOptimisticDuration">
            <summary>
            Optimistic duration is the minimum amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The optimistic duration for this task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Analysis.ISupportsPertAnalysis.GetPessimisticDuration">
            <summary>
            Pessimistic duration is the maximum amount of time that executing the specific task has taken across all runs of the model since the last call to ResetDurationData();
            </summary>
            <returns>The pessimistic duration for this task.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Analysis.PertAnalyst">
            <summary>
            This class is able, in its instances, to perform a PERT analysis, including
            determination of critical paths, and their tasks' mean and variances.
            NOTE: WORKS-IN-PROGRESS
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.CriticalPathAnalyst`1">
            <summary>
            An engine for determining critical paths through a directed acyclic graph (DAG).
            </summary>
            <typeparam name="T">The type of task being represented in this DAG.</typeparam>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.#ctor(`0,`0,System.Func{`0,System.DateTime},System.Func{`0,System.TimeSpan},System.Func{`0,System.Boolean},System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Graphs.CriticalPathAnalyst`1"/> class.
            </summary>
            <param name="startNode">The start node of the directed acyclic graph (DAG).</param>
            <param name="finishNode">The finish node of the DAG.</param>
            <param name="startTime">A function that, given a task element, returns its start time.</param>
            <param name="duration">A function that, given a task element, returns its duration.</param>
            <param name="isFixed">A function that, given a task element, returns whether its start time and duration are fixed.</param>
            <param name="successors">A function that, given a task element, returns its successors.</param>
            <param name="predecessors">A function that, given a task element, returns its predecessors.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.CriticalPath">
            <summary>
            Returns the critical path.
            </summary>
            <value>The critical path.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.ComputeCriticalPath">
            <summary>
            Computes (or recomputes) the critical path. This is called automatically if necessary when the Critical Path is requested.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.PropagateForward(Highpoint.Sage.Graphs.CriticalPathAnalyst{`0}.TimingData)">
            <summary>
            Performs a depth-first propagation along a path for which all predecessors' computations are complete,
            adjusting early start &amp; finish according to a PERT methodology.
            </summary>
            <param name="tdNode">The TimingData node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.PropagateBackward(Highpoint.Sage.Graphs.CriticalPathAnalyst{`0}.TimingData)">
            <summary>
            Performs a depth-first propagation backwards along a path for which all successors' computations
            are complete, adjusting late start &amp; finish according to a PERT methodology.
            </summary>
            <param name="tdNode">The TimingData node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CriticalPathAnalyst`1.TimingDataNodeFor(`0)">
            <summary>
            Gets (or creates) the timing data node for the provided client-domain node.
            </summary>
            <param name="node">The client-domain node.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PmData">
            <summary>
            PMData is Post-Mortem data, data that indicates which vertices and edges
            have fired in a particular graph execution. It does not exist in a non-
            debug build.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PmData.VerticesFired">
            <summary>
            A list of the vertices in a graph that were fired in a given run of  the graph.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PmData.EdgesFired">
            <summary>
            A list of the edges in a graph that were fired in a given run of  the graph.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.StructureChangeType">
            <summary>
            An enumeration, the members of which describe types of structure change.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.AddPostEdge">
            <summary>
            A post edge was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.AddPreEdge">
            <summary>
            A predecessor edge was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.RemovePreEdge">
            <summary>
            A predecessor edge was removed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.RemovePostEdge">
            <summary>
            A post edge was removed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.AddCostart">
            <summary>
            A costart was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.AddCofinish">
            <summary>
            A co-finish was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.RemoveCostart">
            <summary>
            A co-start was removed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.RemoveCofinish">
            <summary>
            A co-finish was removed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.AddChildEdge">
            <summary>
            A child edge was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.RemoveChildEdge">
            <summary>
            A child edge was removed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.NewSynchronizer">
            <summary>
            A new synchronizer was added.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.StructureChangeType.Unknown">
            <summary>
            An unknown change was made.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.StructureChangeTypeSvc">
            <summary>
            A class that holds a collection of static methods which provide abstraced data about StructureChangeTypes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsPreEdgeChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether StructureChangeType was a pre-edge change.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType signifies a change in a predecessor-edge.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsPostEdgeChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether StructureChangeType was a post-edge change.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType signifies a change in a successor-edge.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsCostartChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies a co-start change.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType signifies a change in a co-start.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsCofinishChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies a co-finish change.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType signifies a change in a co-finish.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsChildChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies a change in a child.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType  signifies a change in a child.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsSynchronizerChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies a change in a synchronizer.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType  signifies a change in a synchronizer.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsAdditionChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies an addition.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType  signifies an addition.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.StructureChangeTypeSvc.IsRemovalChange(Highpoint.Sage.Graphs.StructureChangeType)">
            <summary>
            Determines whether the StructureChangeType signifies a removal.
            </summary>
            <param name="sct">The StructureChangeType.</param>
            <returns>true if the StructureChangeType  signifies a removal.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.StructureChangeHandler">
            <summary>
            Implemented by events that are fired when graph structure changes.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.IPartOfGraphStructure">
            <summary>
            Implemented by an object that is a part of a graph structure.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.IPartOfGraphStructure.StructureChangeHandler">
            <summary>
            Fired when the structure of the graph changes.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.DAGCycleChecker">
            <summary>
            A DAGCycleChecker walks a Directed Acyclic Graph, depth-first, looking for cycles, which it detects
            through the repeated encountering of a given vertex along a given path. After evaluating the DAG,
            it presents a collection of errors (the Errors field) in the DAG. The errors are instances of
            DAGStructureError, which implements IModelError, and describes either the first, or all cycles in
            the network of edges underneath the root edge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.#ctor(Highpoint.Sage.Graphs.IEdge,System.Boolean)">
            <summary>
            Creates a DAGCycleChecker that can evaluate the DAG under the specified edge.
            </summary>
            <param name="rootEdge">The edge that defines the DAG to be analyzed - the DAG runs from thepreVertex of this edge to the postVertex, and includes all children.</param>
            <param name="collapse">If true, the graph is collapsed to make it smaller.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.Check(System.Boolean,System.Object)">
            <summary>
            Forces this DAGCycleChecker to validate the entire DAG by checking for cycles.
            </summary>
            <param name="haltOnError">If true, the checker will stop as soon as it finds the first error.</param>
            <param name="startElement">The vertex at which the Cycle Checker begins its search.</param>
            <returns>
            True if the DAGCycleChecker found no errors.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.Check(System.Boolean)">
            <summary>
            Forces this DAGCycleChecker to validate the entire DAG by checking for cycles.
            </summary>
            <param name="haltOnError">If true, the checker will stop as soon as it finds the first error.</param>
            <returns>True if the DAGCycleChecker found an error.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.Advance(Highpoint.Sage.Graphs.DAGCycleChecker.Node)">
            <summary>
            Moves the checking cursor forward to the specified vertex. Calls EvaluateVertex(...) to ensure 
            that the new vertex has not been encountered along this path yet, and calls GetEdgesFromVertex(...)
            to determine the next group of edges to be traversed, following which, it calls Advance(Edge edge)
            on each of those edges. After a path has been explored, the Advance method calls Retreat(...) on
            the specified vertex, and the cursor retreats to where it was before this path was explored.
            </summary>
            <param name="node">The Node that is to be added to the current depth path.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.GetSuccessors(System.Object)">
            <summary>
            Returns an ArrayList of the edges that are downstream from the given vertex, in a depth-first traversal.
            </summary>
            <param name="element">The element, forward from which we wish to proceed.</param>
            <returns>An ArrayList of the elements that are downstream from the given element, in a depth-first traversal.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.LogError(System.Object)">
            <summary>
            Adds an error indicating that this element represents the start of a cycle. Cycles will be detected
            by the first recurring element in a path.
            </summary>
            <param name="element">The element that has just been added to the current depth path.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DAGCycleChecker.Errors">
            <summary>
            A collection of the errors that the DAGCycleChecker found in the DAG, during its last check.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DAGCycleChecker.ClearErrors">
            <summary>
            Clears out the collection of errors.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.DagDeadlockChecker">
            <summary>
            A DAGDeadlockChecker walks a Directed Acyclic Graph, depth-first, looking for deadlocks, which it detects
            through the repeated encountering of a given vertex along a given path. After evaluating the DAG,
            it presents a collection of errors (the Errors field) in the DAG. The errors are instances of
            DAGStructureError, which implements IModelError, and describes either the first, or all deadlocks in
            the network of edges underneath the root edge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagDeadlockChecker.#ctor(Highpoint.Sage.Graphs.IEdge)">
            <summary>
            Creates a DAGDeadlockChecker that can evaluate the DAG under the specified edge.
            </summary>
            <param name="rootEdge">The edge that defines the DAG to be analyzed - the DAG that is to 
            be analyzed runs from the preVertex of the specified edge to its postVertex.
            </param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagDeadlockChecker.Check">
            <summary>
            Forces this DAGDeadlockChecker to validate the entire DAG by checking for deadlocks.
            </summary>
            <returns>True if the DAGDeadlockChecker found no errors.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagDeadlockChecker.GetSuccessors(System.Object)">
            <summary>
            Returns an ArrayList of the edges that are downstream from the given vertex, in a depth-first traversal.
            </summary>
            <param name="element">The element, forward from which we wish to proceed.</param>
            <returns>An ArrayList of the elements that are downstream from the given element, in a depth-first traversal.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagDeadlockChecker.Errors">
            <summary>
            A collection of the errors that the DAGDeadlockChecker found in the DAG, during its last check.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagDeadlockChecker.ClearErrors">
            <summary>
            Clears out the collection of errors.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.DagStructureError">
            <summary>
            This is a class that characterizes in an instance of IModelError, a structural error in a DAG.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagStructureError.#ctor(Highpoint.Sage.Graphs.IEdge,System.Collections.IList,System.String)">
            <summary>
            Creates a DAGStructureError.
            </summary>
            <param name="graphRoot">The root task of the DAG that the error pertains to.</param>
            <param name="target">An IList of the entities that comprise the loop.</param>
            <param name="narrative">A narrative that describes the error.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.Name">
            <summary>
            The name of the error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.Narrative">
            <summary>
            A narrative that describes the error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.Target">
            <summary>
            An IList that includes all of the participants in the loop.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.Subject">
            <summary>
            The root task of the DAG that the error pertains to.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.Priority">
            <summary>
            Gets or sets the priority of the notification.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.InnerException">
            <summary>
            Represents an exception that may have been thrown in the creation of this error.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.DagStructureError.AutoClear">
            <summary>
            Gets a value indicating whether this error should be automatically cleared at the start of a simulation.
            </summary>
            <value><c>true</c> if [auto clear]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.DagStructureError.ToString">
            <summary>
            A friendly representation of the error, including its narrative.
            </summary>
            <returns>A friendly representation of the error, including its narrative.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.EdgeExecutionCompletionSignaler">
            <summary>
            An EdgeExecutionSignaler is called by the code in an edge's application code to signify that it has completed execution.
            </summary>
            <param name="graphContext">The graph context in which the execution is occurring.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.EdgeExecutionDelegate">
            <summary>
            Implemented by a method that is to contain application code. It is called by the graph when the edge's turn comes
            to execute application code.
            </summary>
            <param name="graphContext">The graph context in which execution is occurring.</param>
            <param name="theEdge">The edge on which execution is to occur.</param>
            <param name="ecs">The EdgeExecutionCompletionSignaler to call once this execution is complete.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.StaticEdgeEvent">
            <summary>
            An event that pertains to an edge irrespective of the execution (graph) context, therefore usually referring to
            a structural occurrence.
            </summary>
            <param name="theEdge">The edge to which the event pertains.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.EdgeEvent">
            <summary>
            An event that pertains to an edge within an execution (graph) context, therefore usually referring to
            a dynamic event such as commencement or completion of an edge.
            </summary>
            <param name="graphContext">The graph context in which execution is occurring.</param>
            <param name="theEdge">The edge to which the event pertains.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.IStatefulEdge">
            <summary>
            Implemented by any edge that modifies the state of its graphContext.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IStatefulEdge.GetPreState(System.Collections.IDictionary)">
            <summary>
            Gets the state of the implementing object immediately prior to execution within the provided context.
            </summary>
            <param name="graphContext">The graph context.</param>
            <returns>The state of the implementing object immediately prior to execution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IStatefulEdge.GetPostState(System.Collections.IDictionary)">
            <summary>
            Gets the state of the implementing object immediately following execution within the provided context.
            </summary>
            <param name="graphContext">The graph context.</param>
            <returns>The state of the implementing object immediately following execution.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.IEdge">
            <summary>
            Implemented by an object that is a participant in a directed graph. Edges may be hierarchical, meaning that an edge
            may have child edges that are executed as a part of its own execution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.IEdge.PreVertex">
            <summary>
            Gets the pre vertex of the object.
            </summary>
            <value>The pre vertex.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.IEdge.PostVertex">
            <summary>
            Gets the post vertex of the object.
            </summary>
            <value>The post vertex.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IEdge.GetParent">
            <summary>
            Gets the parent edge to this one. If the graph is not hierarchical, this will be null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.IEdge.ChildEdges">
            <summary>
            Gets the child edges of this one. No sequence is implied in this collection - child edges are executed
            in an order according to their vertices' relationships to each other and their parents.
            </summary>
            <value>The child edges.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.IEdge.Channel">
            <summary>
            Gets or sets the channel with which this edge is associated. This identifies an edge as a part of a group
            of edges that are to be fired together by a <see cref="T:IEdgeFiringManager"/> when a preVertex is satisfied.
            As an example, a vertex that had two outbound edges, a forward and a loopback, would have an <see cref="T:IEdgeFiringManager"/>
            attached to it that knew that after a call to its Start(...) method, it was to fire the edge associated with
            its loopback channel a certain number of times, followed by firing the edges associated with its forward edge
            once the loopback count had been reached.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Edge">
            <summary>
            An edge in a graph is an executional path between two vertices. An edge will have a preVertex
            and a postVertex, and entail some (possibly zero) duration and procedural implementation between
            the satisfaction of its preVertex and that of its postVertex.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.m_description">
            <summary>A description of this edge</summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.Pre">
            <summary>
            This edge's pre-vertex.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.Post">
            <summary>
            This edge's post-vertex.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.m_name">
            <summary>
            This edge's Name.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.ParentEdge">
            <summary>
            This edge's parent edge.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Edge.NULL_CHANNEL_MARKER">
            <summary>
            An EdgeFiringManager that is told to fire all edges that are marked with a NullChannelMarker will
            actually fire all edges that have no Channel marker - that is, they have a \"null\" channel marker.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.CloneEvent">
            <summary>
            Fired after this edge is cloned.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.EdgeExecutionStartingEvent">
            <summary>
            Fired after an edge has been notified that it may start, and immediately prior to calling the <see cref="T:Highpoint.Sage.Graphs.EdgeExecutionDelegate"/> which contains the application code.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.EdgeExecutionFinishingEvent">
            <summary>
            Called as soon as the application code in the <see cref="T:Highpoint.Sage.Graphs.EdgeExecutionDelegate"/> has finished.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.EdgeStartingEvent">
            <summary>
            Called as an edge's pre-vertex is starting to fire.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.EdgeFinishingEvent">
            <summary>
            Called as an edge's post-vertex is starting to fire.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Edge"/> class. This implementation is provided in support of serialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Edge"/> class with a given name.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.InitializeStructuralChangeHandlers">
            <summary>
            Initializes the structural change handlers -  GainedPredecessorEvent, GainedSuccessorEvent, LostPredecessorEvent, and LostSuccessorEvent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.CreateVertices">
            <summary>
            Creates the pre and post vertices for this edge, providing them with default names
            and connecting them to this edge.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.GainedPredecessorEvent">
            <summary>
            Fired after an edge has gained a predecessor.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.LostPredecessorEvent">
            <summary>
            Fired after an edge has lost a predecessor.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.GainedSuccessorEvent">
            <summary>
            Fired after an edge has gained a successor.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.LostSuccessorEvent">
            <summary>
            Fired after an edge has lost a successor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.PreVertex">
            <summary>
            The preVertex to this edge.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.PostVertex">
            <summary>
            The postVertes to this edge.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.Channel">
            <summary>
            An edge's channel is used by a vertex's branch manager to determine which 
            successor edges are to fire when the vertex's predecessors have all fired.
            The channel can be null, if there is no branch manager, or if the provided
            branch manager allows it.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.Name">
            <summary>
            The name of this edge.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.Description">
            <summary>
            A description of this Edge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddPredecessor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Creates a <see cref="T:Edge.Ligature"/> between the provided edge's postVertex and this one's PreVertex,
            making the provided edge a predecessor to this one. This API also interacts with a
            <see cref="T:Highpoint.Sage.Graphs.Validity.ValidationService"/> to enable it to correctly
            manage graph validity state.
            </summary>
            <param name="preEdge">The pre edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddSuccessor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Creates a <see cref="T:Edge.Ligature"/> between the provided edge's preVertex and this one's postVertex,
            making the provided edge a successor to this one. This API also interacts with a
            <see cref="T:Highpoint.Sage.Graphs.Validity.ValidationService"/> to enable it to correctly
            manage graph validity state.
            </summary>
            <param name="postEdge">The post edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemovePredecessor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Either removes a <see cref="T:Ligature"/> between the provided edge's postVertex and this one's PreVertex,
            removing the provided edge as a predecessor to this one. If the provided edge is a <see cref="T:Ligature"/>, then
            the ligature itself is disconnected from this edge. This API also interacts with a
            <see cref="T:Highpoint.Sage.Graphs.Validity.ValidationService"/> to enable it to correctly
            manage graph validity state.
            </summary>
            <param name="preEdge">The pre edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveSuccessor(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Either removes a <see cref="T:Ligature"/> between the provided edge's preVertex and this one's PostVertex,
            removing the provided edge as a successor to this one. If the provided edge is a <see cref="T:Ligature"/>, then
            the ligature itself is disconnected from this edge. This API also interacts with a
            <see cref="T:Highpoint.Sage.Graphs.Validity.ValidationService"/> to enable it to correctly
            manage graph validity state.
            </summary>
            <param name="postEdge">The post edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.InsertBetween(Highpoint.Sage.Graphs.Edge,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Inserts this edge between the two provided edges. This is done by calling <see cref="T:Edge#AddSuccessor"/> for
            this edge on the preEdge, and <see cref="T:Edge#AddPredecessor"/> for this edge on the postEdge.
            </summary>
            <param name="preEdge">The edge that is to be this edge's predecessor.</param>
            <param name="postEdge">The edge that is to be this edge's successor.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Disconnect">
            <summary>
            Disconnects this instance from any parent edges, predecessors and successors. Child edges are left
            attached.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddCostart(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Adds the slave Edge as a CoStart. A CoStart is an edge that is allowed to start as soon
            as this edge has started. Thus, the slave edge's prevertex will not be allowed to fire until 
            this edge's prevertex has fired.
            </summary>
            <param name="slaveEdge">The slave edge.</param>
            <returns>The ligature that was added between this edge's preVertex and the slave edge's preVertex.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveCostart(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Removes a costart relationship between this edge and the provided slave edge, if such exists.
            </summary>
            <param name="slaveEdge">The slave edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddCofinish(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Adds the slave Edge as a CoFinish. A CoFinish exists when a master edge's postVertex is not permitted to fire
            until the slave edge has completed. Thus, the master edge's postvertex will not be allowed to fire until 
            the slave edge's postvertex has fired.
            </summary>
            <param name="slaveEdge">The slave edge.</param>
            <returns>The ligature that was added between this edge's postVertex and the slave edge's postVertex.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveCofinish(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Removes a cofinish relationship between this edge and the provided slave edge, if such exists.
            </summary>
            <param name="slaveEdge">The slave edge.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.PredecessorEdges">
            <summary>
            Gets a list of predecessor edges attached to this edge's preVertex.
            </summary>
            <value>The predecessor edges.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.SuccessorEdges">
            <summary>
            Gets a list of successor edges attached to this edge's postVertex.
            </summary>
            <value>The successor edges.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Start">
            <summary>
            Begins execution of the graph under this edge using a default GraphContext.
            <see cref="T:Edge.Start"/>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Start(System.Collections.IDictionary)">
            <summary>
            Begins execution of the graph under the specified graph context.
            </summary>
            <param name="graphContext">The graph context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.GetParent">
            <summary>
            Gets the parent edge to this one. If the graph is not hierarchical, this will be null.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.Parent">
            <summary>
            Gets or sets the parent edge to this one. If the graph is not hierarchical, this will be null.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.ChildEdges">
            <summary>
            Gets the child edges of this one. No sequence is implied in this collection - child edges are executed
            in an order according to their vertices' relationships to each other and their parents.
            </summary>
            <value>The child edges.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddChainOfChildren(System.Collections.IList)">
            <summary>
            This method takes a list of edges, and first creates a chain out of them, and then
            adds that chain as a set of child tasks. Note that a restriction is that the edge to
            which these edges are being added cannot already have children assigned to it.
            
            </summary>
            <param name="listOfEdges">An IList containing a group of edges that are to be added as a sequential set of children to this edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddChildEdges(System.Collections.IList)">
            <summary>
            Adds the list of child edges as children to this edge. They are treated as equals, all attached at their pre-vertices
            to this one's pre-vertex, and at their post-vertices to this one's post-vertex. Any further sequencing between them is
            governed by otherwise-defined ligatures, synchronizers, etc.
            </summary>
            <param name="edges">The edges.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddChildEdge(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Adds the child edge as a child to this edge. It will be attached at its pre-vertex
            to this one's pre-vertex, and at its post-vertex to this one's post-vertex. Any further
            sequencing between the provided edge and other edges is governed by otherwise-defined
            ligatures, synchronizers, etc.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveChildEdges">
            <summary>
            Removes the child edges, and the ligatures that establish them as children (i.e. between the parent's pre-vertex
            and their pre-vertices, and the parent's post-vertex and their post-vertices.)
            </summary>
            <returns>A list of the edges that were removed as children.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveChildEdge(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Removes the child edge, and the ligatures that establish it as a child (i.e. between the parent's pre-vertex
            and this one's pre-vertex, and the parent's post-vertex and this one's post-vertex.)
            </summary>
            <param name="child">The child edge that is to be removed.</param>
            <returns>
            True if the removal was successful. False if the provided edge was not a child to this edge.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Edge"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Edge"></see>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.ExecutionDelegate">
            <summary>
            Gets or sets the execution delegate that this edge uses to call application code.
            </summary>
            <value>The execution delegate.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.IsRunning(System.Collections.IDictionary)">
            <summary>
            Determines whether the specified graph context is running.
            </summary>
            <param name="graphContext">The graph context.</param>
            <returns>
            	<c>true</c> if the specified graph context is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.PreVertexSatisfied(System.Collections.IDictionary)">
            <summary>
            Called by the pre-vertex when it has been satisfied - that is, all incoming edges and
            synchronizers to that vertex have fired.
            </summary>
            <param name="graphContext">The graph context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.OnExecutionComplete(System.Collections.IDictionary)">
            <summary>
            Called when execution of this edge is complete.
            </summary>
            <param name="graphContext">The graph context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Connect(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex)">
            <summary>
            Creates a direct connection between the from vertex and the to vertex, if one does not already exist.
            </summary>
            <param name="from">The vertex that is to become the preVertex of the new edge.</param>
            <param name="to">The vertex that is to become the postVertex of the new edge.</param>
            <returns>The edge that joins the two vertices.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Disconnect(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex,System.Boolean)">
            <summary>
            Removes one or more edges, if they exist, linking the fromVertex to the toVertex. The
            edge will be outbound from the fromVertex, and inbound to the toVertex. 
            </summary>
            <param name="from">The fromVertex.</param>
            <param name="to">The toVertex.</param>
            <param name="deleteAllSuchEdges">if set to <c>true</c> this method will delete all such edges. 
            If <c>false</c>, it will delete only the first one found.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.AddLigature(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex)">
            <summary>
            Adds a ligature between the from and the to vertices.
            </summary>
            <param name="from">The 'from' vertex</param>
            <param name="to">The 'to' vertex</param>
            <returns>The new ligature.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveLigature(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex)">
            <summary>
            Removes the ligature between the from and the to vertices..
            </summary>
            <param name="from">The 'from' vertex</param>
            <param name="to">The 'to' vertex</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.RemoveLigature(Highpoint.Sage.Graphs.Edge,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Removes the ligature between the post vertex of the 'from' edge and the pre-vertex of the 'to' edge.
            </summary>
            <param name="from">The 'from' edge.</param>
            <param name="to">The 'to' edge.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance. This method calls _PopulateClone.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge._PopulateClone(System.Object)">
            <summary>
            Populates the clone, adding clones of its children, and the edges relating them to the clone of this edge.
            </summary>
            <param name="clone">The clone of this edge.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.CloneName">
            <summary>
            Gets a name for the next clone to be obtained. Note that calling this method increases the index number used to create the name.
            </summary>
            <value>The name of the clone.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.GetVertex(Highpoint.Sage.Graphs.Vertex.WhichVertex)">
            <summary>
            Gets the pre- or post-vertex of this edge..
            </summary>
            <param name="whichVertex">Which vertex is desired (pre or post).</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.UtilRef">
            <summary>
            Gets or sets the utility reference. This is a reference that can be used by whomever needs to do so,
            for short periods. The cloning mechanism, for example, uses it during cloning.
            </summary>
            <value>The util ref.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Join(System.Collections.IDictionary,Highpoint.Sage.SimCore.IExecutive,Highpoint.Sage.Graphs.Edge)">
            <summary>
            This edge will immediately suspend execution until the otherEdge completes.
            </summary>
            <param name="graphContext">The graph context.</param>
            <param name="exec">The executive for the model to which both edges belong.</param>
            <param name="otherEdge">The edge whose completion this edge will await.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Yield(Highpoint.Sage.SimCore.IExecutive)">
            <summary>
            Gives up the execution thread temporarily to any awaiting edges. This edge will be
            called to resume execution later in this same timeslice.
            </summary>
            <param name="exec">The executive for the model to which this edge belongs.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Accept(Highpoint.Sage.SimCore.IVisitor)">
            <summary>
            Accepts a visitor, subsequently calling the visitor's Visit(this) method. See the Visitor design pattern for details.
            </summary>
            <param name="visitor">The visitor to be accepted.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.ValidityChangeEvent">
            <summary>
            Fired when the Validation Service determines that this edge's validity has changed.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.ValidationService">
            <summary>
            Gets or sets the validation service that oversees the implementer.
            </summary>
            <value>The validation service.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.NotifyOverallValidityChange(Highpoint.Sage.Graphs.Validity.Validity)">
            <summary>
            Called by the ValidationService upon an overall validity change.
            </summary>
            <param name="newValidity">The new validity.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.Highpoint#Sage#Graphs#Validity#IHasValidity#GetParent">
            <summary>
            Gets the parent (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.GetChildren">
            <summary>
            Gets the children (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Edge.GetSuccessors">
            <summary>
            Gets the successors (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Edge.SelfState">
            <summary>
            Gets or sets the state (from a perspective of validity) of the implementer.
            </summary>
            <value>The state of the self.</value>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Edge.StructureChangeHandler">
            <summary>
            This event is fired any time the graph's structure changes.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.EdgeJoiner">
            <summary>
            Used internally, dynamically, and only during a Join operation. Create only on the stack.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.UtilityReferenceInUseException">
            <summary>
            Thrown when a UtilityReference is being set, but is already in use. A UtilityReference is a reference that can be used by 
            whomever needs to do so, for short periods. The cloning mechanism, for example, uses it during cloning. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Ligature">
            <summary>
            A Ligature is an edge that connects nodes, but unlike a task, has no duration. It is used only to model dependencies
            such as when two predecessor tasks must complete before a successor task is allowed to commence - the finish vertices
            of the two predecessor tasks would be connected to the start vertex of the successor task.
            </summary>
            <seealso cref="T:Highpoint.Sage.Graphs.Edge" />
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.#ctor">
            <summary>
            Default constructor for persistence only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Graphs.Ligature"/> class.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.#ctor(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Graphs.Ligature"/> class.
            </summary>
            <param name="from">The vertex from which this ligature starts.</param>
            <param name="to">The vertex at which this ligature ends.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.PreVertexSatisfied(System.Collections.IDictionary)">
            <summary>
            Called by the pre-vertex when it has been satisfied - that is, all incoming edges and
            synchronizers to that vertex have fired.
            </summary>
            <param name="graphContext">The graph context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.InitializeStructuralChangeHandlers">
            <summary>
            Initializes the structural change handlers -  GainedPredecessorEvent, GainedSuccessorEvent, LostPredecessorEvent, and LostSuccessorEvent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.Disconnect">
            <summary>
            Disconnects this instance from any parent edges, predecessors and successors. Child edges are left
            attached.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. This is not supported for ligatures.
            </summary>
            <returns>A new object that is a copy of this instance. This method calls _PopulateClone.</returns>
            <exception cref="T:System.ApplicationException">Application attempted to clone a ligature.</exception>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.CreateVertices">
            <summary>
            Creates the pre and post vertices for this edge, providing them with default names
            and connecting them to this edge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.CreateName(Highpoint.Sage.Graphs.Edge,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Creates a name for this ligature based on the names of the from and to edges.
            </summary>
            <param name="from">The edge from which this ligature starts.</param>
            <param name="to">The edge at which this ligature ends.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Ligature.CreateName(Highpoint.Sage.Graphs.Vertex,Highpoint.Sage.Graphs.Vertex)">
            <summary>
            Creates a name for this ligature based on the names of the from and to vertices.
            </summary>
            <param name="from">The vertex from which this ligature starts.</param>
            <param name="to">The vertex at which this ligature ends.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.IEdgeFiringManager">
            <summary>
            Implemented by an object that is responsible for deciding when to fire one or more of a group of edges.
            Edge firing managers are typically associated with a vertex, and when the vertex thinks that an edge
            should be fired (say, because all predecessor edges have completed), it will advise the Edge Firing Manager
            to fire the appropriate edges.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IEdgeFiringManager.Start(System.Collections.IDictionary)">
            <summary>
            This is fired once at the beginning of a branch manager's being asked to review a set of edges,
            which happens immediately after a vertex is satisfied.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IEdgeFiringManager.FireIfAppropriate(System.Collections.IDictionary,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Schedules the presented edge to be fired if the edge's channel matches the currently active channel.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
            <param name="edge">The edge being considered for execution.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.IEdgeFiringManager.ClearBranches">
            <summary>
            Clears the list of branch data, essentially removing all branches from this manager.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.CountedBranchManager">
            <summary>
            The CountedBranchManager fires one channel a specified number of times, and then fires
            another channel a specified number of times, etc. It then repeats as necessary. This is useful
            in looping &amp; branching - the edge firing manager will fire the loopback edge a number of
            times followed by the shunt or pass-forward edge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CountedBranchManager.#ctor(Highpoint.Sage.SimCore.IModel,System.Object[],System.Int32[])">
            <summary>
            Creates a counted branch manager that will fire all outbound edges with channels matching the
            zeroth channel, a number of times, followed by those matching the first channel another number
            of times, etc. The channels array and the counts array must have the same number of elements, and
            they are considered paired arrays - that is, the zeroth element of one goes with the zeroth element
            of the other, likewise the first, second, etc.
            </summary>
            <param name="model">The model in which this graph is running. This is necessary because the outbound
            edges are fired asynchronously to keep a graph's execution path from looping back over this branch
            manager while it is still executing.</param>
            <param name="channels">An array of channel objects that determine which outbound edges will fire.
            <B>IMPORTANT NOTE: Edges with null channel markers must be specified by the Edge.NullChannelMarker object.</B></param>
            <param name="counts">An array of integers that will determine how many times the given edges will fire.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CountedBranchManager.Start(System.Collections.IDictionary)">
            <summary>
            This is fired once at the beginning of this branch manager's being asked to review a set of edges,
            which happens immediately after a vertex is satisfied. After that, FireIfAppropriate(...) is called
            once for each outbound edge.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.CountedBranchManager.FireIfAppropriate(System.Collections.IDictionary,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Schedules the presented edge to be fired if the edge's channel matches the currently active channel.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
            <param name="edge">The edge being considered for execution.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.CountedBranchManager.Model">
            <summary>
            The model through which edge executions are scheduled.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.ConditionalBranchManager">
            <summary>
            A conditional branch manager is affiliated with an edge's post-vertex. It stores one or more conditions
            and the edge channels associated with each. A default condition causes the null-channeled outbound edge
            (or edges) to fire, and until we evaluate expressions, this is the only channel that will actually fire.
            Statics on the class are used to establish and remove branch constructs in the SOM.<para></para>
            <b>Since we do not evaluate expressions, this manager will assume that the first condition and target(s)
            provisioned are to be the default.</b><para></para>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.#ctor(Highpoint.Sage.SimCore.IModel)">
             <summary>
            
             </summary>
             <param name="model">The model in which this graph is running. This is necessary because the outbound
             edges are fired asynchronously to keep a graph's execution path from looping back over this branch
             manager while it is still executing.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.Start(System.Collections.IDictionary)">
            <summary>
            This is fired once at the beginning of a branch manager's being asked to review a set of edges,
            which happens immediately after a vertex is satisfied.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.FireIfAppropriate(System.Collections.IDictionary,Highpoint.Sage.Graphs.Edge)">
            <summary>
            Schedules the presented edge to be fired if the edge's channel matches the currently active channel.
            </summary>
            <param name="graphContext">The graph context in which we are currently running.</param>
            <param name="edge">The edge being considered for execution.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.ClearBranches">
            <summary>
            Clears the list of branch data, essentially removing all branches from this manager.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.AddBranchScenarios(Highpoint.Sage.SimCore.IModel,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Highpoint.Sage.Graphs.Tasks.Task},Highpoint.Sage.Graphs.Tasks.Task)">
            <summary>
            Adds branch scenarios, which consist of a set of conditions and correlating edge channels that will be
            fired for the first condition that evaluates to true (Currently, the first one specified is the one that
            actually runs. If a master task is specified, then that task's evaluation of its conditions will be used
            to guide the selection of which edge fires on this task.
            </summary>
            <param name="model">The model in which this branch scenario will run.</param>
            <param name="conditions">The branch conditions of each scenario.</param>
            <param name="channels">The channels that describe each branch.</param>
            <param name="targets">The targets to which each branch goes.</param>
            <param name="master">The master task, if there is one.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.AddBranchScenario(Highpoint.Sage.SimCore.IModel,System.String,System.String,Highpoint.Sage.Graphs.Tasks.Task,Highpoint.Sage.Graphs.Tasks.Task)">
            <summary>
            Adds branch scenarios, which consist of a set of conditions and correlating edge channels that will be
            fired for the first condition that evaluates to true (Currently, the first one specified is the one that
            actually runs. If a master task is specified, then that task's evaluation of its conditions will be used
            to guide the selection of which edge fires on this task.
            </summary>
            <param name="model">The model in which this branch scenario will run.</param>
            <param name="condition">The branch condition of this scenario.</param>
            <param name="channel">The channel that describes this branch.</param>
            <param name="target">The target to which this branch goes.</param>
            <param name="master">The master task, if there is one.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.ConditionalBranchManager.DefaultChannel">
            <summary>
            Gets or sets the channel that will be run if the expressions are un-evaluatable (which all currently are).
            </summary>
            <value>The default channel.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.For(Highpoint.Sage.Graphs.Tasks.Task,System.Boolean)">
            <summary>
            Gets the Conditional Branch Manager for a given task.
            </summary>
            <param name="task">The task whose Conditional Branch Manager is desired.</param>
            <param name="force">if set to <c>true</c> [force] creation of a new Conditional Branch Manager.</param>
            <returns>The Conditional Branch Manager for a given task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.AddBranchScenarios(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Graphs.Tasks.Task,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Highpoint.Sage.Graphs.Tasks.Task},Highpoint.Sage.Graphs.Tasks.Task,System.Boolean)">
            <summary>
            Registers branch conditions for branching to be performed by a Conditional Branch Manager.
            The first condition specified is assumed to be the one that is true.
            </summary>
            <param name="model">The model in which these branch scenarios will run.</param>
            <param name="source">The source task from whose post vertex the branches emit.</param>
            <param name="conditions">The indexed conditions under which each channel is activated.</param>
            <param name="channels">The indexed channels for each branch.</param>
            <param name="targets">The target tasks to which the branches will pass control.</param>
            <param name="master">The master edge. Null, or same as source, if source is master.</param>
            <param name="force">if set to <c>true</c> [force] creation of a new Conditional Branch Manager.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.ClearBranchesFor(Highpoint.Sage.Graphs.Tasks.Task)">
            <summary>
            Clears the conditional branch data for the provided task.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.ConditionalBranchManager.CreateBranchLink(Highpoint.Sage.Graphs.Tasks.Task,Highpoint.Sage.Graphs.Tasks.Task,System.String)">
            <summary>
            Creates a branch link from one task's post vertex to another task's preVertex.
            </summary>
            <param name="from">The task whose post vertex the branch is to emanate from.</param>
            <param name="to">The task to whose pre vertex the branch is to convey control.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.ConditionalBranchManager.BranchScenarios">
            <summary>
            Gets the branch scenarios managed by this BranchManager.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.ConditionalBranchManager.BranchScenario">
            <summary>
            Encapsulates a condition, a channel and a set of slave edges.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.IEdgeReceiptManager">
            <summary>
            Summary description for IEdgeReceiptManager.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.FlowNode`1.Color">
            <summary>
            Gets or sets the color of the node - graph theory color, used by traversal algorithms.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.FlowNode`1.Bind(Highpoint.Sage.Graphs.FlowNode{`0},Highpoint.Sage.Graphs.FlowNode{`0},System.Boolean)">
            <summary>
            Binds the specified predecessor node to the specified successor node, and vice versa.
            </summary>
            <param name="predNode">The predecessor node.</param>
            <param name="succNode">The successor node.</param>
            <param name="allowDuplicateBindings">if set to <c>true</c> [allow duplicate bindings].</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.FlowNode`1.Bind(Highpoint.Sage.Graphs.FlowNode{`0},Highpoint.Sage.Graphs.FlowNode{`0})">
            <summary>
            Binds the specified pred node to the specified succ node, and vice versa.
            </summary>
            <param name="pred">The predecessor node.</param>
            <param name="succ">The successor node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.FlowNode`1.UnBind(Highpoint.Sage.Graphs.FlowNode{`0},Highpoint.Sage.Graphs.FlowNode{`0})">
            <summary>
            Binds the specified pred node to the specified succ node, and vice versa.
            </summary>
            <param name="pred">The predecessor node.</param>
            <param name="succ">The successor node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.FlowNode`1.UnBindAll">
            <summary>
            Unbinds all predecessors and successors from this node.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcLinkElementList">
            <summary>
             A collection of IPfcLinkElement objects that can be searched by name or by Guid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:LinkCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:LinkCollection"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:LinkCollection"/> class.
            </summary>
            <param name="srcCollection">The SRC collection.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.Item(System.String)">
            <summary>
            Gets the <see cref="T:IPfcLinkElement"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:IPfcLinkElement"/> with the specified GUID.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLinkElementList.PriorityComparer">
            <summary>
            Gets the priority comparer, used to sort this list by increasing link priority.
            </summary>
            <value>The priority comparer.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcNodeList">
            <summary>
            A List of IPfcNode objects that can be searched by name or by Guid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNodeList.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:PFCNodeList"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNodeList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PFCNodeList"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNodeList.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:PFCNodeList"/> class as a copy of an existing collection.
            </summary>
            <param name="srcCollection">The source collection.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNodeList.GetBy(Highpoint.Sage.Graphs.PFC.PfcElementType)">
            <summary>
            Returns all nodes in this collection that are of the specified type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>
            A collection of all nodes in this collection that are of the specified type.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNodeList.Item(System.String)">
            <summary>
            Gets the <see cref="T:IPfcNode"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNodeList.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:IPfcNode"/> with the specified GUID.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNodeList.EmptyList">
            <summary>
            Gets an empty list of PfcNodes.
            </summary>
            <value>The empty list.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcStepNodeList">
            <summary>
            A collection of IPfcNode objects that can be searched by name or by Guid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStepNodeList.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:StepCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStepNodeList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:StepCollection"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStepNodeList.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:StepCollection"/> class.
            </summary>
            <param name="srcCollection">The SRC collection.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStepNodeList.Item(System.String)">
            <summary>
            Gets the <see cref="T:IPfcStepNode"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStepNodeList.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:IPfcStepNode"/> with the specified GUID.
            </summary>
            <value></value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList">
            <summary>
            A collection of IPfcTransitionNode objects that can be searched by name or by Guid.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TransitionCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:TransitionCollection"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the <see cref="T:TransitionCollection"/> class.
            </summary>
            <param name="srcCollection">The SRC collection.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList.Item(System.String)">
            <summary>
            Gets the <see cref="T:IPfcTransitionNode"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransitionNodeList.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:IPfcTransitionNode"/> with the specified GUID.
            </summary>
            <value></value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Execution.Actions.Sequencer">
            <summary>
            When a sequencer's Precondition is set as the precondition of a pfcStep, it will watch the PFCExecutionContext
            at it's level minus the rootHeight, and will not grant the step permission to start running until another
            the Sequencer with the same sequencer key, and one-less index has already granted its step permission to run.
            After the predecessor's permission is granted, the sequencer puts a key tailored for its successor into an
            exchange on which the successor is already waiting. Only when the successor receives that key will it grant
            itself permission to run.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.Actions.Sequencer.#ctor(System.Guid,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Graphs.PFC.Execution.Actions.Sequencer"/> class.
            </summary>
            <param name="sequencerKey">The sequencer key.</param>
            <param name="myIndex">The creator's index.</param>
            <param name="rootHeight">Height of the root.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.ExecutionEngine.Run(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Runs this execution engine's PFC. If this is not called by a detachable event, it calls back for a new
            execEvent, on a detachable event controller.
            </summary>
            <param name="exec">The exec.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext">
            <summary>
            Class PfcExecutionContext holds all of the information necessary to track one execution through a PFC. The PFC governs structure,
            the PfcExecutionContext governs process-instance-specific data.
            </summary>
            <seealso cref="T:Highpoint.Sage.Utility.ExecutionContext" />
            <seealso cref="T:Highpoint.Sage.Scheduling.ISupportsCorrelation" />
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext.ParentGuid">
            <summary>
            Gets the parent of this tree node for the purpose of correlation. This will be its nominal parent, too.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.SetStochasticMode(Highpoint.Sage.Graphs.PFC.Execution.PfcActor.StochasticMode)">
            <summary>
            Sets the stochastic mode of this actor.
            </summary>
            <param name="mode">The stochastic mode.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.PfcActor.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.#ctor(Highpoint.Sage.Graphs.PFC.IPfcStepNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine"/> class.
            </summary>
            <param name="myStep">My step.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.GetState(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext)">
            <summary>
            Gets the state of this step.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.MyStep">
            <summary>
            Gets the PFC step that this state machine represents.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.SuccessorStateMachines">
            <summary>
            Gets the successor state machines.
            </summary>
            <value>The successor state machines.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.IsInFinalState(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext)">
            <summary>
            Gets a value indicating whether this step state machine is in a final state - Aborted, Stopped or Complete.
            </summary>
            <value>
            	<c>true</c> if this instance is in final state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.IsInQuiescentState(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext)">
            <summary>
            Gets a value indicating whether this step state machine is in a quiescent state - Held or Paused.
            </summary>
            <value>
            	<c>true</c> if this instance is in quiescent state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.Name">
            <summary>
            Gets the name of the step that this Step State Machine represents.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.CreateChildContexts(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext,Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart[]@,Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext[]@)">
            <summary>
            Creates pfc execution contexts, one per action under the step that is currently running. Each
            is given an instance count of zero, as a step can run its action only once, currently.
            </summary>
            <param name="parentContext">The parent context, that of the step that is currently running.</param>
            <param name="kids">The procedure function charts that live in the actions under the step that is currently running.</param>
            <param name="kidContexts">The pfc execution contexts that will correspond to the running of each of the child PFCs.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine.PfcStepJoiner">
            <summary>
            PFCStepJoiner, when RunAndWait is called, halts the step that owns the rootStepPfcec, and waits for completion of
            each child PFC (these are to have been actions of the root step) before resuming the parent step.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.TransitionStateMachine.ExecutableCondition">
            <summary>
            Gets or sets the executable condition, the executable condition that this transition will evaluate.
            </summary>
            <value>The executable condition.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Execution.TransitionStateMachine.Name">
            <summary>
            Gets the name of the transition this state machine will execute.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType">
            <summary>
            Expressions are prepresented as Hostile (with Guids), Friendly (names, including macro names) and Expanded (all names, plus macros evaluated.)
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType.Expanded">
            <summary>
            The expression has proper names and macros expanded.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType.Friendly">
            <summary>
            The expression has proper names and macros referenced by name.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType.Hostile">
            <summary>
            All names and macros are replaced by their guids.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionElement">
            <summary>
            An abstract base class for Rote Strings, Dual Mode Strings and Macros.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionElement.ToString(Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType,System.Object)">
            <summary>
            Returns the string for this expression element that corresponds to the indicated representation type.
            </summary>
            <param name="t">The indicated representation type.</param>
            <param name="forWhom">The owner of the expression, usually a Transition.</param>
            <returns>The string for this expression element.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionElement.Guid">
            <summary>
            Gets or sets the GUID of this expression. Returns Guid.Empty if the expression element will not need to
            be correlated to anything (as would, for example, a string and Guid representing a Step Name element.)
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionElement.Name">
            <summary>
            Gets or sets the name of this expression. Returns string.Empty if the expression element does
            not reasonably have a name. Macros and placeholders for OpSteps, for example, have names, where
            rote strings do not.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ExpressionElement.Type">
            <summary>
            Gets the type of this expression element - used primarily for ascertaining type compatibility between
            expressions.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.RoteString">
            <summary>
            A class that represents a string in an expression that does not correlate to anything outside the expression,
            such as the string &quot;' = TRUE AND '&quot;
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.RoteString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RoteString"/> class.
            </summary>
            <param name="str">The rote string that this object will represent.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.RoteString.ToString(Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType,System.Object)">
            <summary>
            Returns the string for this expression element that corresponds to the indicated representation type.
            </summary>
            <param name="t">The indicated representation type.</param>
            <param name="forWhom">The owner of the expression, usually a Transition.</param>
            <returns>The string for this expression element.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.RoteString.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.DualModeString">
            <summary>
            This class represents a string that correlates to an object. It is given a Guid that
            is logged into the participant directory, so that its name or its Guid can be changed
            without losing coherency. It is usually an object name.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.DualModeString.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DualModeString"/> class.
            </summary>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.DualModeString.ToString(Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType,System.Object)">
            <summary>
            Returns the string for this DualModeString that corresponds to the indicated representation type.
            </summary>
            <param name="t">The indicated representation type.</param>
            <param name="forWhom">The owner of the expression, usually a Transition.</param>
            <returns>The string for this expression element.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.DualModeString.Guid">
            <summary>
            Gets or sets the GUID of this expression. Returns Guid.Empty if the epression element will not need to
            be correlated to anything (as would, for example, a string and Guid representing a Step Name element.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.DualModeString.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.Macro">
            <summary>
            Abstract base class for all macros. Derives from ExpressionElement, and from that, obtains
            the ability to be expressed as friendly, hostile or expanded format.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.Macro.MACRO_START">
            <summary>
            All Macros start with this string.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.Macro.m_guid">
            <summary>
            The Guid by which this macro will be known.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.Macro.m_name">
            <summary>
            The friendly representation of this macro.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Macro.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Macro"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Macro.Evaluate(System.Object[])">
            <summary>
            Evaluates the macro using the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>The evaluated representation of the macro.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Macro.ToString(Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType,System.Object)">
            <summary>
            Returns the string for this macro element that corresponds to the indicated representation type.
            </summary>
            <param name="t">The indicated representation type.</param>
            <param name="forWhom">The owner of the expression, usually a Transition.</param>
            <returns>The string for this expression element.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.Macro.Name">
            <summary>
            Gets macro's name. Overridden in the concrete macro class.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.Macro.Guid">
            <summary>
            Gets or sets the GUID of this expression. Returns Guid.Empty if the epression element will not need to
            be correlated to anything (as would, for example, a string and Guid representing a Step Name element.
            Overridden in the concrete macro class.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.PredecessorsComplete">
            <summary>
            A Macro that expands into an expression that evaluates true only if all (explicitly
            named) predecessors to the owner transition are true. If there are no predecessors,
            then the expression is simply &quot;True&quot;.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.Expressions.PredecessorsComplete.NAME">
            <summary>
            The name by which this macro is known.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.PredecessorsComplete.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PredecessorsComplete"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.PredecessorsComplete.Evaluate(System.Object[])">
            <summary>
            Evaluates the macro using the specified arguments.
            </summary>
            <param name="args">The arguments. This macro requires one argument,
            the transition that owns it, and it must be of type <see cref="T:IPfcTransitionNode"/></param>
            <returns>
            The evaluated representation of the macro.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory">
            <summary>
            A participant dictionary is a dictionary of Expression Elements that is mapped by name and by
            Guid. Expressions are an array of references to these elements, and formatting of these expressions
            is achieved by taking some format of each expression element in sequence. There are three
            representations of these expressions - Rote Strings, Dual Mode Strings and Macros.
            It is in concatenating the particular (Hostile, Friendly, Expanded) formats of those elements
            that an expression expresses itself.<para></para>Note: the reason that guids are needed is to support
            serialization through the User-Hostile mapping, and to permit renaming of steps such as when a step
            is flattened up into its parent, and its name goes from, e.g. &quot;Prepare-Step&quot; to 
            &quot;B : Xfr_Liquid2.Prepare-Step&quot;.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.RegisterMacro(System.Type)">
            <summary>
            Registers a macro of the specified type, which must be an extender of the abstract class Macro.
            </summary>
            <param name="macroType">The type of the macro.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.RegisterMapping(System.String)">
            <summary>
            Registers a mapping of this string as a DualMode string, creating a Guid under which it will be mapped.
            This will be a string that represents a step or transition, and which is backed by a Guid so that the
            string can be changed (such as when a step is flattened up into its parent, and its name goes from, e.g.
            &quot;Prepare-Step&quot; to &quot;B : Xfr_Liquid2.Prepare-Step&quot;.
            </summary>
            <param name="name">The name that is to become a DualMode string.</param>
            <returns>The newly-created (or preexisting, if it was there already) dual mode string element.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.RegisterMapping(System.String,System.Guid)">
            <summary>
            Registers a mapping of this string as a DualMode string, mapped under the provided Guid.
            This will be a string that represents a step or transition, and which is backed by a Guid so that the
            string can be changed (such as when a step is flattened up into its parent, and its name goes from, e.g.
            "Prepare-Step" to "B : Xfr_Liquid2.Prepare-Step".
            </summary>
            <param name="name">The name that is to become a DualMode string.</param>
            <param name="guid">The guid by which this element is to be known.</param>
            <returns>
            The newly-created (or preexisting, if it was there already) dual mode string element.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.DeleteNameGuidPair(System.String,System.Guid)">
            <summary>
            Deletes the name GUID pair.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.ChangeGuid(System.Guid,System.Guid)">
            <summary>
            Changes the GUID of an expression element from one value to another. This is needed when an Operation 
            or OpStep remaps its child steps.
            </summary>
            <param name="from">The guid of the expression element that the caller wants to remap.</param>
            <param name="to">The guid to which the caller wants to remap the expression element.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.ChangeGuid(System.String,System.Guid)">
            <summary>
            Changes the GUID of an expression element from one value to another. This is needed when an Operation 
            or OpStep remaps its child steps.
            </summary>
            <param name="fromElementsName">The name of the expression element that the caller wants to remap.</param>
            <param name="to">The guid to which the caller wants to remap the expression element.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.ChangeName(System.String,System.String)">
            <summary>
            Changes the name of an expression element from one value to another.
            </summary>
            <param name="from">The name of the expression element that the caller wants to remap.</param>
            <param name="to">The name to which the caller wants to remap the expression element.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Item(System.String)">
            <summary>
            Gets the <see cref="T:ExpressionElement"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Parent">
            <summary>
            Gets or sets the parent participantDirectory to this one..
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:ExpressionElement"/> with the specified GUID.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Contains(System.String)">
            <summary>
            Determines whether this ParticipantDirectory contains the specified name.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <returns>
            	<c>true</c> if this ParticipantDirectory contains the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Contains(System.Guid)">
            <summary>
            Determines whether this ParticipantDirectory contains the specified guid.
            </summary>
            <param name="guid">The guid of the object-of-interest.</param>
            <returns>
            	<c>true</c> if this ParticipantDirectory contains the specified guid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ExpressionElements in the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ExpressionElements in the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory.Refresh(Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart)">
            <summary>
            Refreshes the Participant Directory to contain only the ExpressionElements in the specified PFC.
            Performed via a Mark-and-Sweep algorithm.
            </summary>
            <param name="pfc">The PFC.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.Expressions.Expression">
            <summary>
            An Expression is a class that contains a list of expression elements, a sequence of text snippets,
            references to things that have names (i.e. steps &amp; transitions), and macros. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Expression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Expression"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Expression.FromUf(System.String,Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory,System.Object)">
            <summary>
            Creates an Expression from a user-friendly representation of the expression. In that representation, 
            a macro is expressed with a leading &quot;'μ&quot;, as in 'μPreviousComplete' ...
            </summary>
            <param name="uf">Thr user-friendly representation of the expression from which it will be created.</param>
            <param name="directory">The directory into which the Expression Elements that are created from this
            representation will be stored.</param>
            <param name="owner">The owner of the expression - usually, the Transition to which it is attached.</param>
            <returns>The newly-created expression.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Expression.FromUh(System.String,Highpoint.Sage.Graphs.PFC.Expressions.ParticipantDirectory,System.Object)">
            <summary>
            Creates an Expression from a user-hostile representation of the expression. In that representation,
            we have guids and we have rote strings.
            </summary>
            <param name="uh">The user-hostile representation of the expression.</param>
            <param name="directory">The directory from which the Expression Elements that are referenced here by guid, come.</param>
            <param name="owner">The owner of the expression - usually, the Transition to which it is attached.</param>
            <returns>The newly-created expression.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Expression.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.Expressions.Expression.ToString(Highpoint.Sage.Graphs.PFC.Expressions.ExpressionType,System.Object)">
            <summary>
            Returns the string for this macro that corresponds to the indicated representation type.
            </summary>
            <param name="t">The indicated representation type.</param>
            <param name="forWhom">The owner of the macro, usually a Transition.</param>
            <returns>The string for this macro.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcElementFactory">
            <summary>
            An implementer of IPfcElementFactory is the factory from which the PfcElements are drawn when an
            IProcedureFunctionChart is creating an SfcElement such as a node, link or step.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.CreateStepNode(System.String,System.Guid,System.String)">
            <summary>
            Creates a step node with the provided characteristics.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcStepNode.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.NewStepNode(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.Guid,System.String)">
            <summary>
            Performs raw instantiation of a new step node.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.CreateTransitionNode(System.String,System.Guid,System.String)">
            <summary>
            Creates a transition node with the provided characteristics.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcTransitionNode.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.NewTransitionNode(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.Guid,System.String)">
            <summary>
            Performs raw instantiation of a new transition node.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.CreateLinkElement(System.String,System.Guid,System.String)">
            <summary>
            Creates a link element with the provided characteristics.
            </summary>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcLinkElement.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.NewLinkElement(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.Guid,System.String)">
            <summary>
            Performs raw instantiation of a new link element.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.Initialize(Highpoint.Sage.Graphs.PFC.IPfcStepNode)">
            <summary>
            Initializes the specified step node after it has been created.
            </summary>
            <param name="stepNode">The step node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.Initialize(Highpoint.Sage.Graphs.PFC.IPfcTransitionNode)">
            <summary>
            Initializes the specified transition node after it has been created.
            </summary>
            <param name="transitionNode">The transition node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.Initialize(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Initializes the specified link element after it has been created.
            </summary>
            <param name="linkElement">The link element.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.OnPfcLoadCompleted(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Called when the loading of a new PFC has been completed.
            </summary>
            <param name="newPfc">The new PFC.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.HostPfc">
            <summary>
            Gets the Procedure Function Chart for which this factory is creating elements.
            </summary>
            <value>The host PFC.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.GuidGenerator">
            <summary>
            Gets the GUID generator in use by this element factory.
            </summary>
            <value>The GUID generator.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.IsCanonicallyNamed(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Returns true if the name of this element conforms to the naming rules that this factory imposes.
            </summary>
            <param name="element">The element whose name is to be assessed.</param>
            <returns><c>true</c> if the name of this element conforms to the naming rules that this factory imposes; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElementFactory.Retract">
            <summary>
            Causes Step, Transition and Link naming cursors to retract to the sequentially-earliest
            name that is not currently assigned in the PFC. That is, if the next transition name to
            be assigned was T_044, and the otherwise-highest assigned name was T_025, the transition
            naming cursor would retract to T_026. The Step and Link cursors would likewise retract
            as a result of this call.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart">
            <summary>
            IProcedureFunctionChart is implemented by a type that provides overall management, including creation,
            running and modification of an SFC graph.
            <para></para><b>IMPORTANT NOTE: Any class implementing IProcedureFunctionChart must have a constructor
            that accepts a IProcedureFunctionChart, in order for serialization to work properly.</b>
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ElementFactory">
            <summary>
            Gets or sets the element factory in use by this ProcedureFunctionChart.
            </summary>
            <value>The element factory.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateLink">
            <summary>
            Creates a new link. It must later be bound to a predecessor and a successor.
            Throws an exception if the Guid is already known to this ProcedureFunctionChart.
            </summary>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateLink(System.String,System.String,System.Guid)">
            <summary>
            Creates a new link. It must later be bound to a predecessor and a successor.
            Throws an exception if the Guid is already known to this ProcedureFunctionChart.
            </summary>
            <param name="name">The name of the new link.</param>
            <param name="guid">The GUID of the new link.</param>
            <param name="description">The description of the new link.</param>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateLink(System.String,System.String,System.Guid,Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Creates a link with the specified name, guid, predecessor &amp; successor.
            </summary>
            <param name="name">The name of the new link.</param>
            <param name="description">The description of the new link.</param>
            <param name="guid">The GUID of the new link.</param>
            <param name="predecessor">The predecessor of the new link.</param>
            <param name="successor">The successor of the new link.</param>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateStep">
            <summary>
            Creates and adds a step with default information. Throws an exception if the Guid is already in use.
            </summary>
            <returns>The <see cref="T:IPfcStepNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateStep(System.String,System.String,System.Guid)">
            <summary>
            Creates and adds a step with the specified information. Throws an exception if the Guid is already in use.
            </summary>
            <param name="name">The name of the step.</param>
            <param name="description">The description of the step.</param>
            <param name="guid">The GUID of the step.</param>
            <returns>The <see cref="T:IPfcStepNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateTransition">
            <summary>
            Creates and adds a transition with default information. Throws an exception if the Guid is already in use.
            </summary>
            <returns>The <see cref="T:IPfcTransitionNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CreateTransition(System.String,System.String,System.Guid)">
            <summary>
            Creates and adds a transition with the specified information. Throws an exception if the Guid is already in use.
            </summary>
            <param name="name">Name of the transition.</param>
            <param name="description">The transition description.</param>
            <param name="guid">The transition GUID.</param>
            <returns>The <see cref="T:IPfcTransitionNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Binds the specified predecessor to the specified successor.
            </summary>
            <param name="predecessor">The predecessor.</param>
            <param name="successor">The successor.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcLinkElement,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the specified predecessor to the specified successor.
            </summary>
            <param name="predecessor">The predecessor.</param>
            <param name="successor">The successor.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the two nodes. If both are steps, it inserts a transition between them, and if both are 
            transitions, it inserts a step between them - in both cases, creating links between the 'from'
            node, the shim node, and the 'to' node. Piggybacking is allowed by default. Use the full-featured
            API to disallow piggybacking.
            </summary>
            <param name="from">The node from which a connection is being established.</param>
            <param name="to">The node to which a connection is being established.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement@,Highpoint.Sage.Graphs.PFC.IPfcNode@,Highpoint.Sage.Graphs.PFC.IPfcLinkElement@,System.Boolean)">
            <summary>
            Binds the two linkables. If both are steps, it inserts a transition between them, and if both are
            transitions, it inserts a step between them - in both cases, creating links between the 'from'
            node, the shim node, and the 'to' node. If piggybacking is allowed, and a suitable path already exists,
            we use that path instead. A suitable path is either a link between differently-typed nodes, or a
            link-node-link path between same-typed nodes, where the interstitial node is simple, and opposite-typed.
            </summary>
            <param name="from">The node from which a connection is being established.</param>
            <param name="to">The node to which a connection is being established.</param>
            <param name="iPfcLink1">The first link element.</param>
            <param name="shimNode">The shim node, if one was created.</param>
            <param name="iPfcLink2">The second link element, if one was created.</param>
            <param name="allowPiggybacking">if set to <c>true</c>, we allow an existing link to serve the purpose of this requested link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
             <summary>
             Unbinds the two nodes, removing the link between them. Returns false if they were
             not connected directly in the first place. If called directly by the user, this
             API can result in an illegal PFC graph.
             </summary>
             <param name="from">The upstream node of the unbinding.</param>
             <param name="to">The downstream node of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
             <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement,System.Boolean)">
             <summary>
             Unbinds the node from the link. Returns false if they were not
             connected directly in the first place. If called directly by
             the user, this API can result in an illegal PFC graph.
             </summary>
             <param name="from">The upstream node of the unbinding.</param>
             <param name="to">The downstream link of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
             <returns>True, if successful, otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcLinkElement,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
            <summary>
            Unbinds the link from the node. Returns false if they were not
            connected directly in the first place. If called directly by
            the user, this API can result in an illegal PFC graph.
            </summary>
            <param name="from">The upstream link of the unbinding.</param>
            <param name="to">The downstream node of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
            <returns>True, if successful, otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Delete(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Deletes the specified node and its pair (preceding Step if it is a transition,
            succeeding transition if it is a step).
            <list type="bullet">
            <item>If either member of the pair being deleted
            has more than one predecessor and one successor, the delete attempt will fail - these
            other paths need to be deleted themselves first.</item>
            <item>If neither node has multiple inputs
            or outputs, then they are both deleted, and a link is added from the transition
            preceding the deleted step to the step following the deleted transition.</item>
            <item>If the node to be deleted is not connected to anything on either end, then the node is
            simply removed from Pfc data structures.</item>
            </list> 
            </summary>
            <param name="node">The node.</param>
            <returns>True if the deletion was successful, false if it was not.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Synchronize(Highpoint.Sage.Graphs.PFC.IPfcNode[],Highpoint.Sage.Graphs.PFC.IPfcNode[])">
            <summary>
            Binds the inbound elements to the outbound elements through a synchronizer construct. All elements in
            both arrays must be the same type (either all Steps or all Transitions), and null or empty arrays are
            illegal.
            </summary>
            <param name="predecessors">The predecessor elements.</param>
            <param name="successors">The successor elements.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Synchronize(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.PfcNodeList)">
            <summary>
            Binds the inbound elements to the outbound elements through a synchronizer construct. Empty collections are illegal.
            </summary>
            <param name="inbound">The inbound elements.</param>
            <param name="outbound">The outbound elements.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ParticipantDirectory">
            <summary>
            A directory of participants in and below this Pfc, used in creation of expressions.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.LinkComparer">
            <summary>
            By default, this orders a node's downstream links' priorities and thereby graph ordinals as GOOBER
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Parent">
            <summary>
            Gets the parent step node for this SFC.
            </summary>
            <value>The parent step node.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Source">
            <summary>
            Gets the source PFC, if any, from which this PFC was cloned.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Edges">
            <summary>
            Gets all of the edges (links) under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The edges (links).</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Links">
            <summary>
            Gets all of the edges (links) under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The edges (links).</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Steps">
            <summary>
            Gets the steps under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Transitions">
            <summary>
            Gets the transitions under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Nodes">
            <summary>
            Gets all of the nodes (steps and transitions)under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Elements">
            <summary>
            Gets the elements contained directly in this Pfc.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.GetChildren(System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcElement},System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcElement}@)">
            <summary>
            Gets all of the elements that are contained in or under this Pfc, to a depth
            specified by the 'depth' parameter, and that pass the 'filter' criteria.
            </summary>
            <param name="depth">The depth to which retrieval is to be done.</param>
            <param name="filter">The filter predicate that dictates which elements are acceptable.</param>
            <param name="children">The children, treated as a return value.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ResumeNodeSorting">
            <summary>
            This is a performance enhancer - when making internal changes (i.e. changes that are a
            part of a larger process such as flattening a Pfc hierarchy), there is no point to doing
            node sorting on the entire graph, each time. So, prior to the start of the wholesale
            changes, suspend node sorting, and then resume once the changes are complete. Resuming
            also results in a call to UpdateStructure(...).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.SuspendNodeSorting">
            <summary>
            This is a performance enhancer - when making internal changes (i.e. changes that are a
            part of a larger process such as flattening a Pfc hierarchy), there is no point to doing
            node sorting on the entire graph, each time. So, prior to the start of the wholesale
            changes, suspend node sorting, and then resume once the changes are complete. Resuming
            also results in a call to UpdateStructure(...).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.UpdateStructure(System.Boolean)">
            <summary>
            Updates the structure of the PFC and sorts outbound links per their priority then their textual names, then
            their guids. Then does a breadth-first traversal, assigning nodes a sequence number. Finally sorts node lists
            per their sequence numbers. Loop breaking then can occur between the node with the higher sequence number and
            the *following* node with the lower number. This way, loop-break always occurs at the intuitively-correct place.
            </summary>
            <param name="breadthFirstOrdinalNumbers">if set to <c>false</c> assigns ordinals in a depth-first order.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ToXmlString">
            <summary>
            Creates an XML string representation of this Pfc.
            </summary>
            <returns>The newly-created Xml string.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.FindNode(System.String)">
            <summary>
            Finds the node at the specified path from this location. Currently, works only absolutely from this PFC.
            <para></para>
            </summary>
            <param name="path">The path (e.g. ParentName/ChildName).</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.FindFirst(System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Finds the first node for which the predicate returns true.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.FindAll(System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Retrieves a depth-first iterator over all nodes in this PFC that satisfy the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.DepthFirstIterator">
            <summary>
            Retrieves a depth-first iterator over all nodes in this PFC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Flatten">
            <summary>
            Transmogrifies this PFC and all of its child PFCs (the actions associated with steps)
            into one flat PFC with no children. Steps that had children are replaced by their
            children, inserted inline into the parents' PFC structure, in place of the parent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.GetStartSteps">
            <summary>
            Gets the start steps in this ProcedureFunctionChart.
            </summary>
            <returns>The start steps.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.GetFinishSteps">
            <summary>
            Gets the finish steps in this ProcedureFunctionChart.
            </summary>
            <returns>The finish steps.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.GetFinishTransition">
            <summary>
            Gets the finish transition in this ProcedureFunctionChart.
            </summary>
            <returns>The finish transition.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.AddElement(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Adds the element to the PFC.
            </summary>
            <param name="element">The element to be added to the PFC.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.GetCleanGuidMap(System.Boolean)">
            <summary>
            Gets a list of NewGuidHolder objects. After obtaining this list, go through it
            and for each NewGuidHolder, inspect the target object, determine the new Guid to
            be applied, and set it into the newGuidHolder.NewGuid property. After this, the
            entire list must be submitted to the ApplyGuidMap(myNewGuidHolderList); API, and
            the new guids will be applied.<para>
            </para>
            <B>Do not simply set the Guids on the objects.</B>
            If, after setting a new guid, you want not to change the object's guid, you can
            set it to NewGuidHolder.NO_CHANGE, a special guid that causes the engine to skip
            that object in the remapping of guids.
            </summary>
            <param name="deep">If true, steps' Action Pfc's will return their elements' guids, too.</param>
            <returns>A list of NewGuidHolder objects associated with the IPfcElements in this Pfc.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ApplyGuidMap(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder})">
            <summary>
            Applies the GUID map.
            </summary>
            <param name="newGuidHolders">The list of NewGuidHolders that serves as a new GUID map.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.CollapseParticipantDirectories(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Recursively collapses childrens' participant directories into the parent, renaming the
            absorbed child elements and Steps as necessary. Only the rootChart's ParticipantDirectory
            is left in existence. All others point up to the root.
            </summary>
            <param name="rootChart">The root chart.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Reduce">
            <summary>
            Reduces this procedure function chart, applying reduction rules until the PFC is no longer reduceable.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.LookForwardForNodesOnPathEndingAt(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcNode}@)">
            <summary>
            Looks forward from the node for nodes on path ending at the finish node.
            </summary>
            <param name="finish">The finish.</param>
            <param name="node">The node.</param>
            <param name="deletees">The deletees.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.ApplyNamingCosmetics">
            <summary>
            Applies the naming cosmetics appropriate for the type of recipe being generated. This is currently
            hard-coded, and performs naming of transitions to T_001, T_002, ... T_00n, and null steps to 
            NULL_UP:0, NULL_UP:1, ... NULL_UP:n.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.Run(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Runs the PFC under control of the specified executive.
            </summary>
            <param name="exec">The exec.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.PfcStartRequested">
            <summary>
            Occurs when PFC start requested, but before permission has been obtained to do so.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.PfcStarting">
            <summary>
            Occurs when PFC is starting.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart.PfcCompleting">
            <summary>
            Occurs when PFC is completing.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcElement">
            <summary>
            Implemented by any entity (Links, Steps and Transitions) that participates
            in the structure of a ProcedureFunctionChart.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElement.SetName(System.String)">
            <summary>
            Sets (re-sets) the name of this element.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElement.ElementType">
            <summary>
            Gets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElement.Parent">
            <summary>
            The parent ProcedureFunctionChart of this node.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElement.UserData">
            <summary>
            Gets or sets some piece of arbitrary user data. This data is (currently) not serialized.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElement.UpdateStructure">
            <summary>
            Updates the portion of the structure of the SFC that relates to this element.
            This is called after any structural changes in the Sfc, but before the resultant data
            are requested externally.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcElement.IsConnected">
            <summary>
            Determines whether this instance is connected to anything upstream or downstream.
            </summary>
            <returns>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcElement.SEID">
            <summary>
            Gets the SEID, or Source Element ID of this element. If the PFC of which 
            this element is a member is cloned, then this SEID will be the Guid of the element
            in the source PFC that is semantically/structurally equivalent to this one.
            </summary>
            <value>The SEID.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcLinkElement">
            <summary>
            Implemented by an object that is an SFC SfcLink.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.Predecessor">
            <summary>
            Gets the predecessor IPfcNode to this Link node.
            </summary>
            <value>The predecessor.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.Successor">
            <summary>
            Gets the successor IPfcNode to this Link node.
            </summary>
            <value>The successor.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.Priority">
            <summary>
            Gets or sets the priority of this link. The higher the number representing a 
            link among its peers, the higher priority it has. The highest-priority link is said
            to define the 'primary' path through the graph. Default priority is 0.
            </summary>
            <value>The priority of the link.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.IsLoopback">
            <summary>
            Gets or sets a value indicating whether this link creates a loopback along one or more paths.
            </summary>
            <value>
            	<c>true</c> if this instance is a loopback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.Detach">
            <summary>
            Detaches this link from its predecessor and successor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcLinkElement.AggregateLinkType">
            <summary>
            A PfcLink is a part of one of these types of aggregate links, depending on the type of its predecessor
            or successor, and the number of (a) successors its predecessor has, and (b) predecessors its successor has.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcNode">
            <summary>
            Implemented by anything that can be a node in an SFC graph. This includes steps and transitions.
            Nodes are connected to Links as their predecessor &amp; successors.
            Links such as ParallelConvergentLinks and SeriesDivergentLinks have multiple predecessors or
            successors, and their logic to fire or not is dependent upon input steps' or transitions' states.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.StructureDirty">
            <summary>
            Gets or sets a value indicating whether the structure of this SFC is dirty (in effect, whether it has changed since
            consolidation was last done.
            </summary>
            <value><c>true</c> if [structure dirty]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.Predecessors">
            <summary>
            Gets the predecessor list for this node.
            </summary>
            <value>A list of the predecessor links.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.PredecessorNodes">
            <summary>
            Gets the predecessor nodes list for this node. The list contains all nodes at the other end of links that are
            predecessors of this node.
            </summary>
            <value>A list of the predecessor nodes.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.AddPredecessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Adds the new predecessor link to this node's list of predecessors.
            </summary>
            <param name="newPredecessor">The new predecessor link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.RemovePredecessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Removes the predecessor link from this node's list of predecessors.
            </summary>
            <param name="currentPredecessor">The current predecessor.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.Successors">
            <summary>
            Gets the successor list for this node.
            </summary>
            <value>A list of the successor links.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.SuccessorNodes">
            <summary>
            Gets the successor nodes list for this node. The list contains all nodes at the other end of links that are
            successors of this node.
            </summary>
            <value>A list of the successor nodes.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.AddSuccessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Adds the new successor link to this node's list of successors.
            </summary>
            <param name="newSuccessor">The new successor link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.RemoveSuccessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Removes the successor link from this node's list of successors.
            </summary>
            <param name="currentSuccessor">The current successor.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.GetLinkForSuccessorNode(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the link that connects this node to a successor node. Returns null if there is no such link.
            </summary>
            <param name="successorNode">The successor node.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.GetLinkForPredecessorNode(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the link that connects this node to a predecessor node. Returns null if there is no such link.
            </summary>
            <param name="predecessorNode">The predecessor node.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.SetLinkHighestPriority(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Gives the specified link (which must be one of the outbound links from this node) the highest 
            priority of all links outbound from this node. Retuens false if the specified link is not a 
            successor link to this node. NOTE: This API will renumber the outbound links' priorities.
            </summary>
            <param name="outbound">The link, already in existence and an outbound link from this node, that 
            is to be set to the highest priority of all links already outbound from this node.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNode.SetLinkLowestPriority(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Gives the specified link (which must be one of the outbound links from this node) the lowest 
            priority of all links outbound from this node. Retuens false if the specified link is not a 
            successor link to this node. NOTE: This API will renumber the outbound links' priorities.
            </summary>
            <param name="outbound">The link, already in existence and an outbound link from this node, that 
            is to be set to the lowest priority of all links already outbound from this node.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.GraphOrdinal">
            <summary>
            Gets or sets the graph ordinal of this node - a number that roughly (but consistently)
            represents its place in the execution order for this graph. Loopbacks' ordinals indicate
            their place in the execution order as of their first execution.
            </summary>
            <value>The graph ordinal.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.IsSimple">
            <summary>
            Gets a value indicating whether this instance is simple. A node is simple if it 
            has one input and one output and performs no tasks beyond a pass-through.
            </summary>
            <value><c>true</c> if this instance is simple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.IsNullNode">
            <summary>
            Gets a value indicating whether this instance is null. A node that is null can be
            eliminated when PFCs are combined.
            </summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.NodeColor">
            <summary>
            Used by a variety of graph analysis algorithms.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.IsStartNode">
            <summary>
            Gets a value indicating whether this instance is a start node.
            </summary>
            <value>
            	<c>true</c> if this instance is a start node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.IsFinishNode">
            <summary>
            Gets a value indicating whether this instance is a finish node.
            </summary>
            <value>
            	<c>true</c> if this instance is a finish node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcNode.GraphicsData">
            <summary>
            A string dictionary containing name/value pairs that represent graphics &amp; layout-related values.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcAction">
            <summary>
            The signature of a method that a PFC Step can call as an action.
            </summary>
            <param name="pfcec">A PfcExecutionContext containing the parameters to be used by this call.</param>
            <param name="ssm">The state machine controlling state of the step to which this action belongs.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcStepNode">
            <summary>
            Implemented by an object that is an SFC SfcStep.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.Find(System.String)">
            <summary>
            Finds the child node, if any, at the specified path relative to this node.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.GetChildren(System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcElement},System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcElement}@)">
            <summary>
            Gets all of the elements that are contained in or under this Pfc, to a depth
            specified by the 'depth' parameter, and that pass the 'filter' criteria.
            </summary>
            <param name="depth">The depth to which retrieval is to be done.</param>
            <param name="filter">The filter predicate that dictates which elements are acceptable.</param>
            <param name="children">The children, treated as a return value.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.Actions">
            <summary>
            Gets the actions associated with this PFC Step. They are keyed by ActionName, and are themselves, PFCs.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.AddAction(System.String,Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Adds a child Pfc into the actions list under this step.
            </summary>
            <param name="actionName">The name of this action.</param>
            <param name="pfc">The Pfc that contains procedural details of this action.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.LeafLevelAction">
            <summary>
            The executable action that will be performed if there are no PFCs under this step. By default, it will
            run the child Action PFCs in parallel, if there are any, and will return immediately if there are not.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.SetActor(Highpoint.Sage.Graphs.PFC.Execution.PfcActor)">
            <summary>
            Sets the Actor that will determine the behavior behind this step. The actor provides the leaf level
            action, as well as preconditiond for running.
            </summary>
            <param name="actor">The actor that will provide the behaviors.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.MyStepStateMachine">
            <summary>
            Gets the step state machine associated with this PFC step.
            </summary>
            <value>My step state machine.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.ToProcedureFunctionChart">
            <summary>
            Returns the actions under this Step as a procedure function chart.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.UnitInfo">
            <summary>
            Gets key data on the unit with which this step is associated. Note that a step, such as a
            recipe start step, or one added without such data, may not hold any unit data at all. In this case,
            the UnitInfo property will be null.
            </summary>
            <value>The unit info.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.RecipeSourceGuid">
            <summary>
            Returns the Guid of the element in the source recipe that is represented by this PfcStep.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.EarliestStart">
            <summary>
            Gets or sets the earliest time that this element can start.
            </summary>
            <value>The earliest start.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcStepNode.GetPermissionToStart(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext,Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine)">
            <summary>
            Gets permission from the step to start.
            </summary>
            <param name="myPfcec">My pfcec.</param>
            <param name="ssm">The StepStateMachine that will govern this run.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcStepNode.Precondition">
            <summary>
            Gets or sets the precondition under which this step is permitted to start. If null, permission is assumed.
            </summary>
            <value>The precondition.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcUnitInfo">
            <summary>
            Holds key data on the unit with which a specific step is associated.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcUnitInfo.Name">
            <summary>
            The name of the unit with which a step is associated.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcUnitInfo.SequenceNumber">
            <summary>
            The sequence number of the unit with which a step is associated.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode">
            <summary>
            Implemented by an object that is an SfcTransition.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.Expression">
            <summary>
            Gets the expression that is attached to this transition node.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.ExpressionUFValue">
            <summary>
            Gets or sets the 'user-friendly' value of this expression. Uses step names and macro names.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.ExpressionUHValue">
            <summary>
            Gets or sets the 'user-hostile' value of this expression. Uses guids in place of names.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.ExpressionExpandedValue">
            <summary>
            Gets the expanded value of this expression. Uses step names and expands macro names into their resultant names.
            </summary>
            <value>The expression expanded.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.ExpressionExecutable">
            <summary>
            Gets or sets the default executable condition, that is the executable condition that this transition will
            evaluate unless overridden in the execution manager.
            </summary>
            <value>The default executable condition.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcTransitionNode.MyTransitionStateMachine">
            <summary>
            Gets the transition state machine associated with this PFC transition.
            </summary>
            <value>My step state machine.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.AggregateLinkType">
            <summary>
            A PfcLink is a part of one of these types of aggregate links, depending on the type of its predecessor
            or successor, and the number of (a) successors its predecessor has, and (b) predecessors its successor has.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcPortDirection">
            <summary>
            Declares whether a port is an input port or an output port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcNodeFilter">
            <summary>
            Implemented by an object that filters SFC Nodes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.IPfcNodeFilter.IsAcceptable(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is acceptable to be used by whomever is employing the filter.
            </summary>
            <param name="element">The element under consideration.</param>
            <returns>
            	<c>true</c> if the specified element is acceptable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcExpression`1">
            <summary>
            An interface implemented by anything in an SFC that is to be evaluated as an expression.
            </summary>
            <typeparam name="T">The return type of the expression.</typeparam>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.IPfcBooleanExpression">
            <summary>
            An interface implemented by anything in an SFC that is to be evaluated as an expression that returns a boolean.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcBooleanExpression.Lhs">
            <summary>
            Gets the left hand side of the boolean expression.
            </summary>
            <value>The left hand side of the boolean expression..</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.IPfcBooleanExpression.Rhs">
            <summary>
            Gets the right hand side of the boolean expression.
            </summary>
            <value>The right hand side of the boolean expression..</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.OperationType">
            <summary>
            The types of operations permitted by this operation type.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.Equal">
            <summary>
            True if the LHS equals the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.NotEqual">
            <summary>
            True if the LHS does not equal the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.In">
            <summary>
            True if the LHS is an element of the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.NotIn">
            <summary>
            True if the LHS is not an element of the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.Exists">
            <summary>
            True if Mike tells me what it means :-)
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.NotExists">
            <summary>
            True if Mike tells me what it means :-)
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.GreaterThan">
            <summary>
            True if the LHS is greater than the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.GreaterThanOrEqual">
            <summary>
            True if the LHS is greater than or equal to the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.LessThan">
            <summary>
            True if the LHS is less than the RHS.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.OperationType.LessThanOrEqual">
            <summary>
            True if the LHS is less than or equal to the RHS.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.Predecessor">
            <summary>
            Gets the predecessor IPfcNode to this Link node.
            </summary>
            <value>The predecessor.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.Successor">
            <summary>
            Gets the successor IPfcNode to this Link node.
            </summary>
            <value>The successor.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.Priority">
            <summary>
            Gets or sets the priority of this link. The higher the number representing a
            link among its peers, the higher priority it has. The highest-priority link is said
            to define the 'primary' path through the graph. Default priority is 0.
            </summary>
            <value>The priority of the link.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.IsLoopback">
            <summary>
            Gets or sets a value indicating whether this link creates a loopback along one or more paths.
            </summary>
            <value>
            	<c>true</c> if this instance is a loopback; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLink.Detach">
            <summary>
            Detaches this link from its predecessor and successor.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLink.Reset">
            <summary>
            Resets this instance. Performed in a run-time context.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLink.UpdateStructure">
            <summary>
            Updates the portion of the structure of the SFC that relates to this element.
            This is called after any structural changes in the Sfc, but before the resultant data
            are requested externally.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcLink.IsConnected">
            <summary>
            Determines whether this instance is connected to anything upstream or downstream.
            </summary>
            <returns>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.AggregateLinkType">
            <summary>
            A PfcLink is a part of one of these types of aggregate links, depending on the type of its predecessor
            or successor, and the number of (a) successors its predecessor has, and (b) predecessors its successor has.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcLink.ElementType">
            <summary>
            Gets the type of this element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcLink.LinkComparer">
            <summary>
            Class LinkComparer orders links first by priority (default is zero) then by predecessor name, then by Guid. 
            (Using Guid is a last resort to ensure repeatability.)
            </summary>
            <seealso cref="T:Highpoint.Sage.Graphs.PFC.IPfcLinkElement" />
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcStructureViolationException">
            <summary>
            StructureViolationException is thrown when a Sequential Function Chart is has just undergone an illegal change in structure.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStructureViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStructureViolationException.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStructureViolationException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStructureViolationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcAnalyst">
            <summary>
            The PfcAnalyst is a static class that provides analytical helper methods.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsPostTransitionLink(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Determines whether the specified link is preceded by a transition.
            </summary>
            <param name="link">The specified link.</param>
            <returns>
            	<c>true</c> if the specified link is preceded by a transition.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsPreTransitionLink(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Determines whether the specified link is followed by a transition.
            </summary>
            <param name="link">The specified link.</param>
            <returns>
            	<c>true</c> if the specified link is followed by a transition.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsSoleSuccessor(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is the sole successor of its immediate precedent node. If immediate predecessor is
            null, this method returns false.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified link is the sole successor of its one immediate precedent node; otherwise, (if there
            are any number of predecessors other than one, or if the one predecessor node has any number but one successor nodes)<c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.HasParallelPaths(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is a part of a path that has parallel paths. This algorithm
            goes up only one level - that is, if it's part of a series divergence that, itself, is in a path that
            is part of a parallel divergence, then the result will still be false.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified element is a part of a path that has parallel paths; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.HasAlternatePaths(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is a part of a path that has alternate paths. This algorithm
            goes up only one level - that is, if it's part of a parallel divergence that, itself, is in a path that
            is part of a series divergence, then the result will still be false.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified element is a part of a path that has parallel paths; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsLastElementOnPath(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is the last element on a path. That is, if deletion of this
            element (and its preceding and following links) would not leave dead-end nodes in the graph, it is considered
            to be the last element in the path.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified element is the last element on a path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsLastElementOnAlternatePath(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is the last element on a path, and that path is an alternate path.
            That is, if deletion of this element (and its preceding and following links) would not leave dead-end nodes
            in the graph, it is considered to be the last element in the path.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified element is the last element on an alternate path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.IsLastElementOnParallelPath(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Determines whether the specified element is the last element on a path, and that path is a parallel path.
            That is, if deletion of this element (and its preceding and following links) would not leave dead-end nodes
            in the graph, it is considered to be the last element in the path.
            </summary>
            <param name="element">The specified element.</param>
            <returns>
            	<c>true</c> if the specified element is the last element on a parallel path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetConvergenceNodeFor(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the convergence node (step or transtion) for the specified divergence node. This assumes
            that outbound paths all diverged at the same node, and will converge at the same node as well.
            </summary>
            <param name="divergenceNode">The divergence node.</param>
            <returns>The convergence node, if this node is a divergence node, otherwise null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetDivergenceNodeFor(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the divergence node (step or transtion) for the specified convergence node. This assumes
            that outbound paths all diverged at the same node, and will converge at the same node as well.
            </summary>
            <param name="convergenceNode">The convergence node.</param>
            <returns>
            The join node, if the provided node is a convergence node, otherwise null.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetJoinNodeForAlternatePaths(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Gets the join step that brings the path of the specified element and any parallel alternate paths together.
            If the specified node is not a member of a path with alternates, then this method returns null.
            </summary>
            <param name="element">The specified element.</param>
            <returns>The join element, if any - otherwise, null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetJoinTransitionForSimultaneousPaths(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Gets the join transition that brings the path of the specified element and any parallel simultaneous paths together.
            If the specified node is not a member of a path with simultaneous paths, then this method returns null.
            </summary>
            <param name="element">The specified element.</param>
            <returns>The join transition, if any - otherwise, null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetJoinNodeForParallelPath(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Gets the join element that brings the path of the specified element and any parallel paths (whether from series
            or parallel divergences) together. If the specified node is not a member of a path with simultaneous paths, then
            this method returns null.
            </summary>
            <param name="element">The specified element.</param>
            <returns>The join element, if any - otherwise, null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetDivergenceElementForParallelPath(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Gets the divergence element where the path of the specified element and any parallel paths (whether from series
            or parallel) diverge. If the specified node is not a member of a path with simultaneous paths, then
            this method returns null.
            </summary>
            <param name="element">The specified element.</param>
            <returns>The join element, if any - otherwise, null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetPermissibleTargetsForLinkFrom(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets a list of the nodes to which this node (the origin parameter) may link and retain a legal PFC structure.
            </summary>
            <param name="origin">The origin.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetStartStep(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Gets the start step from the provided PFC.
            </summary>
            <param name="pfc">The PFC.</param>
            <returns>The start step.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetFinishStep(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Gets the finish step from the provided PFC. Assumes that there is only one.
            </summary>
            <param name="pfc">The PFC.</param>
            <returns>The finish step.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetPrimaryPath(Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
            <summary>
            Gets the primary path forward from the provided starting point node. The primary path is
            the path that is comprised of all of the highest-priority links out of each node encountered.
            </summary>
            <param name="startPoint">The starting point.</param>
            <param name="stepsOnly">if set to <c>true</c> it returns steps only. Otherwise, it returns all nodes.</param>
            <returns>The primary path.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetPrimaryPathAsString(Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
            <summary>
            Gets the primary path forward from the provided starting point node. The primary path is
            the path that is comprised on all of the highest-priority links out of each node encountered.
            This path consists of
            </summary>
            <param name="startPoint">The starting point.</param>
            <param name="stepsOnly">if set to <c>true</c> it returns steps only. Otherwise, it returns all nodes.</param>
            <returns>The primary path as a string.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetTransitionToStepMappings(Highpoint.Sage.Graphs.PFC.PfcNodeList,System.Boolean)">
            <summary>
            Creates a dictionary of transition to step mappings, such that by using this.Values, one can obtain steps
            that are recognizable to the user, and by using this[usersStepChoice], one can obtain the original transition.
            </summary>
            <param name="transitions">The IPfcNodeList that contains the transitions that govern the desired behaviors.</param>
            <param name="precedingStep">if set to <c>true</c> returns a preceding step of the transition, if false, a following step.</param>
            <returns>A dictionary of Step-to-Transition mappings.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetZeroDepthSuccessors(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Gets the 'from' node's successors that are at the same depth that the 'from' node is at. Depth 
            increases when a path enters a parallel divergence, and decreases when it exits that divergence.
            Traversal terminates when it encounters a node it has encountered before - therefore, a way of 
            bounding the traversal is to add the terminal nodes into the 'beenThere' list before making the 
            initial call.
            </summary>
            <param name="beenThere">A list of the nodes already encountered in this traversal.</param>
            <param name="retval">The list of nodes that are zero-depth peers of the initial 'from' node.</param>
            <param name="from">The current 'from' node. This is the traversal node.</param>
            <param name="depth">The current traversal depth.</param>
            <param name="nodeFilter">The node filter - applied to all zero-depth nodes to see if they are
            acceptable to add to the retval list.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetZeroDepthPredecessors(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Gets the 'from' node's predecessors that are at the same depth that the 'from' node is at. Depth 
            increases when a path enters a parallel divergence, and decreases when it exits that divergence.
            Traversal terminates when it encounters a node it has encountered before - therefore, a way of 
            bounding the traversal is to add the terminal nodes into the 'beenThere' list before making the 
            initial call.
            </summary>
            <param name="beenThere">A list of the nodes already encountered in this traversal.</param>
            <param name="retval">The list of nodes that are zero-depth peers of the initial 'from' node.</param>
            <param name="from">The current 'from' node. This is the traversal node.</param>
            <param name="depth">The current traversal depth.</param>
            <param name="nodeFilter">The node filter - applied to all zero-depth nodes to see if they are
            acceptable to add to the retval list.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcAnalyst.GetNodesOnPriorityPath(Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart)">
            <summary>
            Gets the nodes on the already-established priority path. At a branch, the link with the highest priority
            is followed.
            </summary>
            <param name="pfc">The PFC.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcDiagnostics.PfcDiagnosticReport(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Gets the SFC's diagnostic report.
            </summary>
            <param name="pfc">The ProcedureFunctionChart to be reported on.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcDiagnostics.PfcSummaryInfo(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Gets the PFC's summary info in string format.
            </summary>
            <param name="pfc">The pfc.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PfcElement"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:PfcElement"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name of this node.</param>
            <param name="description">The description for this node.</param>
            <param name="guid">The GUID of this node.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.SetName(System.String)">
            <summary>
            Sets the name of this step node to the new value.
            </summary>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.IsConnected">
            <summary>
            Determines whether this instance is connected to anything upstream or downstream.
            </summary>
            <returns>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.Parent">
            <summary>
            The parent ProcedureFunctionChart of this node.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.SEID">
            <summary>
            Gets the SEID, or Source Element ID of this element. If the PFC of which
            this element is a member is cloned, then this SEID will be the Guid of the element
            in the source PFC that is semantically/structurally equivalent to this one.
            </summary>
            <value>The SEID.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.ElementType">
            <summary>
            Gets the type of this element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.UpdateStructure">
            <summary>
            Updates the portion of the structure of the SFC that relates to this element.
            This is called after any structural changes in the Sfc, but before the resultant data
            are requested externally.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.UserData">
            <summary>
            Gets or sets some piece of arbitrary user data. This data is (currently) not serialized.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.Model">
            <summary>
            The model that owns this SfcStep, or from which it gets time, etc. data.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.Name">
            <summary>
            The user-friendly name for this SfcStep. Required to be unique if there is a Participant directory listing
            this element - which there will be, if the element is attached to a Pfc.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.Guid">
            <summary>
            The Guid for this SfcStep. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElement.Description">
            <summary>
            The description for this SfcStep. Typically used for human-readable representations.
            </summary>
            <value>The SfcStep's description.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model in which the task runs.</param>
            <param name="name">The name of the task.</param>
            <param name="description">The description of the task.</param>
            <param name="guid">The GUID of the task.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElement.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.NodeColor">
            <summary>
            Enum NodeColor is used for various graph analysis algorithms. One such declares
            Black, unvisited,  Gray, partially visited and White, fully visited.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PfcNode"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:PfcNode"/> class.
            </summary>
            <param name="parent">The PFC this step runs as a part of.</param>
            <param name="name">The name of this step.</param>
            <param name="description">The description for this step.</param>
            <param name="guid">The GUID of this step.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.IsSimple">
            <summary>
            Gets a value indicating whether this instance is simple. A node is simple if it
            has one input and one output and performs no tasks beyond a pass-through. In the case
            of a Step, a Simple step is a Null step. This also facilitates graph reduction.
            </summary>
            <value><c>true</c> if this instance is simple; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.IsNullNode">
            <summary>
            Gets a value indicating whether this instance is null. A node that is null can be
            eliminated when PFCs are combined.
            </summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.EarliestStart">
            <summary>
            Gets or sets the earliest time that this element can start.
            </summary>
            <value>The earliest start.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.IsStartNode">
            <summary>
            Gets a value indicating whether this instance is start node.
            </summary>
            <value>
            	<c>true</c> if this instance is start node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.IsFinishNode">
            <summary>
            Gets a value indicating whether this instance is finish node.
            </summary>
            <value>
            	<c>true</c> if this instance is finish node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.GraphicsData">
            <summary>
            A string dictionary containing name/value pairs that represent graphics &amp; layout-related values.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.IsConnected">
            <summary>
            Determines whether this instance is connected to anything upstream or downstream.
            </summary>
            <returns>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.UpdateStructure">
            <summary>
            Updates the portion of the structure of the SFC that relates to this element.
            This is called after any structural changes in the Sfc, but before the resultant data
            are requested externally.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.GraphOrdinal">
            <summary>
            Gets or sets the graph ordinal of this node - a number that roughly (but consistently)
            represents its place in the execution order for this graph. Loopbacks' ordinals indicate
            their place in the execution order as of their first execution.
            </summary>
            <value>The graph ordinal.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.GetLinkForSuccessorNode(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the link that connects this node to a successor node. Returns null if there is no such link.
            </summary>
            <param name="successorNode">The successor.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.GetLinkForPredecessorNode(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the link that connects this node to a predecessor node. Returns null if there is no such link.
            </summary>
            <param name="predecessorNode">The predecessor.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.SetLinkHighestPriority(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Gives the specified link (which must be one of the outbound links from this node) the highest
            priority of all links outbound from this node. Retuens false if the specified link is not a
            successor link to this node. NOTE: This API will renumber the outbound links' priorities.
            </summary>
            <param name="outbound">The link, already in existence and an outbound link from this node, that
            is to be set to the highest priority of all links already outbound from this node.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.SetLinkLowestPriority(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Gives the specified link (which must be one of the outbound links from this node) the lowest
            priority of all links outbound from this node. Retuens false if the specified link is not a
            successor link to this node. NOTE: This API will renumber the outbound links' priorities.
            </summary>
            <param name="outbound">The link, already in existence and an outbound link from this node, that
            is to be set to the lowest priority of all links already outbound from this node.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.Reset">
            <summary>
            Resets this instance. Used at, or pertaining to, runtime execution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.StructureDirty">
            <summary>
            Gets or sets a value indicating whether the structure of this SFC is dirty (in effect, whether it has changed since
            consolidation was last done.
            </summary>
            <value><c>true</c> if [structure dirty]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.Predecessors">
            <summary>
            Gets the predecessor list for this node.
            </summary>
            <value>The predecessor link.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.AddPredecessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Adds the new predecessor link to this node's list of predecessors.
            </summary>
            <param name="newPredecessor">The new predecessor link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.RemovePredecessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Removes the predecessor link from this node's list of predecessors.
            </summary>
            <param name="currentPredecessor">The current predecessor.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.Successors">
            <summary>
            Gets the successor list for this node. Do not modify this list.
            </summary>
            <value>A list of the successor links.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.PredecessorNodes">
            <summary>
            Gets the predecessor node list for this node.
            </summary>
            <value>A list of the nodes at the other end of this node's predecessors (which are all links).</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcNode.SuccessorNodes">
            <summary>
            Gets the successor list for this node. Do not modify this list.
            </summary>
            <value>A list of the nodes at the other end of this node's predecessors (which are all links).</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.AddSuccessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Adds the new successor link to this node's list of successors.
            </summary>
            <param name="newSuccessor">The new successor link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.ResortSuccessorLinks">
            <summary>
            Resorts the successor links according to their priorities.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcNode.RemoveSuccessor(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Removes the successor link from this node's list of successors.
            </summary>
            <param name="currentSuccessor">The current successor.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcValidator.Validate">
            <summary>
            Validates the PFC in this instance, and sets (MUST SET) the m_pfcIsValid to true or false.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcValidator.Dequeue">
            <summary>
            Dequeues and sets up for evaluation, the active path.
            </summary>
            <returns>IPfcNode.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcValidator.AllBackwardPathsContain(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Determines whether all backward paths from 'from' contain the node 'target.' If they do,
            and it is the first such encounter for a specific 'from' then it may be said that target
            is the divergence node for 'from.'
            </summary>
            <param name="from">From.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcValidator.OnProcessingSequence(Highpoint.Sage.Graphs.PFC.PfcValidator.QueueData,Highpoint.Sage.Graphs.PFC.PfcValidator.QueueData)">
            <summary>
            </summary>
            <param name="q1">The q1.</param>
            <param name="q2">The q2.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcValidator.PfcValidationError.NamesOfSubjectsNeighborNodes(System.Int32,Highpoint.Sage.Graphs.PFC.PfcValidator.PfcValidationError.NodeDiscriminator)">
            <summary>
            Nameses the of subjects neighbor nodes.
            </summary>
            <param name="distanceLimit">The distance limit - only go this far forward or back, searching for nodes.</param>
            <param name="discriminator">The discriminator. Takes an integer,</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcValidator.DependencyGraph">
            <summary>
            Not used. Kept b/c the concept is useful.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC._PfcValidator.IReductionRule.Initialize(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC._PfcValidator.ProxyNode})">
            <summary>
            Initializes the rule in reference to the specified graph.
            </summary>
            <param name="graph">The graph.</param>
            <returns>True if the graph is legal. If false, the engine will halt immediately.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC._PfcValidator.IReductionRule.Reduce(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC._PfcValidator.ProxyNode})">
            <summary>
            Reduces the specified graph, if possible, according to the rule.
            </summary>
            <param name="graph">The graph.</param>
            <returns>True if reduction was possible.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC._PfcValidator.IReductionRule.StillValid(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC._PfcValidator.ProxyNode})">
            <summary>
            Indicates if the graph is still valid. This is run after each reduction cycle.
            </summary>
            <param name="graph">The graph.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC._PfcValidator.ReductionRuleBase.CondenseList(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC._PfcValidator.ProxyNode})">
            <summary>
            Condenses the list by removing orphaned nodes.
            </summary>
            <param name="graph">The graph.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.RequiredStartStepReductionRule">
            <summary>
            Returns true if the PFC has a start step. No reduction is performed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.SequentialityReductionRule">
            <summary>
            On initialization, looks for duality violations (node has multiple successors,
            and one of them has multiple predecessors.) TODO: Remove this, as it exists
            already in the DualityLinkReductionRule below.
            During reduction, looks for nodes with only one predecessor and one successor,
            and removes those nodes, tying the predecessor to the successor.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.TerminalnessReductionRule">
            <summary>
            Terminal-node variant of sequentiality rule.
            If I am a terminal node, I can be removed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.ClosednessReductionRule">
            <summary>
            Removes duplicate same-direction links between a predecessor and a successor.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.SecondOrderClosednessReductionRule">
            <summary>
            Removes duplicate same-direction links between a predecessor and a successor.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.NotInUseAdjacencyReductionRule">
            <summary>
            If A is followed by B and B is preceded only by A, and followed by C, D &amp; E,
            then we remove B, and add C, D &amp; E as successors to A.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.AdjacencyReductionRule">
            <summary>
            
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.NotInUseSelfLoopReductionRule">
            <summary>
            Any link that has the same predecessor and successor, can be removed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.SelfLoopReductionRule">
            <summary>
            Any link that has the same predecessor and successor, can be removed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC._PfcValidator.DualityLinkReductionRule">
            <summary>
            On initialization, looks for duality violations (node has multiple successors,
            and one of them has multiple predecessors.)
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PFCValidityException">
            <summary>
            An exception that is thrown if there is a cycle in a dependency graph that has been analyzed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PFCValidityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PFCValidityException.Pfc">
            <summary>
            Gets the members of the cycle.
            </summary>
            <value>The members of the cycle.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PFCValidityException.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PFCValidityException.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
            <param name="pfc">The members of the cycle.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PFCValidityException.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="pfc">The members of the cycle.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart">
            <summary>
            Represents &amp; contains a Procedure Function Chart instance. Includes methods for building,
            triggering, and reducing an SFC graph. The SFC is maintained SFC-Compliant (meaning that Transitions 
            always lead to Steps, and Steps always lead to Transitions, and both always do so via Links.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.m_pathLengthCap">
            <summary>
            PathLengthCap is the maximum path length that _LookForwardForNodesOnPathEndingAt will use.
            This becomes necessary in large recipes to limit the exponentially-explosive search time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ProcedureFunctionChart"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.#ctor(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Creates a new instance of the <see cref="T:ProcedureFunctionChart"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:ProcedureFunctionChart"/> will run.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.#ctor(Highpoint.Sage.SimCore.IModel,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ProcedureFunctionChart"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The name of the new <see cref="T:ProcedureFunctionChart"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,Highpoint.Sage.Graphs.PFC.IPfcElementFactory)">
            <summary>
            Creates a new instance of the <see cref="T:ProcedureFunctionChart"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:ProcedureFunctionChart"/> will run.</param>
            <param name="name">The name of the new <see cref="T:ProcedureFunctionChart"/>.</param>
            <param name="description">The description of the new <see cref="T:ProcedureFunctionChart"/>.</param>
            <param name="guid">The GUID of the new <see cref="T:ProcedureFunctionChart"/>.</param>
            <param name="elementFactory">The element factory from which this SFC will create its new elements.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:ProcedureFunctionChart"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:ProcedureFunctionChart"/> will run.</param>
            <param name="name">The name of the new <see cref="T:ProcedureFunctionChart"/>.</param>
            <param name="description">The description of the new <see cref="T:ProcedureFunctionChart"/>.</param>
            <param name="guid">The GUID of the new <see cref="T:ProcedureFunctionChart"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateFromStep(Highpoint.Sage.Graphs.PFC.IPfcStepNode)">
            <summary>
            Creates a new SFC with the given step as its root element.
            </summary>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateFromStep(Highpoint.Sage.Graphs.PFC.IPfcStepNode,System.Boolean)">
            <summary>
            Creates a new SFC with the given step as its root element.
            </summary>
            <param name="step">The step.</param>
            <param name="autoFlatten">if set to <c>true</c> automatically flattens the resultant PFC.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ElementFactory">
            <summary>
            Gets or sets the element factory in use by this ProcedureFunctionChart.
            </summary>
            <value>The element factory.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateStep">
            <summary>
            Creates and adds a step with the specified information. Throws an exception if the Guid is already in use.
            </summary>
            <returns>The <see cref="T:IPfcStepNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateStep(System.String,System.String,System.Guid)">
            <summary>
            Creates and adds a step with the specified information. Throws an exception if the Guid is already in use.
            </summary>
            <param name="name">The name of the step.</param>
            <param name="description">The description of the step.</param>
            <param name="guid">The GUID of the step.</param>
            <returns>The <see cref="T:IPfcStepNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateTransition">
            <summary>
            Creates and adds a transition with default information. Throws an exception if the Guid is already in use.
            </summary>
            <returns>The <see cref="T:IPfcTransitionNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateTransition(System.String,System.String,System.Guid)">
            <summary>
            Creates and adds a transition with the specified information. Throws an exception if the Guid is already in use.
            </summary>
            <param name="name">Name of the transition.</param>
            <param name="description">The transition description.</param>
            <param name="guid">The transition GUID.</param>
            <returns>The <see cref="T:IPfcTransitionNode"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateLink">
            <summary>
            Creates a new link. It must later be bound to a predecessor and a successor.
            Throws an exception if the Guid is already known to this ProcedureFunctionChart.
            </summary>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateLink(System.String,System.String,System.Guid)">
            <summary>
            Creates a new link. It must later be bound to a predecessor and a successor.
            Throws an exception if the Guid is already known to this ProcedureFunctionChart.
            </summary>
            <param name="name">The name of the new link.</param>
            <param name="description">The description of the new link.</param>
            <param name="guid">The GUID of the new link.</param>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CreateLink(System.String,System.String,System.Guid,Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Creates a link with the specified name &amp; guid.
            </summary>
            <param name="name">The name of the new link.</param>
            <param name="description">The description of the new link.</param>
            <param name="guid">The GUID of the new link.</param>
            <param name="predecessor">The predecessor to the new link.</param>
            <param name="successor">The successor of the new link.</param>
            <returns>The <see cref="T:IPfcLinkElement"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.AddElement(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Adds the element to the PFC.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the two nodes. If both are steps, it inserts a transition between them, and if both are 
            transitions, it inserts a step between them - in both cases, creating links between the 'from'
            node, the shim node, and the 'to' node. Piggybacking is allowed by default. Use the full-featured
            API to disallow piggybacking.
            </summary>
            <param name="from">The node from which a connection is being established.</param>
            <param name="to">The node to which a connection is being established.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement@,Highpoint.Sage.Graphs.PFC.IPfcNode@,Highpoint.Sage.Graphs.PFC.IPfcLinkElement@,System.Boolean)">
            <summary>
            Binds the two nodes. If both are steps, it inserts a transition between them, and if both are
            transitions, it inserts a step between them - in both cases, creating links between the 'from'
            node, the shim node, and the 'to' node. If piggybacking is allowed, and a suitable path already exists,
            we use that path instead. A suitable path is either a link between differently-typed nodes, or a
            link-node-link path between same-typed nodes, where the interstitial node is simple, and opposite-typed.
            </summary>
            <param name="from">The node from which a connection is being established.</param>
            <param name="to">The node to which a connection is being established.</param>
            <param name="iPfcLink1">The first link element.</param>
            <param name="shimNode">The shim node, if one was created.</param>
            <param name="iPfcLink2">The second link element, if one was created.</param>
            <param name="allowPiggybacking">if set to <c>true</c>, we allow an existing link to serve the purpose of this requested link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Binds the linkable and the link node. If the link node is floating (and has nothing on the other end yet),
            it just binds them. Otherwise, if the link is bound to the same type of node on the other side that we've
            indicated to bind to, it inserts a shim node of the opposite type between the two same-type nodes.
            </summary>
            <param name="from">The upstream node of the binding.</param>
            <param name="to">The downstream node of the binding.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Bind(Highpoint.Sage.Graphs.PFC.IPfcLinkElement,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the linkable and the link node. If the link node is floating (and has nothing on the other end yet),
            it just binds them. Otherwise, if the link is bound to the same type of node on the other side that we've
            indicated to bind to, it inserts a shim node of the opposite type between the two same-type nodes.
            </summary>
            <param name="from">The upstream node of the binding.</param>
            <param name="to">The downstream node of the binding.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
            <summary>
            Unbinds the two nodes, removing ONE link between them. Returns false if they were
            not connected directly in the first place. If called directly by the user, this
            API can result in an illegal PFC graph. Note that if they are connected by two sets
            of links, this will not completely disconnect them - for infallible disconnection,
            call this method repeatedly until it returns false.
            </summary>
            <param name="from">The upstream node of the unbinding.</param>
            <param name="to">The downstream node of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcLinkElement,System.Boolean)">
            <summary>
            Unbinds the node from the link. Returns false if they were not
            connected directly in the first place. If called directly by
            the user, this API can result in an illegal PFC graph.
            </summary>
            <param name="from">The upstream node of the unbinding.</param>
            <param name="to">The downstream link of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
            <returns>True, if successful, otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Unbind(Highpoint.Sage.Graphs.PFC.IPfcLinkElement,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Boolean)">
            <summary>
            Unbinds the link from the node. Returns false if they were not
            connected directly in the first place. If called directly by
            the user, this API can result in an illegal PFC graph.
            </summary>
            <param name="from">The upstream link of the unbinding.</param>
            <param name="to">The downstream node of the unbinding.</param>
            <param name="skipStructureUpdating">if set to <c>true</c> skips the UpdateStructure. Useful for optimizing bulk updates.</param>
            <returns>True, if successful, otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Prune(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Prunes the specified node. If it has no predecessors, it is removed from its successors,
            and they are pruned back. If it has no successors, it is removed from its predecessors,
            and they are pruned back.
            </summary>
            <param name="node">The starting node for pruning.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetStartSteps">
            <summary>
            Gets the start steps in this ProcedureFunctionChart.
            </summary>
            <returns>The start steps.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetFinishSteps">
            <summary>
            Gets the finish steps in this ProcedureFunctionChart.
            </summary>
            <returns>The finish steps.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetFinishTransition">
            <summary>
            Gets the finish transition in this ProcedureFunctionChart.
            </summary>
            <returns>The finish transition.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.RequiredShimNode(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            If the two linkable nodes match in type, it returns the opposite type. Otherwise it returns null.
            </summary>
            <param name="from">The upstream node of the intended binding.</param>
            <param name="to">The downstream node of the intended binding.</param>
            <returns>
            The necessary shim node, or none if no shim node is required.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindSeriesConvergent(Highpoint.Sage.Graphs.PFC.IPfcNode[],Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the inbound nodes to the outbound node through a series convergent link structure. Since the caller has indicated
            that they desire a SERIES convergent structure, appropriate shimming is done to ensure that the convergence node is a
            step.
            </summary>
            <param name="inbounds">The inbound linkables.</param>
            <param name="outbound">The outbound linkable.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindSeriesConvergent(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the inbound nodes to the outbound node through a series convergent link structure. Since the caller has indicated
            that they desire a SERIES convergent structure, appropriate shimming is done to ensure that the convergence node is a
            step.
            </summary>
            <param name="inbound">The inbound linkables.</param>
            <param name="outbound">The outbound linkable.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindParallelConvergent(Highpoint.Sage.Graphs.PFC.IPfcNode[],Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the inbound nodes to the outbound node through a parallel convergent link structure. Since the caller has indicated
            that they desire a PARALLEL convergent structure, appropriate shimming is done to ensure that the convergence node is a
            step.
            </summary>
            <param name="inbounds">The inbound linkables.</param>
            <param name="outbound">The outbound linkable.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindParallelConvergent(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Binds the inbound nodes to the outbound node through a parallel convergent link structure. Since the caller has indicated
            that they desire a PARALLEL convergent structure, appropriate shimming is done to ensure that the convergence node is a
            step.
            </summary>
            <param name="inbound">The inbound linkables.</param>
            <param name="outbound">The outbound linkable.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindParallelDivergent(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode[])">
            <summary>
            Binds the inbound node to the outbound nodes through a parallel divergent link structure. Since the caller has indicated
            that they desire a PARALLEL divergent structure, appropriate shimming is done to ensure that the divergence node is a
            transition.
            </summary>
            <param name="inbound">The inbound linkable.</param>
            <param name="outbounds">The outbound linkables.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindParallelDivergent(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.PfcNodeList)">
            <summary>
            Binds the inbound node to the outbound nodes through a parallel divergent link structure. Since the caller has indicated
            that they desire a PARALLEL divergent structure, appropriate shimming is done to ensure that the divergence node is a
            transition.
            </summary>
            <param name="inbound">The inbound linkable.</param>
            <param name="outbound">The outbound linkables.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindSeriesDivergent(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode[])">
            <summary>
            Binds the inbound node to the outbound nodes through a series divergent link structure. Since the caller has indicated
            that they desire a SERIES divergent structure, appropriate shimming is done to ensure that the divergence node is a
            step.
            </summary>
            <param name="inbound">The inbound linkable.</param>
            <param name="outbounds">The outbound linkables.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.BindSeriesDivergent(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.PfcNodeList)">
            <summary>
            Binds the inbound node to the outbound nodes through a series divergent link structure. Since the caller has indicated
            that they desire a SERIES divergent structure, appropriate shimming is done to ensure that the divergence node is a
            step.
            </summary>
            <param name="inbound">The inbound linkable.</param>
            <param name="outbound">The outbound linkables.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Synchronize(Highpoint.Sage.Graphs.PFC.IPfcNode[],Highpoint.Sage.Graphs.PFC.IPfcNode[])">
            <summary>
            Binds the inbound elements to the outbound elements through a synchronizer construct. All elements in
            both arrays must be the same type (either all Steps or all Transitions), and null or empty arrays are
            illegal.
            </summary>
            <param name="inbound">The inbound elements.</param>
            <param name="outbound">The outbound elements.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Synchronize(Highpoint.Sage.Graphs.PFC.PfcNodeList,Highpoint.Sage.Graphs.PFC.PfcNodeList)">
            <summary>
            Binds the inbound elements to the outbound elements through a synchronizer construct. Empty collections are illegal.
            </summary>
            <param name="inbound">The inbound elements.</param>
            <param name="outbound">The outbound elements.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ArrayType(Highpoint.Sage.Graphs.PFC.IPfcNode[])">
            <summary>
            Returns the type of the elements in this array. If they do not all match, returns null.
            </summary>
            <param name="array">The array.</param>
            <returns>The type of the elements in this array. If they do not all match, returns null.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.MakeLinkPrimary(Highpoint.Sage.Graphs.PFC.IPfcLinkElement)">
            <summary>
            Makes the link primary, setting its priority to int.MaxValue.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ResumeNodeSorting">
            <summary>
            This is a performance enhancer - when making internal changes (i.e. changes that are a
            part of a larger process such as flattening a Pfc hierarchy), there is no point to doing
            node sorting on the entire graph, each time. So, prior to the start of the wholesale
            changes, suspend node sorting, and then resume once the changes are complete. Resuming
            also results in a call to UpdateStructure(...).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.SuspendNodeSorting">
            <summary>
            This is a performance enhancer - when making internal changes (i.e. changes that are a
            part of a larger process such as flattening a Pfc hierarchy), there is no point to doing
            node sorting on the entire graph, each time. So, prior to the start of the wholesale
            changes, suspend node sorting, and then resume once the changes are complete. Resuming
            also results in a call to UpdateStructure(...).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.UpdateStructure(System.Boolean)">
            <summary>
            Updates the structure of the PFC and sorts outbound links per their priority then their textual names, then
            their guids. Next, does a depth-first traversal to identify loopback links, then does a breadth-first traversal,
            assigning nodes a sequence number. Finally sorts node lists per their sequence numbers. Loop breaking then can 
            occur between the node with the higher sequence number and the *following* node with the lower number. This way,
            loop-break always occurs at the intuitively-correct place.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ApplyNamingCosmetics">
            <summary>
            Applies the naming cosmetics appropriate for the type of recipe being generated. This is currently
            hard-coded, and performs naming of transitions to T_001, T_002, ... T_00n, and null steps to 
            NULL_UP:0, NULL_UP:1, ... NULL_UP:n.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Parent">
            <summary>
            Gets the root NodeGroup of this SFC.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Source">
            <summary>
            Gets the source PFC, if any, from which this PFC was cloned.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ParticipantDirectory">
            <summary>
            A directory of participants in and below this Pfc, used in creation of expressions.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.PruneOrphans``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes all elements that are not connected, from the list.
            </summary>
            <typeparam name="T">A list of the provided type elements, which must implement IPfcElement.</typeparam>
            <param name="list">The list itself.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Steps">
            <summary>
            Gets the steps under management of this Procedure Function Chart. This is a
            read-only list.
            </summary>
            <value>The steps.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Transitions">
            <summary>
            Gets the transitions under management of this Procedure Function Chart. This is a
            read-only list.
            </summary>
            <value>The transitions.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Nodes">
            <summary>
            Gets all of the nodes (steps and transitions)under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetChildren(System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcElement},System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcElement}@)">
            <summary>
            Gets all of the elements that are contained in or under this Pfc, to a depth
            specified by the 'depth' parameter, and that pass the 'filter' criteria.
            </summary>
            <param name="depth">The depth to which retrieval is to be done.</param>
            <param name="filter">The filter predicate that dictates which elements are acceptable.</param>
            <param name="children">The children, treated as a return value.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Edges">
            <summary>
            Gets all of the edges (links) under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The edges (links).</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Links">
            <summary>
            Gets all of the edges (links) under management of this Procedure Function Chart. This is a
            read-only collection.
            </summary>
            <value>The edges (links).</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Elements">
            <summary>
            Gets the elements contained directly in this Pfc.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Delete(Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Deletes the specified node and its pair (preceding Step if it is a transition,
            succeeding transition if it is a step).
            <list type="bullet">
            <item>If either member of the pair being deleted
            has more than one predecessor and one successor, the delete attempt will fail - these
            other paths need to be deleted themselves first.</item>
            <item>If neither node has multiple inputs
            or outputs, then they are both deleted, and a link is added from the transition
            preceding the deleted step to the step following the deleted transition.</item>
            <item>If the node to be deleted is not connected to anything on either end, then the node is
            simply removed from Pfc data structures.</item>
            </list> 
            </summary>
            <param name="node">The node.</param>
            <returns>True if the deletion was successful, false if it was not.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetNodesOnPath(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode)">
            <summary>
            Gets the nodes on all paths that proceed from the 'from' node to the 'to' node, through the 'through' node.
            </summary>
            <param name="from">The first node on the sought-for path.</param>
            <param name="through">A node in the middle that must be on the sought-for path.</param>
            <param name="to">The last node on the sought-for path.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.MarkLoopbackLinks(Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.Stack{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Marks the loopback links. Prerequisites - all nodes' colors are White, all links are
            not loopbacks.
            </summary>
            <param name="node">The node.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.LookForwardForNodesOnPathEndingAt(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcNode}@)">
            <summary>
            Looks forward from node 'node' for a path ending at 'finish', and returns a list of nodes that are on all such paths.
            </summary>
            <param name="finish">The finish.</param>
            <param name="node">The node.</param>
            <param name="deletees">The nodes that were on such paths.</param>
            <returns>True if any paths were found</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart._LookForwardForNodesOnPathEndingAt(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcNode}@,System.Collections.Generic.Stack{Highpoint.Sage.Graphs.PFC.IPfcNode}@)">
            <summary>
            Looks forward from node 'node' for a path ending at 'finish', and returns a list of nodes that are on all such paths.
            </summary>
            <param name="finish">The finish.</param>
            <param name="node">The node.</param>
            <param name="deletees">The nodes that were on such paths.</param>
            <param name="visited">The visited nodes stack.</param>
            <returns>True if any paths were found</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.LookBackwardForNodesOnPathStartingAt(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcNode}@)">
            <summary>
            Looks backward from node 'node' for a path ending at 'start', and returns a list of nodes that are on all such paths.
            </summary>
            <param name="start">The start.</param>
            <param name="node">The node.</param>
            <param name="deletees">The nodes that were on such paths.</param>
            <returns>True if any paths were found</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart._LookBackwardForNodesOnPathStartingAt(Highpoint.Sage.Graphs.PFC.IPfcNode,Highpoint.Sage.Graphs.PFC.IPfcNode,System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcNode}@,System.Collections.Generic.Stack{Highpoint.Sage.Graphs.PFC.IPfcNode}@)">
            <summary>
            Looks backward from node 'node' for a path ending at 'start', and returns a list of nodes that are on all such paths.
            </summary>
            <param name="start">The start.</param>
            <param name="node">The node.</param>
            <param name="deletees">The nodes that were on such paths.</param>
            <param name="visited">The visited nodes.</param>
            <returns>True if any paths were found</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Name">
            <summary>
            The user-friendly name for this Procedure Function Chart. Typically not required to be unique.
            </summary>
            <value>The Name.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Guid">
            <summary>
            The Guid for this Procedure Function Chart. Typically required to be unique.
            </summary>
            <value>The Guid.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Model">
            <summary>
            The model that owns this Procedure Function Chart, or from which it gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Description">
            <summary>
            The description for this Procedure Function Chart. Typically used for human-readable representations.
            </summary>
            <value>The Procedure Function Chart's description.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetPfcSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets the PFC schema.
            </summary>
            <returns>The PFC schema.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"></see> to the class instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"></see> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"></see> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"></see> method.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"></see> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ToXmlString">
            <summary>
            Creates an XML string representation of this Pfc.
            </summary>
            <returns>The newly-created Xml string.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.WriteParticipantDirectory(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> stream to which the object is serialized.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.FromXmlString(System.String,System.Guid,System.Guid,System.Int32)">
            <summary>
            Creates a ProcedureFunctionChart with repeatable GUID generation characteristics from a properly-schemed XML string.
            </summary>
            <param name="xmlString">The XML string.</param>
            <param name="seed">The seed for the Guid Generator.</param>
            <param name="mask">The mask for the Guid Generator.</param>
            <param name="rotate">The rotation bit count for the Guid Generator.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.FromXmlString(System.String)">
            <summary>
            Creates a ProcedureFunctionChart from a properly-schemed XML string.
            </summary>
            <param name="xmlString">The XML string.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.FindNode(System.String)">
            <summary>
            Finds the node at the specified path from this location. Currently, works only absolutely from this PFC.
            Paths are specified as &quot;parentStepName/childStepName/grandchildStepName&quot;
            <para></para>
            </summary>
            <param name="path">The path (e.g. ParentName/ChildName).</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.FindFirst(System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Finds the first node for which the predicate returns true.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.FindAll(System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcNode})">
            <summary>
            Retrieves a depth-first iterator over all nodes in this PFC that satisfy the predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.DepthFirstIterator">
            <summary>
            Retrieves a depth-first iterator over all nodes in this PFC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Flatten">
            <summary>
            Combines this PFC and all of its child PFCs (the actions associated with steps)
            into one flat PFC with no children. Steps that had children are replaced by their
            children, inserted inline into the parents' PFC structure, in place of the parent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Reduce">
            <summary>
            Removes the null nodes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetCleanGuidMap(System.Boolean)">
            <summary>
            Gets a list of NewGuidHolder objects. After obtaining this list, go through it
            and for each NewGuidHolder, inspect the target object, determine the new Guid to
            be applied, and set it into the newGuidHolder.NewGuid property. After this, the
            entire list must be submitted to the ApplyGuidMap(myNewGuidHolderList); API, and
            the new guids will be applied.<para>
            </para>
            <B>Do not simply set the Guids on the objects.</B>
            If, after setting a new guid, you want not to change the object's guid, you can
            set it to NewGuidHolder.NO_CHANGE, a special guid that causes the engine to skip
            that object in the remapping of guids.
            </summary>
            <param name="deep">If true, steps' Action Pfc's will return their elements' guids, too.</param>
            <returns>A list of NewGuidHolder objects associated with the IPfcElements in this Pfc.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.ApplyGuidMap(System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder})">
            <summary>
            Applies the GUID map.
            </summary>
            <param name="newGuidHolders">The list of NewGuidHolders that serves as a new GUID map.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.CollapseParticipantDirectories(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Recursively collapses childrens' participant directories into the parent, renaming the
            absorbed child elements and Steps as necessary. Only the rootChart's ParticipantDirectory
            is left in existence. All others point up to the root.
            </summary>
            <param name="rootChart">The root chart.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder">
            <summary>
            A class that holds a reference to an IPfcElement and a new Guid for that element, and
            enables the ProcedureFunctionChart to change that guid via its' ApplyGuidMap API.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder.NoChange">
            <summary>
            A Special Guid which, if set into the NewGuid property, causes the setting of that
            guid to be skipped.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder.Target">
            <summary>
            Gets the target element whose guid is to be reset as a result of this NewGuidHolder.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder.NewGuid">
            <summary>
            Gets or sets the new GUID for the target. If it is NO_CHANGE, then no alteration will
            be attempted by the engine, even in the ApplyGuidMap API is called.
            </summary>
            <value>The new GUID.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.NewGuidHolder.#ctor(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Initializes a new instance of the <see cref="T:NewGuidHolder"/> class.
            </summary>
            <param name="target">The target pfc element.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.Prune(System.Func{Highpoint.Sage.Graphs.PFC.IPfcStepNode,System.Boolean})">
            <summary>
            Prunes the PFC so that only the steps that return 'true' from the function are left in the PFC.
            </summary>
            <param name="keepThisStep">A function that returns true if the step is to remain in the pfc.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart._Clone(Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart)">
            <summary>
            If you override Clone to create your own kind of PFC, call this from inside that override.
            </summary>
            <param name="newClone">The new clone.</param>
            <returns>IProcedureFunctionChart.</returns>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.PfcStartRequested">
            <summary>
            Occurs when PFC start requested, but before permission has been obtained to do so.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.PfcStarting">
            <summary>
            Occurs when PFC is starting.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.PfcCompleting">
            <summary>
            Occurs when PFC is completing.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.ProcedureFunctionChart.GetPermissionToStart(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext,Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine)">
            <summary>
            Gets permission from the step to transition to run.
            </summary>
            <param name="myPfcec">The PFC Execution context under which this PFC will run.</param>
            <param name="ssm">The step state machine of the step that is launching this pfc. Presently, this is passed in as null.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcElementFactory">
            <summary>
            This is the default implementation of IPfcElementFactory, provided to the
            ProcedureFunctionChart.ElementFactory as a default. It creates a Step,
            Transition or Link element on demand from this library's default types.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PfcElementFactory"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.#ctor(Highpoint.Sage.Utility.GuidGenerator)">
            <summary>
            Creates a new instance of the <see cref="T:PfcElementFactory"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Creates a new instance of the <see cref="T:PfcElementFactory"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.Guid,System.Guid,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:PfcElementFactory"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.SetRepeatable(System.Guid)">
            <summary>
            If this is called, then a repeatable Pfc will be created - Guid generation starts with {00000000-0000-0000-0000-000000000001}
            and increments each time. This is only useful for testing - otherwise, it is dangerous.
            </summary>
            <param name="maskGuid">If a non-Guid.Empty mask guid is used, the seed guid is incremented, the Guid is rotated right one
            bit, and then the resulting Guid is XOR'ed against this mask guid before being returned.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElementFactory.HostPfc">
            <summary>
            Gets the Procedure Function Chart for which this factory is creating elements.
            </summary>
            <value>The host PFC.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcElementFactory.GuidGenerator">
            <summary>
            Gets the GUID generator in use by this element factory.
            </summary>
            <value>The GUID generator.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.CreateStepNode(System.String,System.Guid,System.String)">
            <summary>
            Creates a step node with the provided characteristics. Calls NewStepNode(...) to instantiate the new node.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcStepNode.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.CreateTransitionNode(System.String,System.Guid,System.String)">
            <summary>
            Creates a transition node with the provided characteristics.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcTransitionNode.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.CreateLinkElement(System.String,System.Guid,System.String)">
            <summary>
            Creates a link element with the provided characteristics.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="description">The description.</param>
            <returns>The new IPfcLinkElement.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.OnPfcLoadCompleted(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Called when the loading of a new PFC has been completed.
            </summary>
            <param name="newPfc">The new PFC.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.IsCanonicallyNamed(Highpoint.Sage.Graphs.PFC.IPfcElement)">
            <summary>
            Returns true if the name of this element conforms to the naming rules that this factory imposes.
            </summary>
            <param name="element">The element whose name is to be assessed.</param>
            <returns><c>true</c> if the name of this element conforms to the naming rules that this factory imposes; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcElementFactory.Retract">
            <summary>
            Causes Step, Transition and Link naming cursors to retract to the sequentially-earliest
            name that is not currently assigned in the PFC. That is, if the next transition name to
            be assigned was T_044, and the otherwise-highest assigned name was T_025, the transition
            naming cursor would retract to T_026. The Step and Link cursors would likewise retract
            as a result of this call.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PfcStep"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:PfcStep"/> class.
            </summary>
            <param name="parent">The parent Pfc of this step.</param>
            <param name="name">The name of this step.</param>
            <param name="description">The description for this step.</param>
            <param name="guid">The GUID of this step.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStep.ElementType">
            <summary>
            Gets the type of this element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.GetChildren(System.Int32,System.Predicate{Highpoint.Sage.Graphs.PFC.IPfcElement},System.Collections.Generic.List{Highpoint.Sage.Graphs.PFC.IPfcElement}@)">
            <summary>
            Gets all of the elements that are contained in or under this Pfc, to a depth
            specified by the 'depth' parameter, and that pass the 'filter' criteria.
            </summary>
            <param name="depth">The depth to which retrieval is to be done.</param>
            <param name="filter">The filter predicate that dictates which elements are acceptable.</param>
            <param name="children">The children, treated as a return value.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.Find(System.String)">
            <summary>
            Finds the child node, if any, at the specified path relative to this node.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStep.Actions">
            <summary>
            Gets the actions associated with this PFC Step. They are keyed by ActionName, and are themselves, PFCs. This dictionary
            should not be changed - use AddAction(string ,IProcedureFunctionChart).
            </summary>
            <value>The actions.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.AddAction(System.String,Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart)">
            <summary>
            Adds a child Pfc into the actions list under this step.
            </summary>
            <param name="actionName">The name of this action.</param>
            <param name="pfc">The Pfc that contains procedural details of this action.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.SetActor(Highpoint.Sage.Graphs.PFC.Execution.PfcActor)">
            <summary>
            Sets the Actor that will determine the behavior behind this step. The actor provides the leaf level
            action, as well as preconditiond for running.
            </summary>
            <param name="actor">The actor that will provide the behaviors.</param>
        </member>
        <member name="E:Highpoint.Sage.Graphs.PFC.PfcStep.PfcStarting">
            <summary>
            Occurs when PFC is starting.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.GetPermissionToStart(Highpoint.Sage.Graphs.PFC.Execution.PfcExecutionContext,Highpoint.Sage.Graphs.PFC.Execution.StepStateMachine)">
            <summary>
            Gets permission from the step to transition to run.
            </summary>
            <param name="myPfcec">My pfcec.</param>
            <param name="ssm">The StepStateMachine that will govern this run.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStep.RecipeSourceGuid">
            <summary>
            Returns the Guid of the element in the source recipe that is represented by this PfcStep.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.ToProcedureFunctionChart">
            <summary>
            Returns the actions under this Step as a procedure function chart.
            </summary>
            <returns>A procedure function chart containing the actions under this Step.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.ToProcedureFunctionChart(System.Boolean)">
            <summary>
            Returns the actions under this Step as a procedure function chart.
            </summary>
            <param name="autoFlatten">if set to <c>true</c>, flattens each PFC under this step and its actions and their steps' actions.</param>
            <returns>A procedure function chart containing the actions under this Step.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcStep.UnitInfo">
            <summary>
            Gets the unit with which this step is associated.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.SetLabel(System.String,System.String)">
            <summary>
            Sets the label in the context indicated by the provided context, or if null or String.Empty has been selected, then in the default context.
            </summary>
            <param name="label">The label.</param>
            <param name="context">The context - use null or string.Empty for the default context.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcStep.GetLabel(System.String)">
            <summary>
            Gets the label from the context indicated by the provided context, or if null or String.Empty has been selected, then from the default context.
            </summary>
            <param name="context">The context - use null or string.Empty for the default context.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcTransition">
            <summary>
            A PfcTransition acts as a Transition in a Pfc (Procedure Function Chart).
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.PFC.PfcTransition.DefaultExpression">
            <summary>
            This is the default expression that new Transitions take on. The initial setting is
            performed automatically, subsequent resettings can be done via this field.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransition.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:PfcTransition"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransition.#ctor(Highpoint.Sage.Graphs.PFC.IProcedureFunctionChart,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:PfcTransition"/> class.
            </summary>
            <param name="parent">The ProcedureFunctionChart this transition runs in.</param>
            <param name="name">The name of this transition.</param>
            <param name="description">The description for this transition.</param>
            <param name="guid">The GUID of this transition.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.Expression">
            <summary>
            Gets the expression that is attached to this transition.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.ExpressionUFValue">
            <summary>
            Gets or sets the 'friendly' value of this expression. Uses step names and macro names.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.ExpressionUHValue">
            <summary>
            Gets or sets the 'hostile' value of this expression.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.ExpressionExpandedValue">
            <summary>
            Gets the expanded value of this expression. Uses step names and expands macro names into their resultant names.
            </summary>
            <value>The expanded value of this expression.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.ExpressionExecutable">
            <summary>
            Gets or sets the default executable condition, that is the executable condition that this transition will
            evaluate unless overridden in the execution manager.
            </summary>
            <value>The default executable condition.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.ElementType">
            <summary>
            Gets the type of this element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.PFC.PfcTransition.IsNullNode">
            <summary>
            Gets a value indicating whether this transition instance is null. A transition that is null can be
            eliminated when PFCs are combined.
            </summary>
            <value><c>true</c> if this instance is null; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.Graphs.PFC.PfcTransition.TransitionComparer">
            <summary>
            The TransitionComparer is used to sort transitions by their graph ordinals.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.PFC.PfcTransition.TransitionComparer.Compare(Highpoint.Sage.Graphs.PFC.IPfcTransitionNode,Highpoint.Sage.Graphs.PFC.IPfcTransitionNode)">
            <summary>
            Compares two IPfcTransitionNodes and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first IPfcTransitionNode to compare.</param>
            <param name="y">The second IPfcTransitionNode to compare.</param>
            <returns>
            Value Condition Less than zero, x is less than y. Zero, x equals y.Greater than zero, x is greater than y.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Validity.Validity">
            <summary>
            Specifies whether, from the perspective of a Validity service, something is valid.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Validity.Validity.Valid">
            <summary>
            The item is valid.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Graphs.Validity.Validity.Invalid">
            <summary>
            The item is not valid.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Validity.ValidityChangeHandler">
            <summary>
            A callback that is expected to be invoked when something's state of validity changes.
            </summary>
            <param name="ihv">The object that has validity.</param>
            <param name="newState">The new value that the object's validity has taken on.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Validity.IHasValidity">
            <summary>
            Implemented by any object that has a state of validity that is managed by a ValidationService.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.IHasValidity.ValidationService">
            <summary>
            Gets or sets the validation service that oversees the implementer.
            </summary>
            <value>The validation service.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.IHasValidity.GetChildren">
            <summary>
            Gets the children (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.IHasValidity.GetSuccessors">
            <summary>
            Gets the successors (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.IHasValidity.GetParent">
            <summary>
            Gets the parent (from a perspective of validity) of the implementer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.IHasValidity.SelfState">
            <summary>
            Gets or sets the state (from a perspective of validity) of the implementer.
            </summary>
            <value>The state of the self.</value>
        </member>
        <member name="E:Highpoint.Sage.Graphs.Validity.IHasValidity.ValidityChangeEvent">
            <summary>
            Fires when the implementer's validity state is changed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.IHasValidity.NotifyOverallValidityChange(Highpoint.Sage.Graphs.Validity.Validity)">
            <summary>
            Called by the ValidationService upon an overall validity change.
            </summary>
            <param name="newValidity">The new validity.</param>
        </member>
        <member name="T:Highpoint.Sage.Graphs.Validity.ValidationService">
            <summary>
            A class that abstracts and manages validity relationships in a directed acyclic graph. If
            an object is invalid, its parent, grandparent (etc.), and downstream objects in that graph
            are also seen to be invalid.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.ValidationService.KnownServices">
            <summary>
            Gets a list of the known ValidationServices.
            </summary>
            <value>The known services.</value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.#ctor(Highpoint.Sage.Graphs.Tasks.Task)">
            <summary>
            Creates a new instance of the <see cref="T:ValidationService"/> class.
            </summary>
            <param name="root">The root task of the directed acyclic graph.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.Suspend">
            <summary>
            Suspends validation computations to control cascaded recomputations. Suspend recomputation, make a bunch 
            of changes, and resume. If anything needs to be recalculated, it will be. This also implements a nesting
            capability, so if a suspend has been done 'n' times (perhaps in a call stack), the recomputation will only
            be done once all 'n' suspends have been resumed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.Resume">
            <summary>
            Resumes this instance. See <see cref="M:Highpoint.Sage.Graphs.Validity.ValidationService.Suspend"/>.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.Refresh(System.Boolean)">
            <summary>
            Performs the validity computation.
            </summary>
            <param name="force">if set to <c>true</c> the service ignores whether anything in the graph has changed since the last refresh.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.Refresh">
            <summary>
            Performs the validity computation if there are no suspensions in progress, and anything in the graph has changed since the last refresh. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.StatusReport">
            <summary>
            Creates a status report that describes the validity state of the graph.
            </summary>
            <returns>A status report that describes the validity state of the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.StatusReport(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Creates a status report that describes the validity state of the graph, at and below the provided node.
            </summary>
            <param name="ihv">The provided node that is to be the root of this report.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.NotifySelfStateChange(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Notifies the specified object in the graph of its self state change.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetPredecessorsOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the predecessors of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The predecessors of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetSuccessorsOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the successors of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The successors of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetChildrenOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the children of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The children of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetParentOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the parent of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The parent of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetValidityState(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the overall state of the validity of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetSelfValidityState(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the state of the self validity of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The state of the self validity of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetPredecessorValidityState(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the state of validity of the predecessors of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The state of validity of the predecessors of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetChildValidityState(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the aggregate validity state of the children of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The aggregate validity state of the children of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetInvalidPredecessorCountOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the invalid predecessor count of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The invalid predecessor count of the specified object in the graph.</returns>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.GetInvalidChildCountOf(Highpoint.Sage.Graphs.Validity.IHasValidity)">
            <summary>
            Gets the invalid child count of the specified object in the graph.
            </summary>
            <param name="ihv">The specified object in the graph.</param>
            <returns>The invalid child count of the specified object in the graph.</returns>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.ValidationService.KnownValidityHolders">
            <summary>
            Gets a list of the IHasValidity objects that are known to this ValidationService.
            </summary>
            <value>The known validity holders.</value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.ValidationService.ValidityNode.InvalidPredecessorCount">
            <summary>
            Gets or sets the invalid predecessor count.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Validity.ValidationService.ValidityNode.InvalidChildCount">
            <summary>
            Gets or sets the invalid child count.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.ValidityNode.ReactToInvalidation">
            <summary>
            Reacts to invalidation by incrementing parent's invalid child count, successors'
            invalid predecessor count, and then telling my Mine element to notify listeners
            of its invalidation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Validity.ValidationService.ValidityNode.EstablishMappingsToValidityNodes">
            <summary>
            Establishes mappings between validity nodes and the elements they monitor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Vertex.EdgeFiringManager">
            <summary>
            The edge firing manager is responsible for determining which successor edges fire,
            following satisfaction of a vertex. If this is null, it is assumed that all
            edges are to fire. If it is non-null, then each successor edge is presented to
            the EdgeFiringManager on it's FireIfAppropriate(Edge e) API to determine if it
            should fire.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Vertex.EdgeReceiptManager">
            <summary>
            The edge receipt manager is notified of the satisfaction (firing) of pre-edges, and
            is responsible for determining when the vertex is to fire. If it is null, then it is
            assumed that only if all incoming edges have fired, is the vertex to fire.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Vertex.FireVertex">
            <summary>
            This property represents the firing method will be called when it is time to fire the vertex. The developer may
            substitute a delegate that performs some activity prior to actually firing the vertex. This
            substituted delegate must, after doing whatever it does, call the DefaultVertexFiringMethod(graphContext)...
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex.DefaultVertexFiringMethod(System.Collections.IDictionary)">
            <summary>
            This is the default method used to fire this vertex.
            </summary>
            <param name="graphContext">The graph context for execution.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex._AsyncFireVertexHandler(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            This is here as a target for an event handler in case the vertex firing is desired to be
            done asynchronously.
            <param name="exec">The executive by which this event is being serviced.</param>
            <param name="graphContext">The graph context for execution.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex._FireVertex(System.Collections.IDictionary)">
            <summary>
            This method is called when it's time to fire the vertex, and even the vertex's
            synchronizer (if it has one) has been satisfied.
            </summary>
            <param name="graphContext">The graphContext of the current event thread.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex.PreEdgeSatisfied(System.Collections.IDictionary,Highpoint.Sage.Graphs.Edge)">
            <summary>
            This method is called when an incoming pre-edge has been fired, and it could therefore
            be time to fire this vertex.
            </summary>
            <param name="graphContext">The graphContext in whose context this traversal of the graph
            is to take place.</param>
            <param name="theEdge">The edge that was just fired.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.Vertex.Synchronizer">
            <summary>
            A synchronizer, ip present, defines a relationship among vertices wherein all vertices
            wait until they are all ready to fire, and then they fire in the specified order.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex.SetSynchronizer(Highpoint.Sage.Graphs.VertexSynchronizer)">
            <summary>
            This is used as an internal accessor to set synchronizer to null, or other values. The
            property is public, but read-only.
            </summary>
            <param name="synch"></param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.Vertex.ToString">
            <summary>
            Returns the name of this vertex.
            </summary>
            <returns>The name of this vertex.</returns>
        </member>
        <member name="T:Highpoint.Sage.Graphs.VertexSynchronizer">
            a synchronization primitive between two or more vertices, where the vertices
            are, once all are able to fire, fired in the order specified in the 'vertices'
            array.
        </member>
        <member name="M:Highpoint.Sage.Graphs.VertexSynchronizer.#ctor(Highpoint.Sage.SimCore.IExecutive,Highpoint.Sage.Graphs.Vertex[],Highpoint.Sage.SimCore.ExecEventType)">
            <summary>
            Creates a synchronization between two or more vertices, where the vertices
            are, once all are able to fire, fired in the order specified in the 'vertices'
            array.
            </summary>
            <param name="exec">The executive in whose simulation this VS is currently running.</param>
            <param name="vertices">An array of vertices to be synchronized.</param>
            <param name="vertexFiringType">The type of ExecEvent that successor edges to this vertex
            should be called with.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.VertexSynchronizer.Destroy">
            <summary>
            Removes this synchronizer from all vertices that it was synchronizing.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Graphs.VertexSynchronizer.Members">
            <summary>
            A sequenced array of the member vertices of this synchronizer.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Graphs.VertexEarliestTimeThresholder">
            <summary>
            When attached to a vertex in a graph, this object ensures that the vertex does not fire before a specified simulation time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Graphs.VertexEarliestTimeThresholder.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Graphs.Vertex)">
            <summary>
            Creates a new instance of the <see cref="T:VertexEarliestTimeThresholder"/> class.
            </summary>
            <param name="model">The model in which the <see cref="T:VertexEarliestTimeThresholder"/> exists.</param>
            <param name="vertex">The vertex that this object will control.</param>
        </member>
        <member name="M:Highpoint.Sage.Graphs.VertexEarliestTimeThresholder.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Graphs.Vertex,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:VertexEarliestTimeThresholder"/> class.
            </summary>
            <param name="model">The model in which the <see cref="T:VertexEarliestTimeThresholder"/> exists.</param>
            <param name="vertex">The vertex that this object will control.</param>
            <param name="earliest">The earliest time that the vertex should be allowed to fire.</param>
        </member>
        <member name="P:Highpoint.Sage.Graphs.VertexEarliestTimeThresholder.Earliest">
            <summary>
            Gets or sets the earliest time that the vertex should be allowed to fire.
            </summary>
            <value>The earliest time that the vertex should be allowed to fire.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.MixtureMass">
            <summary>
            Gets a double tracker that records the initial, minimum, maximum, and final mixture mass.
            </summary>
            <value>The mixture mass.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.MixtureVolume">
            <summary>
            Gets a double tracker that records the initial, minimum, maximum, and final mixture volume.
            </summary>
            <value>The mixture volume.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Vessel.Reset">
            <summary>
            Performs a reset operation on this instance.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Vessel.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Vessel.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Constants">
            <summary>
            A class that holds useful chemistry constants.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Constants.CELSIUS_TO_KELVIN">
            <summary>
            Add this to a Celsius value to get its Kelvin equivalent.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Constants.KELVIN_TO_CELSIUS">
            <summary>
            Add this to a Kelvin value to get its Celsius equivalent.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionGoingToHappenEvent">
            <summary>
            Implemented by a method that can be notified when a reaction is going to happen.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionHappenedEvent">
            <summary>
            Implemented by a method that can be notified after a reaction has happened.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Reaction">
            <summary>
            A Reaction is a class that characterizes a chemical transformation. A reaction represents that
            when it occurs, 'a' mass units of substance 'A' reacts with 'b' nass units of substance 'B' to
            yield 'c' mass units of substance 'C' and 'd' mass units of substance 'D'. Additionally, it 
            represents that the reaction will habben with a forward execution percentage of 'x' percent, and
            were it to execute 100%, it would yield or consume 'y' energy units - permitting it to be an
            endothermic or exothermic reaction.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Reaction.DEFAULT_RI_GUIDMASK">
            <summary>
            This is a guid that is XOR'ed with the Reaction's guid to obtain the initial guid of its reaction instances.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionGoingToHappenEvent">
            <summary>
            Fired before a reaction is processed.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionHappenedEvent">
            <summary>
            Fired after a reaction is processed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Reaction"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.AddReactant(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double)">
            <summary>
            Defines a reactant in this reaction.
            </summary>
            <param name="material">The material type that is to be the reactant.</param>
            <param name="mass">The mass of reactant that participates in one unit of the reaction.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.AddProduct(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double)">
            <summary>
            Defines a product in this reaction.
            </summary>
            <param name="material">The material that is to be a product of this reaction.</param>
            <param name="mass">The mass of product that is produced by one unit of this reaction.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Reactants">
            <summary>
            Gets the reactants of this reaction.
            </summary>
            <value>The reactants.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Products">
            <summary>
            Gets the products of this reaction.
            </summary>
            <value>The products.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.PercentCompletion">
            <summary>
            Gets or sets the expected percent completion of this reaction.
            </summary>
            <value>The percent completion.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.HeatOfReaction">
            <summary>
            Gets or sets the heat of reaction of this reaction. This is the number of joules added to, or removed from, the reaction when it occurs in the quantities specified.
            number of joules added to, or removed from, the reaction when it occurs in the quantities and direction specified. In other words, a reaction defined as 
            1 X + 2 Y &lt;--&gt; 3 Z liberates 2.4 joules when 1 mole of X and 2 moles of Y react to completion.
            </summary>
            <value>The heat of reaction.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.React(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Causes the reaction to take place, if possible, in (and perform modifications to, the provided target mixture.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.React(Highpoint.Sage.Materials.Chemistry.Mixture,System.Collections.ArrayList,System.Collections.ArrayList,System.Double)">
            <summary>
            Reacts in the specified mix.
            </summary>
            <param name="mix">The mixture in which the reaction is to take place.</param>
            <param name="from">The <see cref="T:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant"/>s that are eliminated.</param>
            <param name="to">The <see cref="T:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant"/>s that are created.</param>
            <param name="scale">The scale of the reaction.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Reaction.MaterialRole">
            <summary>
            Describes the role a material plays in a reaction.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Reaction.MaterialRole.Reactant">
            <summary>
            This material is a reactant.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Reaction.MaterialRole.Product">
            <summary>
            This material is a product.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Reaction.MaterialRole.Either">
            <summary>
            This material is both a reactant and a product (e.g. a catalyst).
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Model">
            <summary>
            The model to which this reaction belongs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Name">
            <summary>
            The name of this reaction.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Description">
            <summary>
            A description of this reaction.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.Guid">
            <summary>
            The Guid by which this reaction will be known.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Reaction"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant">
            <summary>
            A ReactionParticipant is a struct that represents a material type and a mass, depicting
            the type and representative quantity of a material that will take place in a reaction. Note
            that the quantities are specified in proportion only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.#ctor(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:ReactionParticipant"/> class.
            </summary>
            <param name="mt">The mt.</param>
            <param name="mass">The mass.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.MaterialType">
            <summary>
            Gets the type of the material.
            </summary>
            <value>The type of the material.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.Mass">
            <summary>
            Gets the mass of the material.
            </summary>
            <value>The mass.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.IsCatalyst">
            <summary>
            A reaction participant is a catalyst if it exists in equal amounts as a Reactant and a Product in the same
            reaction. In this case, it must be present, but does not participate quantitatively.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.ToString(System.Double)">
            <summary>
            Returns a string that represents this RactionParticipant at the specified scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Reaction.ReactionParticipant.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionDefinitionException">
            <summary>
            An exception that is thrown if there is a cycle in a dependency graph that has been analyzed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.ReactionDefinitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.ReactionDefinitionException.Reaction">
            <summary>
            Gets the members of the cycle.
            </summary>
            <value>The members of the cycle.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.ReactionDefinitionException.#ctor(Highpoint.Sage.Materials.Chemistry.Reaction)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.ReactionDefinitionException.#ctor(System.String,Highpoint.Sage.Materials.Chemistry.Reaction)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
            <param name="reaction">The reaction.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionInstance">
            <summary>
            A ReactionInstance is created every time a reaction takes place. It records
            what reaction took place, how much of the reaction took place (i.e. percent
            completion) in both the forward and reverse directions, and the percent of
            completion the reaction had been told to attempt to accomplish, in case the
            value were to be changed in the reaction, later (such as as a result of a
            change in temperature.)
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.IHasMaterials">
            <summary>
            Interface IHasMaterials is implemented by any object that serves as a librarian for material types, which are held in a MaterialCatalog.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IHasMaterials.RegisterMaterialCatalog(Highpoint.Sage.Materials.Chemistry.MaterialCatalog)">
            <summary>
            Registers the material catalog.
            </summary>
            <param name="mcat">The mcat.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ISupportsReactions">
            <summary>
            ISupportsReactions is an entity that keeps track of reactions and materials, and provides each
            a place to acquire references to the other. If you define a reaction with Potassium in it, and
            use the Potassium material type to create some potassium, you can be sure the potassium will be
            able to react if the material is made from the MaterialCatalog, and the reaction is stored in
            the ReactionProcessor of, the same instance of ISupportsReactions.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.BasicReactionSupporter">
            <summary>
            A BasicReactionSupporter is used for testing. It is the simplest class that can implement the
            ISupportsReactions interface (it also implements IXmlPersistable...)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.BasicReactionSupporter.#ctor">
            <summary>
            The simplest class that implements the ISupportsReactions interface (it also implements IXmlPersistable...)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.BasicReactionSupporter.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Serializes this object to the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext into which this object is to be stored.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.BasicReactionSupporter.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Deserializes this object from the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext from which this object is to be reconstituted.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionProcessorEvent">
            <summary>
            Delegate implemented by a method that wants to be called when a reaction is added to
            or removed from, a ReactionProcessor.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.ReactionProcessor">
            <summary>
            A reaction processor knows of a set of chemical reactions, and watches a set of mixtures.
            Whenever a material is added to, or removed from, a mixture, the reaction processor examines
            that mixture to see if any of the reactions it knows of are capable of occurring. If any are,
            then it proceeds to execute that reaction, eliminating the appropriate quantity of reactants,
            generating the appropriate quantity of products (or vice versa) and changing the mixture's
            thermal characteristics.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.ReactionProcessor.Name">
            <summary>
            The name of this reaction processor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.ReactionProcessor.Description">
            <summary>
            A description of this Reaction Processor.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.ReactionProcessor.Guid">
            <summary>
            The Guid by which this reaction processor will be known.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.ReactionProcessor.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Serializes this object to the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext into which this object is to be stored.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.ReactionProcessor.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Deserializes this object from the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext from which this object is to be reconstituted.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionParam">
            <summary>
            Characterizes a parameter that is required by an emissions model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionParam.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EmissionParam"/> class for serialization purposes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionParam.Name">
            <summary>
            Gets or sets the name of the <see cref="T:EmissionParam"/>.
            </summary>
            <value>The name of the <see cref="T:EmissionParam"/>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionParam.Description">
            <summary>
            Gets or sets the description of the <see cref="T:EmissionParam"/>.
            </summary>
            <value>The description of the <see cref="T:EmissionParam"/>.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionModel">
            <summary>
            This interface is implemented by a class that is capable of acting as an emissions model, computing the
            amount of material partitioned off as emissions, as a result of a specified situation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            Computes the effects of the emission.
            </summary>
            <param name="initial">The initial mixture.</param>
            <param name="final">The final mixture, after emissions are removed.</param>
            <param name="emission">The mixture that is emitted.</param>
            <param name="modifyInPlace">If this is true, then the emissions are removed from the initial mixture,
            and upon return from the call, the initial mixture will reflect the contents after the emission has taken place.</param>
            <param name="parameters">This is a hashtable of name/value pairs that represents all of the parameters necessary
            to describe this particular emission model, such as pressures, temperatures, gas sweep rates, etc.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionModel.Keys">
            <summary>
            This is the list of names by which this emission model is specified, such as "Gas Sweep", "Vacuum Dry", etc.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel">
            <summary>
            Base class for emission models, with a few helpful auxiliary methods &amp; constant values. It is not required that an
            Emission Model derive from this class.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames">
            <summary>
            Contains constant strings that are to be used as keys for storing emissions parameters into 
            the parameters hashtable that holds the data pertinent to an emissions calculation.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.AirLeakDuration_Min">
            <summary>
            The key that identifies the Air Leak Duration.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.AirLeakRate_KgPerMin">
            <summary>
            The key that identifies the Air Leak Rate.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.CondenserEnabled">
            <summary>
            The key that identifies whether the Condenser is enabled.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.CondenserTemperature_K">
            <summary>
            The key that identifies the Condenser Temperature.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.ControlTemperature_K">
            <summary>
            The key that identifies the ControlTemperature.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.DesiredEmission">
            <summary>
            The key that identifies the DesiredEmission.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialTypeGuidToEmit">
            <summary>
            The key that identifies the Material Type Guid To Emit.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialSpecGuidToEmit">
            <summary>
            The key that identifies the Material Spec Guid To Emit.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialFractionToEmit">
            <summary>
            The key that identifies the Material Fraction To Emit.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialMassToEmit">
            <summary>
            The key that identifies the Material Mass To Emit.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.FinalPressure_P">
            <summary>
            The key that identifies the Final Pressure.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.FinalTemperature_K">
            <summary>
            The key that identifies the Final Temperature.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.GasSweepDuration_Min">
            <summary>
            The key that identifies the Gas Sweep Duration.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.GasSweepRate_M3PerMin">
            <summary>
            The key that identifies the Gas Sweep Rate.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.InitialPressure_P">
            <summary>
            The key that identifies the Initial Pressure.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.InitialTemperature_K">
            <summary>
            The key that identifies the Initial Temperature.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MassOfDriedProductCake_Kg">
            <summary>
            The key that identifies the Mass Of Dried Product Cake.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialGuidToVolumeFraction">
            <summary>
            The key that identifies the Material Guid To Volume Fraction.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MaterialToAdd">
            <summary>
            The key that identifies the Material To Add.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.MolesOfGasEvolved">
            <summary>
            The key that identifies the Moles Of Gas Evolved.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.SystemPressure_P">
            <summary>
            The key that identifies the System Pressure.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.VacuumSystemPressure_P">
            <summary>
            The key that identifies the Vacuum System Pressure.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.VesselVolume_M3">
            <summary>
            The key that identifies the Vessel Volume.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ParamNames.FillVolume_M3">
            <summary>
            The key that identifies the Fill Volume.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.EquationSet">
            <summary>
            Determines which equation set is used by the emissions model. Default is CTG.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.EquationSet.CTG">
            <summary>
            1978 Control Technique Guidelines
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.EquationSet.MACT">
            <summary>
            1998 Pharmaceutical Maximum Achievable Control Technique guidelines.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants">
            <summary>
            Useful constants for emission model computations.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.KgPerPound">
            <summary>
            Multiply a double representing the number of pounds (avoirdupois) of a substance by this, to get kilograms.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.PascalsPerMmHg">
            <summary>
            Multiply a double representing the number of mm of mercury of pressure, to get pascals.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.PascalsPerBar">
            <summary>
            Multiply a double representing the number of Bar absolute of pressure, to get pascals.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.CubicFtPerGallon">
            <summary>
            Multiply a double representing the number of gallons of volume, to get cubic feet.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.LitersPerGallon">
            <summary>
            Multiply a double representing the number of gallons of volume, to get liters.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.CubicFtPerCubicMeter">
            <summary>
            Multiply a double representing the number of cubic feet of volume, to get cubic meters.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.CubicMetersPerLiter">
            <summary>
            Multiply a double representing the number of liters of volume, to get cubic meters.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.AirKgPerCubicMeterStp">
            <summary>
            Multiply a double representing the number of cubic meters of air at STP to get kg of air.
            This is derived from the facts that air's molecular weight (mass-weighted-average) is 28.97 grams per mole
            (see http://www.engineeringtoolbox.com/8_679.html) and that air occupies 22.4 liters per mole at STP
            (see http://www.epa.gov/nerlesd1/chemistry/ppcp/prefix.htm).<p></p>
            ((28.97 g/mole)/(1000 g/kg)) / ((22.4 liters/mole)*1000 liters/m^3) = 1.293304 kg/m^3
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Constants.MolecularWeightOfAir">
            <summary>
            The mass-weighted average molecular weight of air. See http://www.engineeringtoolbox.com/8_679.html
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ActiveEquationSet">
            <summary>
            Determines whether the engine uses 	CTG (1978 Control Technology Guidelines) or MACT (1998 Pharmaceutical Maximum Achievable Control Technology guidelines) equations for its computation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.PrepareToReadLateBoundParameters">
            <summary>
            Performs initial bookkeeping in support of determining if an error occurred while reading late-bound parameters for an emissions model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.TryToRead(System.Double@,System.String,System.Collections.Hashtable)">
            <summary>
            Attempts to read a parameter by name from the late-bound parameters list, providing an error message if the parameter is missing.
            </summary>
            <param name="variable">The double into which the read value is to be placed.</param>
            <param name="paramName">The string name of the parameter. Should be one of the EmissionModel.ParamNames entries.</param>
            <param name="parameters">The late-bound hashtable.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.TryToRead(System.Collections.Hashtable@,System.String,System.Collections.Hashtable)">
            <summary>
            Attempts to read a parameter by name from the late-bound parameters list, providing an error message if the parameter is missing.
            </summary>
            <param name="variable">The double into which the read value is to be placed.</param>
            <param name="paramName">The string name of the parameter. Should be one of the EmissionModel.ParamNames entries.</param>
            <param name="parameters">The late-bound hashtable.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.TryToRead(Highpoint.Sage.Materials.Chemistry.Mixture@,System.String,System.Collections.Hashtable)">
            <summary>
            Attempts to read a parameter by name from the late-bound parameters list, providing an error message if the parameter is missing.
            </summary>
            <param name="variable">The double into which the read value is to be placed.</param>
            <param name="paramName">The string name of the parameter. Should be one of the EmissionModel.ParamNames entries.</param>
            <param name="parameters">The late-bound hashtable.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.EvaluateSuccessOfParameterReads">
            <summary>
            This is called after all parameter reads are done, in a late bound model execution. It forms and throws a
            MissingParameterException with an appropriate messasge if any of the parameter reads failed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ReportProcessCall(Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel,Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture,System.Collections.Hashtable)">
            <summary>
            Creates a string that reports the process call, logging it to Trace.
            </summary>
            <param name="subject">The subject.</param>
            <param name="initial">The initial.</param>
            <param name="final">The final.</param>
            <param name="emission">The emission.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            Computes the effects of the emission.
            </summary>
            <param name="initial">The initial mixture.</param>
            <param name="final">The final mixture, after emissions are removed.</param>
            <param name="emission">The mixture that is emitted.</param>
            <param name="modifyInPlace">If this is true, then the emissions are removed from the initial mixture,
            and upon return from the call, the initial mixture will reflect the contents after the emission has taken place.</param>
            <param name="parameters">This is a hashtable of name/value pairs that represents all of the parameters necessary
            to describe this particular emission model, such as pressures, temperatures, gas sweep rates, etc.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Keys">
            <summary>
            This is the list of names by which this emission model is specified, such as "Gas Sweep", "Vacuum Dry", etc.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.GetSystemPressure(System.Collections.Hashtable)">
            <summary>
            Gets the system pressure from the parameters hashtable. It may be stored under the PN.SystemPressure_P or failing that, the PN.FinalPressure_P key.
            </summary>
            <param name="parameters">The parameter hashtable.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.PermitOverEmission">
            <summary>
            Gets or sets a value indicating whether this emission model permits over emission - that is, emission of a quantity of material that is greater than what is present in the mixture, if the calculations dictate it.
            </summary>
            <value><c>true</c> if [permit over emission]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionModel.PermitUnderEmission">
            <summary>
            Gets or sets a value indicating whether this emission model permits under emission - that is, emission of a negative quantity, if the calculations dictate it.
            </summary>
            <value><c>true</c> if [permit under emission]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel">
            <summary>
            This model is used to calculate the emissions associated with drying solid product in a dryer 
            with no emission control equipment.  Thus, the model assumes that the entire solvent content 
            of the wet product cake is emitted to the atmosphere.  The calculation of the emission is then 
            a simple calculation based on the expected, or measured, dry product weight and the expected, 
            or measured, wet cake LOD (loss on drying).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Air Dry model on this API, the parameters hashtable
            must include the following entries (see the AirDry(...) method for details):<p></p>
            &quot;MassOfDriedProductCake&quot;, &quot;ControlTemperature&quot;, &quot;MaterialGuidToVolumeFraction&quot;.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.AirDryModel.AirDry(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Collections.Hashtable)">
            <summary>
            This model is used to calculate the emissions associated with drying solid product in a dryer 
            with no emission control equipment.  Thus, the model assumes that the entire solvent content 
            of the wet product cake is emitted to the atmosphere.  The calculation of the emission is then 
            a simple calculation based on the expected, or measured, dry product weight and the expected, 
            or measured, wet cake LOD (loss on drying).
            </summary>
            <param name="initial">The initial mixture that is dried.</param>
            <param name="final">An out-param that provides the mixture that results.</param>
            <param name="emission">An out-param that provides the emitted mixture.</param>
            <param name="modifyInPlace">True if the initial mixture provided is to be modified as a result of this call.</param>
            <param name="massOfDriedProductCake">Kilogram mass of the post-drying product cake.</param>
            <param name="controlTemperature">Control (or condenser) temperature, in degrees Kelvin.</param>
            <param name="materialGuidToVolumeFraction">A hashtable with the guids of materialTypes as keys, and the volumeFraction for that material type as values. VolumeFraction is the percent [0.0 to 1.0] of that material type in the offgas.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel">
            <summary>
            This model is used to calculate emissions from the evacuation (or depressurizing)
            of the vessel containing a VOC and a “noncondensable” or “inert” gas.  The model
            assumes that the pressure in the vessel decreases linearly with time and that there
            is no air leakage into the vessel.  Further, the assumptions are made that the
            composition of the VOC mixture does not change during the evacuation and that there
            is no temperature change (isothermal expansion).  Finally, the vapor displaced from
            the vessel is saturated with the VOC vapor at exit temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Evacuate model on this API, the parameters hashtable
            must include the following entries (see the Evacuate(...) method for details):<p></p>
            &quot;InitialPressure&quot;, &quot;FinalPressure&quot;, &quot;ControlTemperature&quot;, &quot;VesselVolume&quot;.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EvacuateModel.Evacuate(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="initialPressure">The initial pressure of the system, in Pascals.</param>
            <param name="finalPressure">The final pressure of the system, in Pascals.</param>
            <param name="controlTemperature">The control, or condenser temperature, in degrees Kelvin.</param>
            <param name="vesselVolume">The volume of the vessel, in cubic meters.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel">
            <summary>
            This model is used when any mixture is added to a vessel already containing a liquid or
            vapor VOC, and the vapor from that vessel is thereby emitted by displacement.  The model
            assumes that the volume of vapor displaced from the vessel is equal to the amount of
            material added to the vessel.  In addition, the vapor displaced from the vessel is
            saturated with the VOC vapor at the exit temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Fill model on this API, the parameters hashtable
            must include the following entries (see the Fill(...) method for details):<p></p>
            &quot;MaterialToAdd&quot; and &quot;ControlTemperature&quot;. 
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.FillModel.Fill(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,Highpoint.Sage.Materials.Chemistry.Mixture,System.Double)">
            <summary>
            
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="materialToAdd">The material to be added in the fill operation.The volume property of the material will be used to determine volume.</param>
            <param name="controlTemperature">The control, or condenser, temperature, in degrees Kelvin.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel">
            <summary>
            This model is used to calculate the emissions associated with the generation
            of a non-condensable gas as the result of a chemical reaction.  The model assumes
            that the gas is exposed to the VOC, becomes saturated with the VOC vapor at the
            exit temperature, and leaves the system.  The model also assumes that the system
            pressure is 760 mmHg, atmospheric pressure.  This model is identical to the Gas
            Sweep model, except that the non-condensable sweep gas (usually nitrogen) is replaced
            in this model by a non-condensable gas generated in situ. It is important to note that
            if the generated gas is itself a VOS, non-VOS or TVOS, then the emission of this gas
            must be accounted for by a separate model, usually the Mass Balance model.
            <p>For example, if n-butyllithium is used in a chemical reaction and generates butane
            gas as a byproduct, the evolution of butane gas causes emissions of the VOC present in
            the system.  These emissions can be modeled by the Gas Evolution model (to account for
            the emission of the VOC vapor which saturates the butane gas) and the Mass Balance
            model (to account for the emission of the VOC butane).</p>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Gas Evolution model on this API, the parameters hashtable
            must include the following entries (see the GasEvolution(...) method for details):<p></p>
            &quot;MolesOfGasEvolved&quot;, &quot;SystemPressure&quot; and &quot;ControlTemperature&quot;. If there
            is no entry under &quot;SystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.GasEvolutionModel.GasEvolution(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with the generation
            of a non-condensable gas as the result of a chemical reaction.  The model assumes
            that the gas is exposed to the VOC, becomes saturated with the VOC vapor at the
            exit temperature, and leaves the system.  The model also assumes that the system
            pressure is 760 mmHg, atmospheric pressure.  This model is identical to the Gas
            Sweep model, except that the non-condensable sweep gas (usually nitrogen) is replaced
            in this model by a non-condensable gas generated in situ. It is important to note that
            if the generated gas is itself a VOS, non-VOS or TVOS, then the emission of this gas
            must be accounted for by a separate model, usually the Mass Balance model.
            <p>For example, if n-butyllithium is used in a chemical reaction and generates butane
            gas as a byproduct, the evolution of butane gas causes emissions of the VOC present in
            the system.  These emissions can be modeled by the Gas Evolution model (to account for
            the emission of the VOC vapor which saturates the butane gas) and the Mass Balance
            model (to account for the emission of the VOC butane).</p>
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="nMolesEvolved">The number of moles of gas evolved.</param>
            <param name="controlTemperature">The control or condenser temperature, in degrees kelvin.</param>
            <param name="systemPressure">The pressure of the system (or vessel) in Pascals.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel">
            <summary>
            This model is used to calculate the emissions associated with sweeping or purging
            a vessel or other piece of equipment with a non-condensable gas (nitrogen).
            The model assumes that the sweep gas enters the system at 25°C, becomes saturated
            with the VOC vapor at the exit temperature, and leaves the system.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Gas Sweep model on this API, the parameters hashtable
            must include the following entries (see the GasSweep(...) method for details):<p></p>
            &quot;GasSweepRate&quot;, &quot;GasSweepDuration&quot;, &quot;SystemPressure&quot; and &quot;ControlTemperature&quot;. If there
            is no entry under &quot;SystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.GasSweepModel.GasSweep(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with sweeping or purging
            a vessel or other piece of equipment with a non-condensable gas (nitrogen).
            The model assumes that the sweep gas enters the system at 25°C, becomes saturated
            with the VOC vapor at the exit temperature, and leaves the system.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="gasSweepRate">The gas sweep rate, in cubic meters per time unit.</param>
            <param name="gasSweepDuration">The gas sweep duration, in matching time units.</param>
            <param name="controlTemperature">The control or condenser temperature, in degrees Kelvin.</param>
            <param name="systemPressure">The system (vessel) pressure, in Pascals.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel">
            <summary>
            This model is used to calculate the emissions associated with the heating
            of a vessel or other piece of equipment containing a VOC and a non-condensable
            gas (nitrogen or air).  The model assumes that the non-condensable gas,
            saturated with the VOC mixture, is emitted from the vessel because of (1) the
            expansion of the gas upon heating and (2) an increase in the VOC vapor pressure.
            The emitted gas is saturated with the VOC mixture at the exit temperature, the
            condenser or receiver temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Heat model on this API, the parameters hashtable
            must include the following entries (see the Heat(...) method for details):<p></p>
            &quot;ControlTemperature&quot;, &quot;InitialTemperature&quot;, &quot;FinalTemperature&quot;&quot;SystemPressure&quot; and &quot;FreeSpace&quot;. If there
            is no entry under &quot;SystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.HeatModel.Heat(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with the heating
            of a vessel or other piece of equipment containing a VOC and a non-condensable
            gas (nitrogen or air).  The model assumes that the non-condensable gas,
            saturated with the VOC mixture, is emitted from the vessel because of (1) the
            expansion of the gas upon heating and (2) an increase in the VOC vapor pressure.
            The emitted gas is saturated with the VOC mixture at the exit temperature, the
            condenser or receiver temperature.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="controlTemperature">The control or condenser temperature, in degrees Kelvin.</param>
            <param name="initialTemperature">The initial temerature of the mixture in degrees Kelvin.</param>
            <param name="finalTemperature">The final temperature of the mixture in degrees Kelvin.</param>
            <param name="systemPressure">The pressure of the system (vessel) in Pascals.</param>
            <param name="vesselVolume">The volume of the vessel, in cubic meters.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel">
            <summary>
            This model is used whenever an emission of a known mixture occurs
            during a particular operation.  The user must specify the mixture
            containing emission.  As an example, the butane emission from
            the reaction of n-butyllithium could be specified by using this model.
            However, the VOC emission caused by the evolution and emission of the
            butane would have to be calculated by the Gas Evolve model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Mass Balance model on this API, the parameters hashtable
            must include the following entry (see the MassBalance(...) method for details):<p></p>
            &quot;DesiredEmission&quot;.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.MassBalanceModel.MassBalance(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            This model is used whenever an emission of a known mixture occurs
            during a particular operation.  The user must specify the mixture
            containing emission.  As an example, the butane emission from
            the reaction of n-butyllithium could be specified by using this model.
            However, the VOC emission caused by the evolution and emission of the
            butane would have to be calculated by the Gas Evolve model.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="desiredEmission">The mixture that is to be removed from the initial mixture as emission.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel">
            <summary>
            This model is a placeholder for operations that cause no emissions.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>The NoEmissions model is included for completeness, and has no entries that are
            required to be present in the parameters hashtable.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.NoEmissionModel.NoEmission(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean)">
            <summary>
            This model is a placeholder for operations that cause no emissions.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel">
            <summary>
            This model is used to calculate the emissions associated with vacuum
            operations.  The model assumes that air leaks into the system under
            vacuum, is exposed to the VOC, becomes saturated with the VOC vapor at
            the exit temperature, and leaves the system via the vacuum source.
            <p>The most important input parameter to this model is the leak rate of
            the air into the system.  If the leak rate for a particular piece of equipment
            has been measured, then this leak rate can be used.  On the other hand, if no
            leak rate information is available, EmitNJ will estimate the leak rate using
            the system volume entered by the user and industry standard leak rates for 
            'commercially tight' systems.</p>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Vacuum Distillation model on this API, the parameters hashtable
            must include the following entries (see the VacuumDistillation(...) method for details):<p></p>
            &quot;AirLeakRate&quot;, &quot;AirLeakDuration&quot;, &quot;SystemPressure&quot; and &quot;ControlTemperature&quot;. If there
            is no entry under &quot;VacuumSystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationModel.VacuumDistillation(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with vacuum
            operations.  The model assumes that air leaks into the system under
            vacuum, is exposed to the VOC, becomes saturated with the VOC vapor at
            the exit temperature, and leaves the system via the vacuum source.
            <p>The most important input parameter to this model is the leak rate of
            the air into the system.  If the leak rate for a particular piece of equipment
            has been measured, then this leak rate can be used.  On the other hand, if no
            leak rate information is available, EmitNJ will estimate the leak rate using
            the system volume entered by the user and industry standard leak rates for 
            'commercially tight' systems.</p>
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="controlTemperature">In degrees kelvin.</param>
            <param name="vacuumSystemPressure">In Pascals.</param>
            <param name="airLeakRate">In kilograms per time unit.</param>
            <param name="airLeakDuration">In matching time units.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel">
            <summary>
            This model is used to calculate the emissions associated with vacuum 
            distillation.  The calculation of the emission from the operation is 
            identical to that for the Vacuum Distill model.  This model incorporates 
            the effect of the vacuum jet scrubbers into the emission calculation.  
            The vacuum jet scrubbers are used to condense the steam exiting from the 
            vacuum jet but they also condense solvent vapors through direct contact 
            heat exchange.
            <p>The assumptions of the new model are similar to that of the existing 
            vacuum distill model.  Air leaks into the system under vacuum and becomes 
            saturated with solvent vapors.  With the vacuum distill model it is 
            assumed that condensation of some fraction of these vapors occurs in the
            primary condenser and any uncondensed vapor is exhausted to the atmosphere
            (via control devices, if any).  With this model, the vacuum jet scrubber
            acts as the final control device, assuming that a vacuum jet is being used
            to evacuate the system.  The vacuum jet scrubber condenses vapors, which
            remain uncondensed by the primary condenser, through direct contact heat
            exchange with the scrubber water.</p>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Vacuum Distillation With Scrubber model on this API, the parameters hashtable
            must include the following entries (see the VacuumDistillationWScrubber(...) method for details):<p></p>
            &quot;AirLeakRate&quot;, &quot;AirLeakDuration&quot;, &quot;SystemPressure&quot; and &quot;ControlTemperature&quot;. If there
            is no entry under &quot;SystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDistillationWScrubberModel.VacuumDistillationWScrubber(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with vacuum 
            distillation.  The calculation of the emission from the operation is 
            identical to that for the Vacuum Distill model.  This model incorporates 
            the effect of the vacuum jet scrubbers into the emission calculation.  
            The vacuum jet scrubbers are used to condense the steam exiting from the 
            vacuum jet but they also condense solvent vapors through direct contact 
            heat exchange.
            <p>The assumptions of the new model are similar to that of the existing 
            vacuum distill model.  Air leaks into the system under vacuum and becomes 
            saturated with solvent vapors.  With the vacuum distill model it is 
            assumed that condensation of some fraction of these vapors occurs in the
            primary condenser and any uncondensed vapor is exhausted to the atmosphere
            (via control devices, if any).  With this model, the vacuum jet scrubber
            acts as the final control device, assuming that a vacuum jet is being used
            to evacuate the system.  The vacuum jet scrubber condenses vapors, which
            remain uncondensed by the primary condenser, through direct contact heat
            exchange with the scrubber water.</p>
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="controlTemperature">In degrees Kelvin.</param>
            <param name="systemPressure">In Pascals.</param>
            <param name="airLeakRate">In Kilograms per time unit.</param>
            <param name="airLeakDuration">In matching time units.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel">
            <summary>
            This model is used to calculate the emissions associated with
            drying solid product in a vacuum dryer.  The calculation of the
            emission from the operation is identical to that for the Vacuum
            Distill model, except that the total calculated VOC emission cannot
            exceed the amount of VOC in the wet cake.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Vacuum Dry model on this API, the parameters hashtable
            must include the following entries (see the VacuumDry(...) method for details):<p></p>
            &quot;AirLeakRate&quot;, &quot;AirLeakDuration&quot;, &quot;SystemPressure&quot;  &quot;MaterialGuidToVolumeFraction&quot;, &quot;MassOfDriedProductCake&quot; and &quot;ControlTemperature&quot;. If there
            is no entry under &quot;SystemPressure&quot;, then this method looks for entries under &quot;InitialPressure&quot; 
            and &quot;FinalPressure&quot; and uses their average.
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.VacuumDryModel.VacuumDry(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Collections.Hashtable,System.Double)">
            <summary>
            This model is used to calculate the emissions associated with
            drying solid product in a vacuum dryer.  The calculation of the
            emission from the operation is identical to that for the Vacuum
            Distill model, except that the total calculated VOC emission cannot
            exceed the amount of VOC in the wet cake.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="controlTemperature">In degrees kelvin.</param>
            <param name="systemPressure">In Pascals.</param>
            <param name="airLeakRate">In kilograms per time unit.</param>
            <param name="airLeakDuration">In matching time units.</param>
            <param name="materialGuidToVolumeFraction">Hashtable with Material Type Guids as keys, and a double, [0..1] representing the fraction of that material present lost during the drying of the product cake.</param>
            <param name="massOfDriedProductCake">The final mass of the dried product cake.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel">
            <summary>
            This model is used when any material (solid or liquid) is added to a vessel
            already containing a liquid or vapor VOC, and the vapor from that vessel is
            thereby emitted by displacement.  The model assumes that the volume of vapor
            displaced from the vessel is equal to the amount of material added to the
            vessel.  In addition, the vapor displaced from the vessel is saturated with
            the VOC vapor at the exit temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel.Process(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,System.Collections.Hashtable)">
            <summary>
            One-size-fits-all API for all Emission Models, so that the Emissions Service can run
            an emission model that it has never seen before.
            <p></p>In order to successfully call the Pressure Transfer model on this API, the parameters hashtable
            must include the following entries (see the PressureTransfer(...) method for details):<p></p>
            &quot;MaterialToAdd&quot; and &quot;ControlTemperature&quot;. 
            </summary>
            <param name="initial">The initial mixture on which the emission model is to run.</param>
            <param name="final">The final mixture that is delivered after the emission model has run.</param>
            <param name="emission">The mixture that is evolved in the process of the emission.</param>
            <param name="modifyInPlace">True if the initial mixture is to be modified by the service.</param>
            <param name="parameters">A hashtable of name/value pairs containing additional parameters.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel.ModelDescription">
            <summary>
            This is a description of what emissions mode this model computes (such as Air Dry, Gas Sweep, etc.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel.Parameters">
            <summary>
            This is the list of parameters this model uses, and therefore expects as input.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel.Keys">
            <summary>
            The keys which, when fed to the Emissions Service's ProcessEmission method, determines
            that this model is to be called.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.PressureTransferModel.PressureTransfer(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Boolean,Highpoint.Sage.Materials.Chemistry.Mixture,System.Double)">
            <summary>
            This model is used when any material (solid or liquid) is added to a vessel
            already containing a liquid or vapor VOC, and the vapor from that vessel is
            thereby emitted by displacement.  The model assumes that the volume of vapor
            displaced from the vessel is equal to the amount of material added to the
            vessel.  In addition, the vapor displaced from the vessel is saturated with
            the VOC vapor at the exit temperature.
            </summary>
            <param name="initial">The mixture as it exists before the emission.</param>
            <param name="final">The resultant mixture after the emission.</param>
            <param name="emission">The mixture emitted as a result of this model.</param>
            <param name="modifyInPlace">If true, then the initial mixture is returned in its final state after emission, otherwise, it is left as-is.</param>
            <param name="materialToAdd">The material to be added in the fill operation.The volume property of the material will be used to determine volume.</param>
            <param name="controlTemperature">The control, or condenser, temperature in degrees Kelvin.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog">
            <summary>
            Summary description for EmissionsClassificationCatalog.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.#ctor">
            <summary>
            A dictionary of <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/>s keyed against their names.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Remove(System.Object)">
            <summary>
            Removes the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> with the specified key from the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <param name="key">The key of the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object is read-only.-or- The <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object contains an <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.</param>
            <returns>
            true if the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> contains an <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Clear">
            <summary>
            Removes all elements from the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object is read-only. </exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Add(System.Object,System.Object)">
            <summary>
            Adds an <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> with the provided key and value to the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> to add.</param>
            <exception cref="T:System.ArgumentException">An <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification"/> with the same key already exists in the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> is read-only.-or- The <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> has a fixed size. </exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:Highpoint.Sage.Materials.Emissions.EmissionsClassificationCatalog"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionsClassificationCatalog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord">
            <summary>
            IEmissionRecord is an interface implemented by items that represent a record of an emission event.
            <b>Note: IHasIdentity is a structure that has a Name, an optional Description and a Guid.</b>
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.EmissionId">
            <summary>
            Emissions that occur in the same mixture will have the same Guid in this field.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Source">
            <summary>
            Represents the equipment, pipe, tank, etc, from which the emission originated, for example, "R13".
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.EmissionType">
            <summary>
            The type of emission, such as batch, continuous, tank, fugitive, or wastewater. 
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.SourceGroup">
            <summary>
            The collection of sources to which this source belongs, for example, "Building 80".
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Campaign">
            <summary>
            The Campaign in which this emission occurred. This is null if the implementing class is a template.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Recipe">
            <summary>
            The recipe under which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Batch">
            <summary>
            The Batch in which this emission occurred. This is null if the implementing class is a template.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.BatchDuration">
            <summary>
            The duration of the batch or recipe in which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.BatchCycleTime">
            <summary>
            The cycle time of the batch or recipe in which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Unit">
            <summary>
            The Unit in which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Operation">
            <summary>
            The operation that resulted in this emission, for example, "114.00".
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.OperationDuration">
            <summary>
            The duration of the operation in which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Substance">
            <summary>
            The substance that was emitted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.Mass">
            <summary>
            The mass of substance that was emitted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.VaporPressure">
            <summary>
            The vapor pressure of the substance that was emitted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.EmissionPeriod">
            <summary>
            The time period over which this emission occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.ControlDevices">
            <summary>
            An array of ControlDevices that represent the CDs that this emission *will go through* between emission from the source and emission to the environment.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Emissions.IEmissionRecord.MboReference">
            <summary>
            The MBO Ref of the operation above, for example, "R13 8c". Need to better genericize this one.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.IControlDevice">
            <summary>
            Represents a piece of equipment whose job it is to reduce the presence of substances in a discharge stream.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Emissions.IControlDevice.GetEfficiency(Highpoint.Sage.Materials.Chemistry.Substance,Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Returns the percent efficiency (0.0&lt;=retval&lt;=1.0) of the device on the substance of interest when in the described mixture stream.
            </summary>
            <param name="onWhat">The substance of interest.</param>
            <param name="wholeStream">The stream of interest.</param>
            <returns>The percent efficiency (0.0&lt;=retval&lt;=1.0) of the device</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType">
            <summary>
            An enumeration that shows the type of a particular emission.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType.Batch">
            <summary>
            An emission that resulted from a step in a batch process.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType.Continuous">
            <summary>
            An emission that resulted from a continuous process.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType.Tank">
            <summary>
            An emission that resulted from an operation (such as a fill operation) performed on a storage tank.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType.Fugitive">
            <summary>
            A fugitive emission such as through a flange coupling.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Emissions.EmissionType.Wastewater">
            <summary>
            An emission that happened as a result of a wastewater discharge.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialChangeListener">
            <summary>
            Fired after a change in mass, constituents or temperature has taken place in this mixture. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialChangeType">
            <summary>
            An enumeration that describes the kind of change that has taken place in a material.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialChangeType.Contents">
            <summary>
            The contents of the mixture changed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialChangeType.Temperature">
            <summary>
            The temperature of the mixture changed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.IMaterial">
            <summary>
            Implemented by anything that is a material - Substances and Mixtures are current examples.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.MaterialType">
            <summary>
            Gets the type of the material.
            </summary>
            <value>The type of the material.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.Mass">
            <summary>
            Gets the mass of the material in kilograms.
            </summary>
            <value>The mass of the material in kilograms.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.Volume">
            <summary>
            Gets the volume of the material in liters.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.Density">
            <summary>
            Gets the density of the material in kilograms per liter.
            </summary>
            <value>The density.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.AddEnergy(System.Double)">
            <summary>
            Adds the specified number of joules of energy to the mixture.
            </summary>
            <param name="joules">The joules to add to the mixture.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.SpecificHeat">
            <summary>
            Gets the specific heat of the mixture, in Joules per kilogram degree-K.
            </summary>
            <value>The specific heat.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.LatentHeatOfVaporization">
            <summary>
            Latent heat of vaporization - the heat energy required to vaporize one kilogram of this material. (J/kg)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.Temperature">
            <summary>
            Gets or sets the temperature in degrees Celsius (internally, temperatures are stored in degrees Kelvin.)
            </summary>
            <value>The temperature.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.GetEstimatedBoilingPoint(System.Double)">
            <summary>
            Gets the estimated boiling point at the specified pressure in pascals.
            </summary>
            <param name="atPressureInPascals">At pressure in pascals.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.SuspendChangeEvents">
            <summary>
            Suspends the issuance of change events. When change events are resumed, one change event will be fired if
            the material has changed. This prevents a cascade of change events that would be issued, for example during
            the processing of a reaction.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.IMaterial.MaterialChanged">
            <summary>
            Fired after a material has changed its mass, constituents or temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.ResumeChangeEvents(System.Boolean)">
            <summary>
            Resumes the change events. When change events are resumed, one change event will be fired for each of temperature
            and/or contents, if that aspect of the material has changed. This prevents a cascade of change events that would
            be issued, for example during the processing of a reaction.
            </summary>
            <param name="issueSummaryEvents">if set to <c>true</c>, issues a summarizing event for each change type that has occurred.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IMaterial.Tag">
            <summary>
            Gets or sets the tag, which is a user-supplied data element.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.ToString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            Uses caller-supplied format strings in forming the numbers representing mass and temperature.
            </summary>
            <param name="tempFmt">The temperature's numerical format string.</param>
            <param name="massFmt">The mass's numerical format string.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.ToStringWithoutTemperature">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.IMaterial.ToStringWithoutTemperature(System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <param name="massFmt">The mass format string. For example, &quot;F2&quot; will display to two decimals.</param>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialCatalog">
            <summary>
            Class MaterialCatalog stands alone, or serves as a base class for any object that manages instances of <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/>. 
            In this case, to &quot;manage&quot; means to be a point of focus to supply a requester with a material type
            that is specified by name ur unique ID (Guid). This is often kept at the model level in a model that 
            represents or contains chemical reactions.
            </summary>
            <seealso cref="T:Highpoint.Sage.Persistence.IXmlPersistable" />
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Add(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Adds the specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> to this MaterialCatalog.
            </summary>
            <param name="mt">The MaterialType.</param>
            <exception cref="T:System.ApplicationException">
            SiteScheduleModelBuilder reports creating  + mt + , when there is already a material type,  + mtPre +  of the same name in the model.
            or
            SiteScheduleModelBuilder reports creating  + mt + , when there is already a material type,  + mtPre +  of the same guid in the model.
            </exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Contains(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Determines whether this MaterialCatalog contains the specified MaterialType. 
            Different instances of Material Types are considered equal if they have the same name and guid.
            </summary>
            <param name="mt">The MaterialType instance.</param>
            <returns><c>true</c> if this MaterialCatalog contains the specified MaterialType; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Contains(System.String)">
            <summary>
            Determines whether this MaterialCatalog contains a MaterialType with the specified name.
            </summary>
            <param name="mtName">Name of the MaterialType.</param>
            <returns><c>true</c> if this MaterialCatalog contains a MaterialType with the specified name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Contains(System.Guid)">
            <summary>
            Determines whether this MaterialCatalog contains a MaterialType with the specified Guid.
            </summary>
            <param name="mtGuid">The mt unique identifier.</param>
            <returns><c>true</c> if this MaterialCatalog contains a MaterialType with the specified Guid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Item(System.Guid)">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> with the specified unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>MaterialType.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Item(System.String)">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>MaterialType.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.MaterialTypes">
            <summary>
            Gets the collection of material types contained in this MaterialCatalog.
            </summary>
            <value>The material types.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Clear">
            <summary>
            Clears this instance - removes all contained MaterialTypes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Remove(System.String)">
            <summary>
            Removes the material type with the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.Remove(System.Guid)">
            <summary>
            Removes the material type with the specified Guid.
            </summary>
            <param name="guid">The specified Guid.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialCatalog.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialConduitManager">
            <summary>
            A MaterialConduitManager handles replenishment and drawdown from a primary 
            resource manager (i.e. pool) to one or more secondary managers in the case 
            that the primary resource manager either cannot satisfy a request from, or 
            cannot accept a release to, the pool it manages. One might think of it as an 
            intermediary between a ready tank and an inventory tank, or a waste tank and
            a reclamation plant.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialConduitManager.#ctor(Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialConduitManager"/> class.
            </summary>
            <param name="mustHaveMaterialsInIt">The must have materials in it.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialConduitManager.AddConduit(Highpoint.Sage.Resources.IResourceManager,Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Adds a conduit that allows this resource manager to draw from, and push to, another resource manager
            that handles a specified material. The other resource manager is seen as providing a source for the
            material if this resource manager cannot fulfill a request, and provides a destination to absorb any
            more material than can be absorbed by a material resource item in this resource manager.
            </summary>
            <param name="secondary">The resource manager that provides over/underflow support.</param>
            <param name="mt">The material type for which this conduit applies.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem">
            <summary>
            Class MaterialResourceItem is a resource pool that contains a quantity of a substance, and 
            acts as a resource manager for that substance, processing Material Resource Requests.
            </summary>
            <seealso cref="T:Highpoint.Sage.Resources.IResource" />
            <seealso cref="T:Highpoint.Sage.Resources.IResourceManager" />
            <seealso cref="T:Highpoint.Sage.Resources.IHasControllableCapacity" />
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem"/> class with its name being the material type name, and the guid being arbitrarily generated.
            </summary>
            <param name="model">The model in which the MaterialResourceItem runs.</param>
            <param name="mt">The MaterialType of the substance managed in this MaterialResourceItem.</param>
            <param name="initialQuantity">The initial quantity of the substance.</param>
            <param name="initialTemp">The initial temperature of the substance.</param>
            <param name="initialCapacity">The initial capacity of the MaterialResourceItem to hold the substance.</param>
            <exception cref="T:System.ApplicationException">A MaterialResourceItem cannot contain a spec with the same Guid as that of its own core material type.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.#ctor(Highpoint.Sage.SimCore.IModel,System.Guid,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem"/> class with its name being the material type name.
            </summary>
            <param name="model">The model in which the MaterialResourceItem runs.</param>
            <param name="guid">The unique identifier of the MaterialResourceItem.</param>
            <param name="mt">The MaterialType of the substance managed in this MaterialResourceItem.</param>
            <param name="initialQuantity">The initial quantity of the substance.</param>
            <param name="initialTemp">The initial temperature of the substance.</param>
            <param name="initialCapacity">The initial capacity of the MaterialResourceItem to hold the substance.</param>
            <exception cref="T:System.ApplicationException">A MaterialResourceItem cannot contain a spec with the same Guid as that of its own core material type.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.Double,System.Double,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem"/> class with its name being the material type name.
            </summary>
            <param name="model">The model in which the MaterialResourceItem runs.</param>
            <param name="guid">The unique identifier of the MaterialResourceItem.</param>
            <param name="mt">The MaterialType of the substance managed in this MaterialResourceItem.</param>
            <param name="initialQuantity">The initial quantity of the substance.</param>
            <param name="initialTemp">The initial temperature of the substance.</param>
            <param name="initialCapacity">The initial capacity of the MaterialResourceItem to hold the substance.</param>
            <exception cref="T:System.ApplicationException">A MaterialResourceItem cannot contain a spec with the same Guid as that of its own core material type.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.Double,System.Double,System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem"/> class.
            </summary>
            <param name="model">The model in which the MaterialResourceItem runs.</param>
            <param name="name">The name under which the MaterialResourceItem will be known.</param>
            <param name="guid">The unique identifier of the MaterialResourceItem.</param>
            <param name="mt">The MaterialType of the substance managed in this MaterialResourceItem.</param>
            <param name="initialQuantity">The initial quantity of the substance.</param>
            <param name="initialTemp">The initial temperature of the substance.</param>
            <param name="initialCapacity">The initial capacity of the MaterialResourceItem to hold the substance.</param>
            <param name="materialSpecGuids">The material specification guids. See Material Specifications tech note.</param>
            <exception cref="T:System.ApplicationException">A MaterialResourceItem cannot contain a spec with the same Guid as that of its own core material type.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.InitialCapacity">
            <summary>
            The amount of capacity this MaterialResourceItem began with.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.InitialTemperature">
            <summary>
            The initial temperature of the material in this MaterialResourceItem.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.InitialAvailable">
            <summary>
            The amount of material this MaterialResourceItem began with.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.MaterialSpecificationGuids">
            <summary>
            Gets the collection of material specification guids. See the Material Specifications tech note.
            </summary>
            <value>The material specification guids.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.MaterialType">
            <summary>
            The type of the material this MRI holds.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ContainsGuid(System.Guid)">
            <summary>
            Function to check if a guid is contained in this MRI. See 'g' below for possiblitites
            </summary>
            <param name="g">Can be a MRI guid, material type guid, a material specification, 
            or an XOR of material type and specification guids</param>
            <returns>True if found</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ContentsXOR(Highpoint.Sage.Materials.Chemistry.MaterialResourceItem)">
            <summary>
            Performs an XOR on mri's MT and Specs to give a unique key into the contents.
            </summary>
            <param name="mri">The MRI to search</param>
            <returns>Guid defining the unqueness of the mri</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ContentsXOR(System.Guid,System.Guid)">
            <summary>
            Performs an XOR on mri's MT and Specs to give a unique key into the contents.
            </summary>
            <param name="mtGuid">Guid of the MaterialType</param>
            <param name="specGuid">Guid of the MaterialSpecification</param>
            <returns>Guid representing the XOR of the two guids</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ContentsXOR(System.Guid,System.Collections.ICollection)">
            <summary>
            Performs an XOR on mri's MT and Specs to give a unique key into the contents.
            </summary>
            <param name="mtGuid">Guid of the MaterialType</param>
            <param name="specGuids">Guids for the list of MaterialSpecifications</param>
            <returns>Guid defining the unqueness of the Guids</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Manager">
            <summary>
            Gets or sets the manager of the resource.
            </summary>
            <value>The manager.</value>
            <exception cref="T:System.NotSupportedException">A MaterialResourceItem is a self-managed resource, and therefore cannot be assigned a resource manager (since it already has its own...).</exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.IsDiscrete">
            <summary>
            Gets a value indicating whether this instance is discrete. A discrete resource is allocated in integral amounts, such as cartons or drums.
            </summary>
            <value><c>true</c> if this instance is discrete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.IsPersistent">
            <summary>
            Gets a value indicating whether this instance is persistent. A persistent resource is returned to the pool after it is used.
            </summary>
            <value><c>true</c> if this instance is persistent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.IsAtomic">
            <summary>
            Gets a value indicating whether this instance is atomic. And atomic resource is allocated all-or-none, such as a vehicle.
            </summary>
            <value><c>true</c> if this instance is atomic; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Reset">
            <summary>
            Resets this instance, returning it to its initial capacity and availability.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Reserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Reserves the specified request. Removes it from availability, but not from the pool. This is typically an intermediate state held during resource negotiation.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if the resource was successfully reserved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves the specified request. Returns it to availability.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Acquire(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Acquires the specified request. Removes it from availability and from the resource pool.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if if the resource was successfully acquired, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the specified request. Returns it to availability and the resource pool.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.RequestEvent">
            <summary>
            Occurs when this resource has been requested.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ReservedEvent">
            <summary>
            Occurs when this resource has been reserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.UnreservedEvent">
            <summary>
            Occurs when this resource has been unreserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.AcquiredEvent">
            <summary>
            Occurs when this resource has been acquired.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ReleasedEvent">
            <summary>
            Occurs when this resource has been released.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Reserve(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Reserves a resource according to the specified resource request, either blocking until successful, or
            returning &lt;null&gt; if the resource is not immediately available. 
            </summary>
            <param name="resourceRequest">The IResourceRequest that specifies the criteria by which to select the resource.</param>
            <param name="blockAwaitingAcquisition">If true, request will suspend until granted. If false, will return false if unable to fulfill.</param>
            <returns>True if granted, false if not granted.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Acquire(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Acquires a resource according to the specified resource request, either blocking until successful, or
            returning &lt;null&gt; if the resource is not immediately available. 
            </summary>
            <param name="resourceRequest">The IResourceRequest that specifies the criteria by which to select the resource.</param>
            <param name="blockAwaitingAcquisition">If true, request will suspend until granted. If false, will return false if unable to fulfill.</param>
            <returns>True if granted, false if not granted.</returns>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceRequested">
            <summary>
            Fired when a resource request is received.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceReserved">
            <summary>
            Fired when a resource is reserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceUnreserved">
            <summary>
            Fired when a resource is unreserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceAcquired">
            <summary>
            Fired when a resource is acquired and thereby removed from the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceReleased">
            <summary>
            Fired when a resource is released back into the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceAdded">
            <summary>
            Fired when a resource is added to the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.ResourceRemoved">
            <summary>
            Fired when a resource is removed from the pool.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.AccessRegulator">
            <summary>
            Gets or sets the access regulator, which is an object that can allow or deny
            individual ResourceRequests access to specified resources. Note - MaterialResourceItem does not support using an access regulator.
            </summary>
            <value>The access regulator.</value>
            <exception cref="T:System.NotSupportedException">A MaterialResourceItem does not support an access regulator.</exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Resources">
            <summary>
            Gets the resources owned by this Resource Manager.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.SupportsPrioritizedRequests">
            <summary>
            Gets a value indicating whether this resource manager supports prioritized requests. Note - MaterialResourceItem does not.
            </summary>
            <value><c>true</c> if [supports prioritized requests]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Description">
            <summary>
            A description of this MaterialResourceItem
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Capacity">
            <summary>
            The current capacity of this resource - how much 'Available' can be, at its highest value.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Available">
            <summary>
            How much of this resource is currently available to service requests.
            </summary>
            <value>The available.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.PermissibleOverbook">
            <summary>
            The amount by which it is permissible to overbook this resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceItem.Tag">
            <summary>
            Gets or sets the tag - an arbitrary object attached to this one.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest">
            <summary>
            Class MaterialResourceRequest is a Resource request that requests a specified quantity of a specified material type be added to or removed from a specified MaterialResourceItem.
            </summary>
            <seealso cref="T:Highpoint.Sage.Resources.IResourceRequest" />
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction">
            <summary>
            Enum Direction specified whether a resource request aimed at a MaterialResourceItem 
            intends to take from (deplete) or add to (augment) the quantity of substance in 
            that MaterialResourceItem.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction.Deplete">
            <summary>
            The resource request intends to take from (deplete) the quantity of substance in a MaterialResourceItem.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction.Augment">
            <summary>
            The resource request intends to add to (augment) the quantity of substance in a MaterialResourceItem.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.#ctor(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest"/> class.
            </summary>
            <param name="mt">The Material Type being requested.</param>
            <param name="quantity">The quantity of Material being requested.</param>
            <param name="direction">The <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction"/> of the request - Augment or Deplete.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.#ctor(Highpoint.Sage.SimCore.IHasIdentity,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest"/> class.
            </summary>
            <param name="byWhom">The identity of the entity making the reqest.</param>
            <param name="mt">The Material Type being requested.</param>
            <param name="quantity">The quantity of Material being requested.</param>
            <param name="direction">The <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction"/> of the request - Augment or Deplete.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.#ctor(Highpoint.Sage.SimCore.IHasIdentity,Highpoint.Sage.Materials.Chemistry.MaterialType,System.Collections.ICollection,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest"/> class.
            </summary>
            <param name="byWhom">The identity of the entity making the reqest.</param>
            <param name="mt">The Material Type being requested.</param>
            <param name="materialSpecs">The material specs, if any, being requested. Note: See the tech note on Material Specifications.</param>
            <param name="quantity">The quantity of Material being requested.</param>
            <param name="direction">The <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Direction"/> of the request - Augment or Deplete.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.GetScore(Highpoint.Sage.Resources.IResource)">
            <summary>
            Gets the score that describes the suitability of the resource to fulfill this resource request.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The score</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Status">
            <summary>
            Gets the status of this resource request.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.AbortHandler">
            <summary>
            This method is called if the resource request is pending, and gets aborted, for
            example due to resource deadlocking. It can be null, in which case no deadlock
            detection is provided for the implementing type of ResourceRequest.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.ResourceRequestAborting">
            <summary>
            Typically fires as a result of the RequestAbortHandler being called. In that method,
            it picks up the IResourceRequest identity, and is passed on through this event, which
            includes the IResourceRequest.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.AsyncGrantConfirmationCallback">
            <summary>
            This callback is called when a request, made with a do-not-block specification, that was initially
            refused, is finally deemed grantable, and provides the callee (presumably the original requester) 
            with an opportunity to say, "No, I don't want that any more", or perhaps to get ready for receipt
            of the resource in question.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.AsyncGrantNotificationCallback">
            <summary>
            Called after a resource request is granted asynchronously.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.UserData">
            <summary>
            Data maintained by this resource request on behalf of the requester.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.MaterialType">
            <summary>
            Gets the type of the material.
            </summary>
            <value>The type of the material.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.MaterialSpecs">
            <summary>
            Gets the material specs.
            </summary>
            <value>The material specs.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.Replicate">
            <summary>
            Creates a fresh replica of this resource request, without any of the in-progress data. This replica can
            be used to generate another, similar resource request that can acquire its own resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialResourceRequest.DefaultResourceManager">
            <summary>
            This is the resource manager from which a resource is obtained if none is provided in the reserve or
            acquire API calls.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialType.Filter">
            <summary>
            A delegate that indicates acceptance of a material type, for example, for inclusion in a mole fraction or partial pressure computation.
            This delegate returns true to indicate that the material passes the filter criteria.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.#ctor">
            <summary>
            Default constructor for use in serialization. After deserialization, the model
            must be set by the entity reconstituting the material - it is not serialized
            explicitly with the material type, since that would prevent the material type
            from being deserialized into another model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialState)">
            <summary>
            Constructor for MaterialType. Uses default values for all unspecified (see larger
            ctor) properties, marks Molecular Weight as unknown.
            </summary>
            <param name="model">The model to which this MaterialType will belong.</param>
            <param name="name">The name of this MaterialType.</param>
            <param name="guid">The Guid of this MaterialType.</param>
            <param name="specificGravity">The specific gravity associated with material of this type.</param>
            <param name="specificHeat">The specific heat associated with material of this type.</param>
            <param name="stpState">The state of the material at standard temperature and pressure.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialState,System.Double)">
            <summary>
            Constructor for MaterialType. Uses default values for all unspecified (see larger constructor) properties.
            </summary>
            <param name="model">The model to which this MaterialType will belong.</param>
            <param name="name">The name of this MaterialType.</param>
            <param name="guid">The Guid of this MaterialType.</param>
            <param name="specificGravity">The specific gravity associated with material of this type.</param>
            <param name="specificHeat">The specific heat associated with material of this type.</param>
            <param name="stpState">The state of the material at standard temperature and pressure.</param>
            <param name="molecularWeight">The molecular weight of this substance.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialState,System.Double,System.Double)">
            <summary>
            Constructor for MaterialType. Provides a way for the user to specify all of the detailed
            characteristics of the material.
            </summary>
            <param name="model">The model to which this MaterialType will belong.</param>
            <param name="name">The name of this MaterialType.</param>
            <param name="guid">The Guid of this MaterialType.</param>
            <param name="specificGravity">The specific gravity associated with material of this type.</param>
            <param name="specificHeat">The specific heat associated with material of this type.</param>
            <param name="stpState">State of the material at Standard Temperature &amp; Pressure conditions.</param>
            <param name="molecularWeight">The molecular weight.</param>
            <param name="latentHeatOfVaporization">The latent heat of vaporization associated with material of this type. J/kg.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.STPState">
            <summary>
            Gets or sets the state of the material at Standard Temperature and Pressure.
            </summary>
            <value>The state of the material at Standard Temperature and Pressure.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.AddEmissionsClassifications(System.String[])">
            <summary>
            Accepts emissions classifications for this material types. Appropriate string values are SARA, HAP, NATA, VOC, GHG, and ODC.
            </summary>
            <param name="classifications">An array of strings that represent the emissions classifications for this material type.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.AddEmissionsClassifications(Highpoint.Sage.Materials.Emissions.EmissionsClassification[])">
            <summary>
            Tags this material type as having zero or more Emissions Classifications. Any class that
            derives from EmissionsClassification may be included in this collection. 
            </summary>
            <param name="classifications">An array of EmissionsClassification objects.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.AntoinesLawCoefficientsExt">
            <summary>
            Contains the nine coefficients for the extended form of antoine's law. These are expressed in 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.GetVaporPressure(System.Double)">
            <summary>
            Returns the vapor pressure of this material when at the specified temperature - irrespective of the mixture in which it is contained.
            </summary>
            <param name="tempInCelsius">The temperature, in celsius, of the mixture.</param>
            <returns>The vapor pressure of this material.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.GetVaporPressure(System.Double,Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Returns the vapor pressure of this material (in mmHg) when at the specified temperature and in the specified mixture.
            </summary>
            <param name="tempInCelsius">The temperature, in celsius, of the mixture.</param>
            <param name="hostMixture">The mixture in which this material type is contained.</param>
            <returns>The vapor pressure of this material in mmHg.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.GetEstimatedBoilingPoint(System.Double)">
            <summary>
            Estimates a boiling point for the substance.
            </summary>
            <param name="atPressureInPascals">The pressure at which the boiling point is desired.</param>
            <returns>The estimated boiling point, in degrees celsius.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.VanTHoffFactor">
            <summary>
            In physical chemistry, the van 't Hoff factor i is the number of moles of solute actually in
            solution per mole of solid solute added. Roughly, this is the number of ions a molecule of
            solute breaks into, when dissolved.
            </summary>
            <value>The van_t_ hoff factor.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.EbullioscopicConstant">
            <summary>
            Gets or sets the ebullioscopy constant. Ebullioscopic constant (Eb) is the constant that expresses the 
            amount by which the boiling point Tb of a solvent is raised by a solute, through the relation delta_Tb = i x Eb x b
            where i is the van ' Hoff factor, and b is the molality of the solute.
            </summary>
            <value>The ebullioscopy constant.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.SpecificGravity">
            <summary>
            Returns the specific gravity of the material in kilograms per liter.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.SpecificHeat">
            <summary>
            Returns the specific heat of the material in Joules per Kilogram-degree K.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.MolecularWeight">
            <summary>
            Returns the molecular weight of the material.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.LatentHeatOfVaporization">
            <summary>
            Returns the Latent Heat Of Vaporization of the material in Joules per Kilogram.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.Description">
            <summary>
            A description of this Material Type.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.MaterialType.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.MaterialType.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.IContainer">
            <summary>
            Implemented by anything that can hold a mixture, and has a capacity.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IContainer.Mixture">
            <summary>
            Gets the mixture.
            </summary>
            <value>The mixture.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IContainer.Capacity">
            <summary>
            Gets the capacity in cubic meters.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.IContainer.Pressure">
            <summary>
            Gets the pressure.
            </summary>
            <value>The pressure.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Mixture">
            <summary>
            A Mixture is a collection of consituent materials that share the same temperature. Reactions can
            take place within a mixture, if that mixture is being watched by a <see cref="T:Highpoint.Sage.Materials.Chemistry.ReactionProcessor"/>.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChanged">
            <summary>
            Fired after a change in mass, constituents or temperature has taken place in this mixture. 
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Mixture.OnReactionGoingToHappen">
            <summary>
            Fires before a reaction takes place in this mixture.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Mixture.OnReactionHappened">
            <summary>
            Fires after a reaction has taken place in this mixture.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.#ctor">
            <summary>
            Default Constructor for deserialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Mixture"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:Mixture"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.#ctor(System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Mixture"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:Mixture"/>.</param>
            <param name="guid">The GUID of the <see cref="T:Mixture"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.#ctor(Highpoint.Sage.SimCore.IModel,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Mixture"/> class.
            </summary>
            <param name="model">The model in which the <see cref="T:Mixture"/> will exist.</param>
            <param name="name">The name of the <see cref="T:Mixture"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Mixture"/> class.
            </summary>
            <param name="model">The model in which the <see cref="T:Mixture"/> will exist.</param>
            <param name="name">The name of the <see cref="T:Mixture"/>.</param>
            <param name="guid">The GUID of the <see cref="T:Mixture"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.Create(Highpoint.Sage.Materials.Chemistry.IMaterial[])">
            <summary>
            Creates a mixture from the specified constituents.
            </summary>
            <param name="constituents">The constituents.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.IsWritable">
            <summary>
            Indicates if write operations on this equipment are permitted.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.Clear">
            <summary>
            Removes all substances from this mixture.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.Initialize(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Initializes this mixture within the specified model. Could theoretically return an ITransitionFailureReason,
            but there is no way this operation can fail, so it always returns null.
            </summary>
            <param name="model">The model in which this mixture exists.</param>
            <returns>Null.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Constituents">
            <summary>
            Gets the constituents (Materials) that comprise this mixture.
            </summary>
            <value>The constituents.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.Equals(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Returns true if the two mixtures are semantically equal.
            </summary>
            <param name="otherGuy">The other mixture.</param>
            <returns>
            True if the two mixtures are semantically equal.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ContainedMassOf(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Returns the containeds mass of the specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/>.
            </summary>
            <param name="type">The specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetMoleFraction(Highpoint.Sage.Materials.Chemistry.MaterialType,Highpoint.Sage.Materials.Chemistry.MaterialType.Filter)">
            <summary>
            Gets the mole fraction of the specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> in this mixture,
            with the calculations counting only the materials that pass the <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType.Filter"/>.
            </summary>
            <param name="mt">The specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/>.</param>
            <param name="tf">The specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType.Filter"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetMoleFraction(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Gets the mole fraction of the specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> in this mixture,
            with the calculations counting all present material types.
            </summary>
            <param name="mt">The specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/>.</param>
            <returns>The mole fraction of the specified <see cref="T:Highpoint.Sage.Materials.Chemistry.MaterialType"/> in this mixture</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetMolarConcentration(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Returns the number of moles of the specified material type that exist in a liter of the mixture.
            </summary>
            <param name="mt">The specified material type</param>
            <returns>Moles per liter of the specified material type.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialType">
            <summary>
            Gets the material type of the mixture - always null.
            </summary>
            <value>The type of the material.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name of the mixture.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Mass">
            <summary>
            Gets the mass of the mixture.
            </summary>
            <value>The mass.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Temperature">
            <summary>
            Gets or sets the temperature of the mixture.
            </summary>
            <value>The temperature.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.SpecificHeat">
            <summary>
            The specific heat of the mixture, in Joules per kilogram degree-K.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.LatentHeatOfVaporization">
            <summary>
            The Latent Heat Of Vaporization of the mixture, in Joules per kilogram.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Volume">
            <summary>
            Gets or sets the volume of the mixture, in liters. If the mixture is a non-gaseous mixture,
            then gases are presumed to be in solution, and therefore to have zero incremental volume. If
            the mixture is all gaseous, though, the volumes of the simply gases are simply added together.
            </summary>
            <value>The volume of the mixture, in liters.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Density">
            <summary>
            Gets the density of the material in kilograms per liter.
            </summary>
            <value>The density.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetEstimatedBoilingPoint(System.Double)">
            <summary>
            Estimates a boiling point for the substance.
            </summary>
            <param name="atPressureInPascals">Pressure (in Pascals) at which the BP is desired.</param>
            <returns>Temperature in degrees Celsius.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetEstimatedBoilingPoint(System.Double,Highpoint.Sage.Materials.Chemistry.VaporPressure.PressureUnits)">
            <summary>
            Estimates a boiling point for the substance.
            </summary>
            <param name="pressure">The pressure.</param>
            <param name="pressureUnits">The pressure units.</param>
            <returns>Temperature in degrees Celsius.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.SuspendChangeEvents">
            <summary>
            Suspends the issuance of change events. When change events are resumed, one change event will be fired if
            the material has changed. This prevents a cascade of change events that would be issued, for example during
            the processing of a reaction.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ResumeChangeEvents(System.Boolean)">
            <summary>
            Resumes the change events. When change events are resumed, one change event will be fired if
            the material has changed. This prevents a cascade of change events that would be issued, for example during
            the processing of a reaction.
            </summary>
            <param name="issueSummaryEvents">if set to <c>true</c>, issues summarizing event for each change type that has occurred.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.AddMaterial(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Adds the specified material to the mixture.
            </summary>
            <param name="materialToAdd">The material to add.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RemoveMaterial(Highpoint.Sage.Materials.Chemistry.Substance)">
            <summary>
            Removes all of the specified substance from the mixture.
            </summary>
            <param name="s">The substance to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RemoveMaterial(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Removes all of the specified material from the mixture.
            </summary>
            <param name="m">The mixture to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RemoveMaterial(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Removes all of the specified material from the mixture.
            </summary>
            <param name="matlType">Type of the material.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RemoveMaterial(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double)">
            <summary>
            Removes the specified mass of the specified material from the mixture. If more is requested removed than is present, all that is present, is removed.
            </summary>
            <param name="matlType">Type of the specified material.</param>
            <param name="mass">The mass of the specified material to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RemoveMaterial(System.Double)">
            <summary>
            Removes the specified mass of the mixture in even proportions of all material types. If more is requested removed than is present, all that is present, is removed.
            </summary>
            <param name="mass">The mass of the mixture to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetVaporFor(System.Double,System.Double)">
            <summary>
            Returns an estimate of the amount and constituents of this mixture that would exist in a vapor space of the given size at the given temperature.
            </summary>
            <param name="volumeInM3">The volume of the vapor space, in cubic meters.</param>
            <param name="temperatureInK">The temperature of the vapor space, in degrees Kelvin.</param>
            <returns>...see comment above.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.AddEnergy(System.Double)">
            <summary>
            Adds the specified number of joules of energy to the mixture.
            </summary>
            <param name="joules">The joules to add to the mixture.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.RecomputeTemperature(System.Double)">
            <summary>
            Recomputes the temperature of the mixture after adding in the supplemental energy.
            </summary>
            <param name="supplementalEnergy">The supplemental energy, in Joules, to be added to the mixture prior to temperature recomputation.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.op_Explicit(Highpoint.Sage.Materials.Chemistry.Mixture)~Highpoint.Sage.SimCore.WriteLock">
            <summary>
            Obtains the <see cref="T:Highpoint.Sage.SimCore.WriteLock"/> that represents this mixture.
            </summary>
            <param name="mixture">The mixture.</param>
            <returns>The <see cref="T:Highpoint.Sage.SimCore.WriteLock"/> that represents this mixture.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Memento">
            <summary>
            Retrieves a memento from the mixture.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.#ctor(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Creates a new instance of the <see cref="T:MixtureMemento"/> class.
            </summary>
            <param name="mixture">The mixture.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.CreateTarget">
            <summary>
            Creates the instance of Mixture around which this mixture was created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.Load(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Loads the contents of this Memento into the Mixture.
            </summary>
            <param name="ism">The Mixture to receive the contents of the memento.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.GetDictionary">
            <summary>
            Emits an IDictionary form of the memento that can be, for example, dumped to
            Trace.
            </summary>
            <returns>An IDictionary form of the memento.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.Equals(Highpoint.Sage.Utility.Mementos.IMemento)">
            <summary>
            Deterimnes if this Mixture is equal to the specified Mixture.
            </summary>
            <param name="otherGuy">The specified Mixture.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Mixture.MixtureMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Mixture.MementoChangeEvent">
            <summary>
            Fired when the memento changes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.HasChanged">
            <summary>
            Reports whether the Mixture has changed relative to its memento
            since the last memento was recorded.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.ReportsOwnChanges">
            <summary>
            Indicates whether this Mixture can report memento changes to its
            parent. (Mementos can contain other mementos.)
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ToStringWithoutTemperature">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ToStringWithoutTemperature(System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <param name="massFmt">The mass format string. For example, &quot;F2&quot; will display to two decimals.</param>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.ToString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            Uses caller-supplied format strings in forming the numbers representing mass and temperature.
            </summary>
            <param name="tempFmt">The temperature's numerical format string.</param>
            <param name="massFmt">The mass's numerical format string.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Tag">
            <summary>
            Gets or sets the tag, which is a user-supplied data element.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Guid">
            <summary>
            Gets the GUID of the Mixture.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Mixture.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller">
            <summary>
            Class MaterialChangeDistiller is an intermediary between a mixture and its change event listeners. 
            When Hold() is called, it captures and stores all change events. When release is called, if 
            issueSummaryEvents is set to true, it creates a set of summary events that summarize each of the 
            change types (mass, temperature and constituents) into the minimum number of events necessary to
            represent those changes. This is useful for ongoing processes when you only want to log material
            changes at the start and end of a complex series of steps.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller.#ctor(Highpoint.Sage.SimCore.IExecutive,Highpoint.Sage.Materials.Chemistry.MaterialChangeListener@)">
            <summary>
            Does auto digests where all changes occurring in one timeslice are rolled into one event at the end of the timeslice.
            </summary>
            <param name="exec">The executive that governs time advancement.</param>
            <param name="mcl">The material change listener that will be fired at the end of the timeslice.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller.Hold(Highpoint.Sage.Materials.Chemistry.MaterialChangeListener@)">
            <summary>
            Begins to aggregate material change events coming from the specified listener.
            </summary>
            <param name="mcl">The specified listener.</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller.Release(Highpoint.Sage.Materials.Chemistry.MaterialChangeListener@,System.Boolean)">
            <summary>
            Summarizes and releases the aggregated material change events that came from the specified listener.
            </summary>
            <param name="mcl">The specified listener.</param>
            <param name="issueSummaryEvents">if set to <c>true</c>issue summary events. Otherwise, simply discard the change notifications.</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller.OnMaterialChanged(Highpoint.Sage.Materials.Chemistry.IMaterial,Highpoint.Sage.Materials.Chemistry.MaterialChangeType)">
            <summary>
            Called when the material this distiller is listening to has changed, and this distiller has been told to report those changes.
            </summary>
            <param name="theMaterial">The material.</param>
            <param name="mct">The MCT.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Mixture.GetSubstance(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Gets the substance of the specified material type from the mixture that this MaterialChangeDistiller is watching.
            </summary>
            <param name="materialType">Type of the material.</param>
            <returns>Substance.</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.MaterialState">
            <summary>
            Enum MaterialState represents the current (or initial) state of a material. It is used if the modeler wishes to
            represent the thermodynamic effects of state change, and if they do, then Latent Heat of Vaporization and SpecificHeat
            must be provided. Note - the mechanisms for modeling thermal transition to the solid state are not present, as this is
            a rare transition to occur in manufacturing processes - at least no need has yet been encountered.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialState.Unknown">
            <summary>
            The unknown MaterialState.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialState.Solid">
            <summary>
            The solid MaterialState.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialState.Liquid">
            <summary>
            The liquid MaterialState.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.MaterialState.Gas">
            <summary>
            The gas MaterialState.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.Substance">
            <summary>
            A substance is a homogeneous mixture - one constituent. Typically, this is a single element or compound. Temperatures externally are always presented in degrees celsius.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Chemistry.Substance.DefaultMassFormatString">
            <summary>
            The default mass format string. This can be changed by client code to default to lesser or greater format precision.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.IsWritable">
            <summary>
            Indicates if write operations on this equipment are permitted.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.op_Explicit(Highpoint.Sage.Materials.Chemistry.Substance)~Highpoint.Sage.SimCore.WriteLock">
            <summary>
            Performs an explicit conversion from <see cref="T:Highpoint.Sage.Materials.Chemistry.Substance"/> to <see cref="T:Highpoint.Sage.SimCore.WriteLock"/>.
            </summary>
            <param name="substance">The substance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Substance.MaterialChanged">
            <summary>
            Fired after a material has changed its mass, constituents or temperature.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.#ctor(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialState)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.Substance"/> class.
            </summary>
            <param name="type">The MaterialType of the substance.</param>
            <param name="mass">The mass of substance to be created.</param>
            <param name="tempInCelsius">The temperature of the substance in celsius.</param>
            <param name="state">The material state of the substance.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>IMaterial.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Name">
            <summary>
            The user-friendly name for this object.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Mass">
            <summary>
            Gets the mass of the material in kilograms.
            </summary>
            <value>The mass of the material in kilograms.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Moles">
            <summary>
            Gets the number of moles of the substance. This requires that Molecular Weight be set in the appropriate material type.
            </summary>
            <value>The moles.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Density">
            <summary>
            Gets the density of the material in kilograms per liter.
            </summary>
            <value>The density.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.State">
            <summary>
            Gets or sets the material state of the substance.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.SetMaterialSpec(System.Guid,System.Double)">
            <summary>
            Sets the material spec of the substance. Call this only once on any given substance. 
            See the tech note on Material Specifications. If you have multiple specifications 
            to set, call SetMaterialSpecs.
            </summary>
            <param name="identity">The material specification.</param>
            <param name="amount">The amount. Any remaining material is presumed to have no spec.</param>
            <exception cref="T:System.ApplicationException">Substance had a material specification set to it more than once.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.GetEstimatedBoilingPoint(System.Double)">
            <summary>
            Estimates a boiling point for the substance.
            </summary>
            <param name="atPressureInPascals">The pressure at which the boiling point is desired.</param>
            <returns>The estimated boiling point, in degrees celsius.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.SetMaterialSpecs(System.Collections.ICollection)">
            <summary>
            A non-'empty' guid in the collection applies that guid to the whole mass of this substance.
            A dictionaryEntry with a guid for a key and a double for a value assumes the double to be a
            mass, and the guid to be a spec, and assigns that spec to the specfied quantiy (mass) of
            material.
            </summary>
            <param name="specs"></param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.GetMaterialSpecs">
            <summary>
            Gets the material specification collection.
            </summary>
            <returns>ICollection.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.GetMaterialSpec(System.Guid)">
            <summary>
            Gets the mass, from this substance, of the provided material specification.
            </summary>
            <param name="identity">The material specification.</param>
            <returns>The mass, from this substance, of the provided material specification.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ClearMaterialSpecs">
            <summary>
            Clears the material specification collection.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ConvertMaterialSpec(System.Guid,System.Guid)">
            <summary>
            Converts the entire portion of a substance that is one material spec to another material spec.
            </summary>
            <param name="fromWhichMs">From which material spec.</param>
            <param name="toWhichMs">To which material spec.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ApplyMaterialSpecs(Highpoint.Sage.Materials.Chemistry.Substance,Highpoint.Sage.Materials.Chemistry.Substance)">
            <summary>
            Applies the material specs.
            </summary>
            <param name="emitted">The emitted.</param>
            <param name="original">The original.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Temperature">
            <summary>
            Gets or sets the temperature in degrees Celsius (internally, temperatures are stored in degrees Kelvin.)
            </summary>
            <value>The temperature.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.SpecificHeat">
            <summary>
            Gets the specific heat of the mixture, in Joules per kilogram degree-K.
            </summary>
            <value>The specific heat.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.LatentHeatOfVaporization">
            <summary>
            Latent heat of vaporization - the heat energy required to vaporize one kilogram of this material. (J/kg)
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.MaterialType">
            <summary>
            Gets the type of the material.
            </summary>
            <value>The type of the material.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Volume">
            <summary>
            Gets the volume of the material in liters.
            </summary>
            <value>The volume.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.AddEnergy(System.Double)">
            <summary>
            Adds the specified number of joules of energy to the mixture.
            </summary>
            <param name="joules">The joules to add to the mixture.</param>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if there is a write lock on the substance.</exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Energy">
            <summary>
            Gets or sets the amount of thermal energy in the substance.
            </summary>
            <value>The energy.</value>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if there is a write lock on the substance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.SuspendChangeEvents">
            <summary>
            Suspends the issuance of change events. When change events are resumed, one change event will be fired if
            the material has changed. This prevents a cascade of change events that would be issued, for example during
            the processing of a reaction. See <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture.MaterialChangeDistiller"/>.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ResumeChangeEvents(System.Boolean)">
            <summary>
            Resumes the change events. When change events are resumed, one change event will be fired if
            the material has changed. This prevents a cascade of change events that would be issued, for example during
            the processing of a reaction.
            </summary>
            <param name="issueSummaryEvents">if set to <c>true</c>, issues a summarizing event for each change type that has occurred.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.Add(Highpoint.Sage.Materials.Chemistry.Substance)">
            <summary>
            Adds the specified substance to this substance. Both substances must be of the same material type, or an exception will fire.
            </summary>
            <param name="substance">The substance.</param>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if there is a write lock on the substance.</exception>
            <exception cref="T:System.ApplicationException">Fired if the substances are not of the same material type.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.Remove(Highpoint.Sage.Materials.Chemistry.Substance)">
            <summary>
            Removes the specified substance from this substance. Both substances must be of the same material type, or an exception will fire..
            </summary>
            <param name="substance">The substance.</param>
            <returns>Substance.</returns>
            <exception cref="T:System.ApplicationException">Fired if the substances are not of the same material type.</exception>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if there is a write lock on the substance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.Remove(System.Double)">
            <summary>
            Removes the specified mass from this substance.
            </summary>
            <param name="mass">The mass.</param>
            <returns>Substance.</returns>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if there is a write lock on the substance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.Mixture"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ToStringWithoutTemperature">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ToStringWithoutTemperature(System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </summary>
            <param name="massFmt">The mass format string. For example, &quot;F2&quot; will display to two decimals.</param>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.ToString(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:Highpoint.Sage.Materials.Chemistry.IMaterial"></see>.
            Uses caller-supplied format strings in forming the numbers representing mass and temperature.
            </summary>
            <param name="tempFmt">The temperature's numerical format string.</param>
            <param name="massFmt">The mass's numerical format string.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Memento">
            <summary>
            Retrieves a memento from the substance, or reconstitutes it from a memento.
            </summary>
            <value>The memento.</value>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">Fired if this substance has an active write lock, and a reconstitution is requested.</exception>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Substance.MementoChangeEvent">
            <summary>
            This event is fired when the memento contents will have changed. This does not
            imply that the memento <i>has</i> changed, since the memento is
            recorded, typically, only on request. It <i>does</i> imply that if
            you ask for a memento, it might be in some way different from any
            memento you might have previously acquired.
            </summary>
            <exception cref="T:Highpoint.Sage.SimCore.WriteProtectionViolationException">
            </exception>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.HasChanged">
            <summary>
            Reports whether the object has changed relative to its memento
            since the last memento was recorded.
            </summary>
            <value><c>true</c> if this instance has changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.ReportsOwnChanges">
            <summary>
            Indicates whether this object can report memento changes to its
            parent. (Mementos can contain other mementos.)
            </summary>
            <value><c>true</c> if [reports own changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Highpoint.Sage.Materials.Chemistry.Substance.SubstanceMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.SubstanceMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.Tag">
            <summary>
            Gets or sets the tag, which is a user-supplied data element.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Chemistry.Substance"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.Substance.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.ByMass">
            <summary>
            A comparer that compares this substance with another substance only by mass. Useful for sorting mixture contents.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.Substance.ByMassThenName">
            <summary>
            A comparer that compares this substance with another substance by mass and then name. Useful for sorting mixture contents.
            </summary>
            <value>The comparer.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.VaporPressure.IEmissionCoefficients">
            <summary>
            Determines if, in a certain situation, a set of coefficients, and therefore the
            calculation mechanism that uses those coefficients, can be used.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.IEmissionCoefficients.IsSufficientlySpecified(System.Double)">
            <summary>
            Determines if, in a certain situation, a set of coefficients, and therefore the
            calculation mechanism that uses those coefficients, can be used.
            </summary>
            <param name="temperature">The temperature of the mixture being assessed, in degrees Kelvin.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.IAntoinesCoefficients.PressureUnits">
            <summary>
            Gets or sets the pressure units. Setter is ONLY for deserialization.
            </summary>
            <value>The pressure units.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.IAntoinesCoefficients.TemperatureUnits">
            <summary>
            Gets or sets the temperature units. Setter is ONLY for deserialization.
            </summary>
            <value>The temperature units.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator">
            <summary>
            Summary description for VaporPressureCalculator.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.ComputeVaporPressure(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,Highpoint.Sage.Materials.Chemistry.VaporPressure.TemperatureUnits,Highpoint.Sage.Materials.Chemistry.VaporPressure.PressureUnits)">
            <summary>
            Computes and returns the vapor pressure of the specified material type in the
            mixture at the given temperature and pressure. The returned value is expressed
            in millimeters of mercury.
            </summary>
            <param name="mt">The material type of interest.</param>
            <param name="temperature">The temperature of the mixture and free space, in degrees Kelvin.</param>
            <param name="srcUnits">The SRC units.</param>
            <param name="resultUnits">The result units.</param>
            <returns>
            Vapor Pressure in millimeters of Mercury.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.ComputeVaporPressure(Highpoint.Sage.Materials.Chemistry.MaterialType,Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Computes and returns the vapor pressure of the specified material type in the
            mixture at the given temperature and pressure. The returned value is expressed
            in atmospheres. From the WebEmit spreadsheet, we are using the following
            algorithm:
            The means for calculating Vapor Pressure VP of Substance S in mixture M at temperature T and pressure P, is:
            <code>
            
            VPHL is [Vapor Pressure by Henry's Law]
            VPRL is [Vapor Pressure by Raoult's Law]
            
            if ( mole fraction of S in M is &gt; 10% ) {
                VPRL if we can, else VPHL
            } else {
            	the lesser of VPRL &amp; VPHL
            }
            
            If no legitimate answer can be derived, we will return double.NaN
            </code> 
            </summary>
            <param name="mt">The material type of interest.</param>
            <param name="mixture">The mixture under consideration.</param>
            <returns>Vapor Pressure in Atmospheres.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.SumOfPartialPressures(Highpoint.Sage.Materials.Chemistry.Mixture,System.Double)">
            <summary>
            Computes the sum of partial pressures of all of the substances in the specified mixture at the specified temerature. 
            </summary>
            <param name="mixture">The mixture with the substances whose partial pressures are to be added.</param>
            <param name="temperature">The temperature at which the partial pressures are to be calculated, in degrees kelvin.</param>
            <returns>The sum of partial pressures of the substances in the mixture, in Pascals, to be found above the mixture.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.ComputeBoilingPoint(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double)">
            <summary>
            Estimates the boiling point of the material type at the provided pressure. This is the point at
            which the partial pressure is equal to the external pressure.
            </summary>
            <param name="mt">The material type.</param>
            <param name="atPressureInPascals">The absolute pressure in pascals of the surrounding environment.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.ComputeBoilingPoint(Highpoint.Sage.Materials.Chemistry.Mixture,System.Double)">
            <summary>
            Estimates the boiling point of the material types in the mixture at the provided pressure. This is the point at
            which the partial pressure is equal to the external pressure.
            </summary>
            <param name="m">The mixture whose boiling point is to be computed.</param>
            <param name="atPressureInPascals">The pressure in pascals of the surrounding environment.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureCalculator.PartialPressure(Highpoint.Sage.Materials.Chemistry.Substance,System.Double,Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Computes the partial pressure of a specified substance in the volume above a specified mixture at a specified temperature.
            Note that we will ignore the temperature of the mixture.
            </summary>
            <param name="substance">The substance whose partial pressure we desire.</param>
            <param name="temperature">The temperature at which we wish to have the partial pressure computed, in degrees kelvin.</param>
            <param name="mixture">The mixture that specifies the other materials that are to be considered in the calculation.</param>
            <returns>The partial pressure of the specified substance in the volume above the specified mixture, in Pascals.</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException">
            <summary>
            MissingParameterException is thrown when a required parameter is missing. Typically used in a late bound, read-from-name/value pair collection scenario.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Chemistry.VaporPressure.VaporPressureException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficients3Impl">
            <summary>
            Antoine's coefficients which are expressed in °C and mmHg.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficients3Impl.PressureUnits">
            <summary>
            Gets or sets the pressure units. Setter is ONLY for deserialization.
            </summary>
            <value>The pressure units.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficients3Impl.TemperatureUnits">
            <summary>
            Gets or sets the temperature units. Setter is ONLY for deserialization.
            </summary>
            <value>The temperature units.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficientsExt">
            <summary>
            Extended Antoine Coefficients are always, and only, specified in °C and mmHg.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficientsExt.PressureUnits">
            <summary>
            Gets or sets the pressure units. Setter is ONLY for deserialization.
            </summary>
            <value>The pressure units.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Chemistry.VaporPressure.AntoinesCoefficientsExt.TemperatureUnits">
            <summary>
            Gets or sets the temperature units. Setter is ONLY for deserialization.
            </summary>
            <value>The temperature units.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.IUpdater">
            <summary>
            An implementer makes on-request updates to one or more materials.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.IUpdater.DoUpdate(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Performs the update operation that this implementer performs.
            </summary>
            <param name="initiator">The material to be updated (along with any dependent materials.)</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.IUpdater.Detach(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Causes this updater no longer to perform alterations on the targeted mixture. This may not be implemented in some cases.
            </summary>
            <param name="detachee">The detachee.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.NullUpdater">
            <summary>
            A dummy that makes no updates to any materials.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.NullUpdater.DoUpdate(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Performs the update operation that this implementer performs.
            </summary>
            <param name="initiator">The material to be updated (along with any dependent materials.)</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.NullUpdater.Detach(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Causes this updater no longer to perform alterations on the targeted mixture. This may not be implemented in some cases.
            </summary>
            <param name="detachee">The detachee.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialTransferrer">
            <summary>
            Performs transferral of material from one mixture to another.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.MaterialTransferrer"/> class.
            </summary>
            <param name="model">The model in which the update is to be run.</param>
            <param name="from">The source mixture.</param>
            <param name="to">The destination mixture.</param>
            <param name="what">The exemplar representing what is to be transferred.</param>
            <param name="duration">The transfer duration.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Materials.Chemistry.Mixture@,Highpoint.Sage.Materials.Chemistry.Mixture@,System.Collections.Generic.List{Highpoint.Sage.Materials.MaterialTransferrer.TypeSpec},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.MaterialTransferrer"/> class.
            </summary>
            <param name="model">The model in which the update is to be run.</param>
            <param name="from">The source mixture.</param>
            <param name="to">The destination mixture.</param>
            <param name="typespecs">The list of typespecs representing what is to be transferred.</param>
            <param name="duration">The transfer duration.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.Start">
            <summary>
            Starts the transfer that this MaterialTransferrer represents.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.BlockTilStart">
            <summary>
            Blocks the caller's detachable event thread until this transfer has started.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.BlockTilDone">
            <summary>
            Blocks the caller's detachable event thread until this transfer has finished.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.DoUpdate(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Performs the update operation that this implementer performs.
            </summary>
            <param name="initiator">The initiator.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferrer.Detach(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Causes this updater no longer to perform alterations on the targeted mixture. This is not implemented in this class, and will throw an exception.
            </summary>
            <param name="detachee">The detachee.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Dispensary">
            <summary>
            A Dispensary holds a Mixture that supports infusion of materials (i.e. mixtures or substances) and
            getters that specify the quantity they want. If there is not enough, then the getter is suspended,
            and resumed when there is enough material there to satisfy the getter's request. The purpose is to
            allow suppliers to dump various quantities at varying times, of materials into it, and to support 
            consumers that say, "Give me 100 kg of substance X." If there are 100 kg of X already, then it is
            dispensed to the consumer. If there are not, then the consumer is blocked, and then (potentially)
            unblocked later when there *are* 100 kg. If there are never 100 kg, though, the consumer will never
            unblock.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Dispensary.DummyIdec">
            <summary>
            This class exists solely so that the Dispensary can assume there is always a getter or a putter waiting. 
            The dummy idec, though, acts as though (if there isn't actually a real one) the waiting getter or putter
            has, or needs, zero kilograms.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Emissions.EmissionsClassifications">
            <summary>
            An enumeration that contains all of the emissions classifications that we know about.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.Voc">
            <summary>
            Volatile Organic Compound
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.SaraTri">
            <summary>
            Superfund Amendment and Reauthorization Act Toxic Release Inventory
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.Hap">
            <summary>
            Hazardous Air Pollutant
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.Nata">
            <summary>
            National Air Toxics Assessment
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.Ghg">
            <summary>
            Greenhouse Gas
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Emissions.EmissionsClassifications.Odc">
            <summary>
            Ozone Depleting Compound
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Emissions.EmissionsClassification">
            <summary>
            Marker class whose derived classes indicate Classifications of emissions that are created by a
            specific material type. These are attached to specific material types, and are used to identify
            the reporting requirements relevant to that material type.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Emissions.EmissionsClassification.Name">
            <summary>
            Gets the name of the Emissions Classification.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.MassVolumeTracker">
            <summary>
            Used to determine Mass and Volume high and low values during a change in mixture.
            We model a mixture into which charges and discharges are performed with a high-level limit
            equal to the vessel's capacity. The charges and discharges are done in equal proportions during
            a number of cycles necessary to charge all of the inflows and discharge all of the outflows. With
            each charge and discharge, we log the high and low levels for Mass and Volume.
            Reactions may take place as a result of the charges.
            All mixtures passed in are cloned within this tracker before manipulation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.#ctor(Highpoint.Sage.Materials.Chemistry.ReactionProcessor)">
            <summary>
            Creates a MVTracker without initial mixture, transfers or capacity specified. The way this
            is used is to turn off level tracking in a mixture/vessel, then add &amp; remove what is specified (add, then remove),
            then log the tracker's high and low marks, and finally turn level tracking back on.
            Note - this is done inside the SOMTask's DoOperations(...) method, and takes the form of<p></p>
            <code>this.GetSOD(graphContext).SetChangeLogging(true);</code>
            </summary>
            <param name="rp">The ReactionProcessor that knows of any reactions that will take place. Can be null.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.#ctor(Highpoint.Sage.Materials.Chemistry.ReactionProcessor,System.Double)">
            <summary>
            Creates a MVTracker without initial mixture, transfers or capacity specified. The way this
            is used is to turn off level tracking in a mixture/vessel, then add &amp; remove what is specified (add, then remove),
            then log the tracker's high and low marks, and finally turn level tracking back on.
            Note - this is done inside the SOMTask's DoOperations(...) method, and takes the form of<p></p>
            <code>this.GetSOD(graphContext).SetChangeLogging(true);</code>
            </summary>
            <param name="vesselCapacity">The capacity of the vessel in which the mixture is being handled.</param>
            <param name="rp">The ReactionProcessor that knows of any reactions that will take place. Can be null.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.#ctor(Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture,Highpoint.Sage.Materials.Chemistry.Mixture,System.Double,Highpoint.Sage.Materials.Chemistry.ReactionProcessor)">
            <summary>
            Creates a MVTracker with a full complement of parameters.
            </summary>
            <param name="initial">The initial mixture.</param>
            <param name="inflow">The inflowing mixture.</param>
            <param name="outflow">The outflowing mixture.</param>
            <param name="capacity">The capacity of the vessel.</param>
            <param name="rp">The ReactionProcessor that knows of any reactions that will take place. Can be null.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.SetInitialMixture(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Sets the initial mixture in the modeled vessel.
            </summary>
            <param name="initial">The initial mixture in the modeled vessel.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.SetInflowMixture(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Sets the inflowing mixture in the modeled vessel.
            </summary>
            <param name="inflow">The inflowing mixture in the modeled vessel.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.SetOutflowMixture(Highpoint.Sage.Materials.Chemistry.Mixture)">
            <summary>
            Sets the outflowing mixture in the modeled vessel.
            </summary>
            <param name="outflow">The outflowing mixture in the modeled vessel.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.SetVesselCapacity(System.Double)">
            <summary>
            Sets the volumetric capacity of the modeled vessel.
            </summary>
            <param name="capacity">The volumetric capacity of the modeled vessel.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MassVolumeTracker.Process">
            <summary>
            Performs the inflow/outflow cycle analysis. After this runs, consult the Mass, Volume and Temperature history members.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MassVolumeTracker.MassHistory">
            <summary>
            DoubleTracker that provides the initial, min, max and final mass values of the mixture in the vessel.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MassVolumeTracker.VolumeHistory">
            <summary>
            DoubleTracker that provides the initial, min, max and final volume values of the mixture in the vessel.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialService">
            <summary>
            A MaterialService manages a set of connection tokens (a discrete, replenishable resource), 
            an available capacity (a continuous, replenishable resource) and a set of compartments
            which are MaterialResourceItems. A Compartment can be thought of as a "bucket" with
            material in it, and a specified capacity &amp; overbooking setting.  Overbooking means that
            you can, for example, take more than is actually there.
            <para/>
            There is a mode setting called "Wildcard mode". When set to true, and a charge or
            discharge is requested involving a material that the MaterialService does not already have,
            a compartment is created with an infinite capacity for the desired material, and
            infinite overbooking permitted so that it may receive or supply as much as you need.
            The quantity will start at zero, and will always reflect the amount that has been put
            in (if positive) or taken out (if negative). When "Wildcard" is set to false, In order
            to complete a requested activity, (charge or discharge) there must be a compartment
            of the correct MaterialTypes, and with sufficient quantity, if requesting a charge,
            or capacity, if requesting a discharge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.#ctor">
            <summary>
            Default constructor for serialization only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Int32,System.Double,Highpoint.Sage.Materials.Chemistry.MaterialCatalog,System.Double)">
            <summary>
            Creates a MaterialService. A MaterialService models a system that provides some service or material, but
            may only be able to service a limited number of clients, and perhaps only at a limited supply rate.
            </summary>
            <param name="model">The model to which this MaterialService belongs.</param>
            <param name="name">The name of this MaterialService.</param>
            <param name="guid">The guid of this MaterialService.</param>
            <param name="nSvcTokens">The number of clients this MaterialService can service at the same time.</param>
            <param name="maxDeliveryRate">The maximum kilograms per minute that this MaterialService can provide.
            Note - if physical materials are not delivered, this value can be any units desired.</param>
            <param name="materialCatalog">The material catalog from which are drawn the materials in this MaterialService.</param>
            <param name="defaultMaterialTemperature">The temperature at which materials will be auto-created.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.IsSubResource(Highpoint.Sage.Resources.IResource)">
            <summary>
            Returns true if the rsc is any of the child resources (ServiceTokenDispenser, 
            CapacityDispenser or MaterialResourceItems) of this MaterialService.
            </summary>
            <param name="rsc">The candidate child resource.</param>
            <returns>true if the rsc is any of the child resources (ServiceTokenDispenser, 
            CapacityDispenser or MaterialResourceItems) of this MaterialService.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.NumberOfServiceTokens">
            <summary>
            The number of clients this MaterialService can service at the same time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.MaxDeliveryRate">
            <summary>
            The maximum kilograms per minute that this MaterialService can provide.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Compartments">
            <summary>
            Returns a collection of MaterialResourceItem objects that represent the material compartments.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddCompartment(Highpoint.Sage.Materials.Chemistry.MaterialResourceItem)">
            <summary>
            Adds a compartment for the specified material type. The MaterialResourceItem
            will be the provider and/or receiver of material of the specified type.
            </summary>
            <param name="mri">The MaterialResourceItem that will supply and absorb material
            of its type on behalf of this MaterialService.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddCompartment(Highpoint.Sage.SimCore.IModel,System.Guid,System.Double,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a compartment for the specified material type. Creates a MaterialResourceItem
            which will be the provider and/or receiver of material of the specified type.
            </summary>
            <param name="model">The model that contains the material catalog that holds the material type whose guid is listed below.</param>
            <param name="materialTypeGuid">The guid of the intended material type which will be in this compartment.</param>
            <param name="initialQuantity">How many kilograms of this material will be in this compartment to begin with.</param>
            <param name="initialTemp">The initial temperature of the material in the new material compartment.</param>
            <param name="initialCapacity">How many kilograms of the material this compartment will be able to hold.</param>
            <param name="compartmentGuid">The guid that will identify this compartment.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddCompartment(Highpoint.Sage.SimCore.IModel,System.Guid,System.Collections.ICollection,System.Double,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a compartment for the specified material type and specifications. Creates a MaterialResourceItem
            which will be the provider and/or receiver of material of the specified type and specifications.
            </summary>
            <param name="model">The model that contains the material catalog that holds the material type whose guid is listed below.</param>
            <param name="materialTypeGuid">The guid of the intended material type which will be in this compartment.</param>
            <param name="materialSpecifications">A Collection of guids, or a collection of DictionaryEntry objects for which the keys are guids. These guids represent the materialSpecs that characterize the material.</param>
            <param name="initialQuantity">How many kilograms of this material will be in this compartment to begin with.</param>
            <param name="initialTemp">The initial temperature of the material in the new material compartment.</param>
            <param name="initialCapacity">How many kilograms of the material this compartment will be able to hold.</param>
            <param name="compartmentGuid">The guid that will identify this compartment.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddCompartment(Highpoint.Sage.SimCore.IModel,System.Guid,System.Guid,System.Double,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a compartment for the specified material type, specifications, initial quantity, temperature &amp; capacity. Creates a MaterialResourceItem
            which will be the provider and/or receiver of material of the specified type and specifications.
            </summary>
            <param name="model">The model that contains the material catalog that holds the material type whose guid is listed below.</param>
            <param name="materialTypeGuid">The guid of the intended material type which will be in this compartment.</param>
            <param name="materialSpecificationGuid">The single Guid that denotes the material specification of material in this compartment.</param>
            <param name="initialQuantity">How many kilograms of this material will be in this compartment to begin with.</param>
            <param name="initialTemp">The initial temperature of the material in the new material compartment.</param>
            <param name="initialCapacity">How many kilograms of the material this compartment will be able to hold.</param>
            <param name="compartmentGuid">The guid that will identify this compartment.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.AutocreateMaterialCompartments">
            <summary>
            If true, this MaterialService will automatically create material compartments
            and provide them with an inexhaustible supply of material, if a material
            that was hitherto unknown is requested.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.GetCompartment(System.Guid,System.Guid)">
            <summary>
            Gets the MaterialResourceItem that is acting as the compartment for the
            specified material type. Creates one anew if there was not one, and this
            MaterialService has its AutocreateMaterialCompartments parameter set to true.
            Will return null if there is no compartment with the given material type.
            </summary>
            <param name="materialTypeGuid">The guid of the material type whose compartment we desire.</param>
            <param name="materialSpecification">The single guid that describes the material spec we seek on the material type.</param>
            <returns>The MaterialResourceItem that is acting as the compartment for the
            specified material type.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.GetCompartment(Highpoint.Sage.Materials.Chemistry.MaterialType)">
            <summary>
            Gets the MaterialResourceItem that is acting as the compartment for the
            specified material type. Creates one anew if there was not one, and this
            MaterialService has its AutocreateMaterialCompartments parameter set to true.
            Will return null if there is no compartment with the given material type.
            </summary>
            <param name="mt">The material type whose compartment we desire.</param>
            <returns>The MaterialResourceItem that is acting as the compartment for the
            specified material type.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.GetCompartment(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Collections.ICollection)">
            <summary>
            Gets the MaterialResourceItem that is acting as the compartment for the
            specified material type. Creates one anew if there was not one, and this
            MaterialService has its AutocreateMaterialCompartments parameter set to true.
            Will return null if there is no compartment with the given material type.
            </summary>
            <param name="mt">The material type whose compartment we desire.</param>
            <param name="materialSpecifications">A collection of the material specifications 
            that are to be applied to this compartment.</param>
            <returns>The MaterialResourceItem that is acting as the compartment for the
            specified material type.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.EstablishConnection(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Creates an IConnection between this MaterialService and the specifed port.
            </summary>
            <param name="otherGuysPort">The port to which this MaterialService is to be connected.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.DestroyConnection(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Destroys the connection between this MaterialService and the specified port.
            </summary>
            <param name="otherGuysPort">The port to which this service has a connection.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Tag">
            <summary>
            Tag object is for holding user-specified references.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Name">
            <summary>
            The name of this MaterialService.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Description">
            <summary>
            A description of this MaterialService.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Guid">
            <summary>
            The Guid of this MaterialService.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Model">
            <summary>
            The Model to which this MaterialService belongs.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.Ports">
            <summary>
            The PortSet that contains all ports currently registered with this
            MaterialService. The MaterialService will temporarily create and register ports
            with itself as needed to service charge/discharge requests.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a Port to this MaterialService's PortSet.
            </summary>
            <param name="port">The port that is being registered.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialService.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this MaterialService's PortSet.
            </summary>
            <param name="port">The port to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.ClearPorts">
            <summary>
            Unregisters all ports from this PortSet.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.Setup(Highpoint.Sage.Materials.Chemistry.IMaterial,System.Double,Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Performs setup for utilization of this MaterialService. This involves acquiring a
            service token (if we are limited to a given number of available tokens), reserving the
            material that will be transferred (if we are going to physically transfer materials),
            and reserving the delivery capacity (if we are limiting overall available capacity).
            </summary>
            <param name="material">The material we will be transferring. Null if no material will be transferred.</param>
            <param name="deliveryRate">The amount of capacity this request will use. Units are kilograms per minute, by default.</param>
            <param name="otherGuysPort">The resource-user's desired source or sink port.</param>
            <returns>
            An opaque object that must be fed back to this MaterialService during subsequent stages
            of the usage of this operation.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.Setup(Highpoint.Sage.Materials.Chemistry.IMaterial,System.Double,Highpoint.Sage.ItemBased.Ports.IPort,System.Boolean)">
            <summary>
            Performs setup for utilization of this MaterialService. This involves acquiring a
            service token (if we are limited to a given number of available tokens), reserving the
            material that will be transferred (if we are going to physically transfer materials),
            and reserving the delivery capacity (if we are limiting overall available capacity).
            A current limitation of this class is that its use must be entirely contained within
            the scope of one SOMTask.
            </summary>
            <param name="material">The material we will be transferring. Null if no material will 
            be transferred.</param>
            <param name="deliveryRate">The amount of capacity this request will use. Units are 
            kilograms per minute, by default.</param>
            <param name="otherGuysPort">The resource-user's desired source or sink port.</param>
            <param name="createConnection">if set to <c>true</c> this setup will create a connection 
            for the transfer, and destroy the connection after the transfer is completed.</param>
            <returns>
            An opaque object that must be fed back to this MaterialService during subsequent stages
            of the usage of this operation.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.Execute(System.Collections.IDictionary,System.Object)">
            <summary>
            Performs the actual transfers in or out of this MaterialService. Setup must have been 
            completed beforehand, and teardown must follow completion of this call.
            </summary>
            <param name="graphContext">The graphContext of the current batch.</param>
            <param name="key">The object that was returned as the key from the preceding Setup call.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.Teardown(System.Object)">
            <summary>
            Releases all ports, capacity and connector tokens, and removes the MaterialTransfer
            object from the transferTable. This call must correspond 1-to-1 with any setup and 
            execute calls, and must follow the Execute(...) call.
            </summary>
            <param name="key">The object that was returned as the key from the original Setup call.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialService.Teardown(System.Object,System.Boolean)">
            <summary>
            Releases all ports, capacity and connector tokens, and removes the MaterialTransfer
            object from the transferTable. This call must correspond 1-to-1 with any setup and
            execute calls, and must follow the Execute(...) call.
            </summary>
            <param name="key">The object that was returned as the key from the original Setup call.</param>
            <param name="destroyConnection">if set to <c>true</c> the teardown will destroy the connection.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialService.AcquisitionKey">
            <summary>
            Used to keep track of the resource requests associated with a material service request.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialService.ReservationPair">
            <summary>
            A pair of request/target objects, used in a queue to successfully reserve all resources before 
            acquiring any of them. All-or-none.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransfer.#ctor(Highpoint.Sage.Materials.Chemistry.Mixture,System.TimeSpan)">
            <summary>
            Creates a MaterialTransfer object.
            </summary>
            <param name="mixture">The mixture being transferred.</param>
            <param name="duration">The duration of the transfer.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransfer.Mixture">
            <summary>
            The mixture being transferred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransfer.SourceDuration">
            <summary>
            The amount of time it takes for the source to output the mixture represented in this Transfer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransfer.DestinationDuration">
            <summary>
            The amount of time it takes for the sink to receive the mixture represented in this Transfer.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialTransferRecord">
            <summary>
            A class that holds the details of a material charge, transfer or discharge.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferRecord.#ctor">
            <summary>
            A MaterialTransferRecord is a class that holds data representing a transfer of material
            from one place to another in the SOM.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.BatchGuid">
            <summary>
            The Guid associated with the material that was transferred.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.MaterialTypeGuid">
            <summary>
            The Guid associated with the material that was transferred.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.MaterialMass">
            <summary>
            The mass of the material that was transferred.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.MaterialTemperature">
            <summary>
            The temperature of the material that was transferred.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.SourceGuid">
            <summary>
            The GUID of the source (supplying) entity. This will be a SOMOperation if an internal transfer 
            or a discharge, and a SOMService if a charge.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.DestinationGuid">
            <summary>
            The GUID of the destination (receiving) entity. This will be a SOMOperation if an internal transfer
             or a charge, and a SOMService if a discharge.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.SourcePortGuid">
            <summary>
            The key of the Source's Port through which the material is being charged or discharged.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.DestinationPortGuid">
            <summary>
            The key of the Destination's Port through which the material is being charged or discharged.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.StartTime">
            <summary>
            The start time of the transfer, measured in minutes after the commencement of execution of this batch.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.Duration">
            <summary>
            The duration, in minutes, of the transfer.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.MaterialTransferType">
            <summary>
            Enumeration to declare whether this transferRecord refers to a charge, a discharge, 
            or an internal (i.e. between units) transfer.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.ConcurrencyGuid">
            <summary>
            Identifies substance transfers that occurred at the same time through the same connection.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.ParentMaterialTypeGuid">
            <summary>
            The guid of a materialType that is to be considered the parent type of this transfer. Applies only to charges.
            For example, if this transfer has a mixture with 100 kg of water, and 4 kg of salt, and the parent material
            type guid refers to the substance 'Saline', then the actual charge came from the 'saline' inventory, not the
            'water' and 'salt' inventories.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.ParentMaterialTypeSpecGuid">
            <summary>
            Refer to the commentary for 'ParentMaterialTypeGuid'. In that case, the ParentMaterialTypeSpecGuid might be
            used to distinguish between saline that was purchased from Vendor A, and saline that was purchased from Vendor B.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.MaterialSpecificationGuid">
            <summary>
            The MaterialSpecificationGuid of the substance in this transfer. If Guid.Empty, the material specification is &lt;nothing&gt;.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.IsProduct">
            <summary>
            True if the material in this transfer is a part of the product stream
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferRecord.SerialNumber">
            <summary>
            The serial number of this MTR.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferRecord.Detail(Highpoint.Sage.SimCore.Model)">
            <summary>
            Represents this transfer as a string, with additional details provided by the model.
            </summary>
            
            <returns>A string that describes this transfer.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferRecord.Detail">
            <summary>
            Represents this transfer as a string.
            </summary>
            <returns>A string that describes this transfer.</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType">
            <summary>
            An enumeration that describes whether this transfer is entering, leaving, or within the model.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType.Uninitialized">
            <summary>
            The transfer record is not initialized.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType.Charge">
            <summary>
            The transfer is a charge into the model.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType.Discharge">
            <summary>
            The transfer is a discharge from the model.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType.Internal">
            <summary>
            The transfer is between operations or operation steps, but within the model.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.MaterialTransferRecord.TransferType.Emission">
            <summary>
            The transfer represents an emission.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.IMaterialExtractor">
            <summary>
            This interface is implemented by an object that will be used to extract material 
            from a mixture. Note that the implementer will actually change the source material in
            doing so.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.IMaterialExtractor.GetExtract(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Extracts a substance or mixture from another substance or mixture.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.IMaterialTransferHelper">
            <summary>
            This interface is implemented by any object that intends to help perform a material transfer
            by extracting the material of interest, and declaring how long it will take to transfer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.IMaterialTransferHelper.Duration">
            <summary>
            Indicates the duration of the transfer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.IMaterialTransferHelper.Mass">
            <summary>
            Indicates the mass of material that will be involved in the transfer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.IMaterialTransferHelper.MaterialType">
            <summary>
            Indicates the MaterialType of the material that will be involved in the transfer. If it is
            null, then the specified mass will be transferred, but it will be of the mixture specified
            in the target mixture.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialTransferSpecByMass">
            <summary>
            Represents a request for material transfer, specified as mass of a particular substance. 
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByMass.MassScaler">
            <summary>
            Gets the mass scaler associated with this MaterialTransferSpecByMass.
            </summary>
            <value>The mass scaler.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByMass.DurationScaler">
            <summary>
            Gets the duration scaler associated with this MaterialTransferSpecByMass.
            </summary>
            <value>The duration scaler.</value>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.#ctor(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.TimeSpan)">
            <summary>
            Creates a MaterialTransferSpecByMass that will transfer a specified mass of a
            specified type of material, over a specified duration. It is presumed that duration
            and mass do NOT scale, so if you want them to, you will need to add the
            appropriate scaling adapters.
            </summary>
            <param name="matlType">The material type to be transferred.</param>
            <param name="mass">The base amount (before scaling) of the material to transfer.</param>
            <param name="duration">The base duration (before scaling) of the transfer.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.SetDurationScalingAdapter(Highpoint.Sage.Mathematics.Scaling.ITimeSpanScalingAdapter)">
            <summary>
            Provides this transferSpec with a scaling adapter that will scale the transfer duration.<p></p>
            As an example, adding a TimeSpanLinearScalingAdapter with a linearity of 1.0 will cause
            duration to scale precisely in proportion to the aggregate scale provided in the Rescale operation.
            </summary>
            <param name="tsa">The ITimeSpanScalingAdapter that will provide timespan scaling for this transfer.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.SetMassScalingAdapter(Highpoint.Sage.Mathematics.Scaling.IDoubleScalingAdapter)">
            <summary>
            Provides this transferSpec with a scaling adapter that will scale the mass to be transferred.<p></p>
            As an example, adding a DoubleLinearScalingAdapter with a linearity of 1.0 will cause
            mass to scale precisely in proportion to the aggregate scale provided in the Rescale operation.
            </summary>
            <param name="dsa">The scaling adapter that will perform mass scaling for this transfer spec.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByMass.MaterialType">
            <summary>
            The material type to be transferred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByMass.Mass">
            <summary>
            The mass to be transferred. This value will reflect any scaling operations that have been done.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByMass.Duration">
            <summary>
            The duration of the transfer. This value will reflect any scaling operations that have been done.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.Rescale(System.Double)">
            <summary>
            Commands a rescale of the transfer spec's mass and duration to a scale factor of the originally
            defined size.
            </summary>
            <param name="aggregateScale">The scaling to be applied to the initally-defined values.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.GetExtract(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Gets the material to be transferred by extracting it from the source material.
            </summary>
            <param name="source">The material from which the transfer is to be made.</param>
            <returns>The material to be transferred.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.Clone">
            <summary>
            Clone operation allows a MTSBM object to be reused, thereby eliminating the need to
            re-specify each time the transfer is to take place.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="E:Highpoint.Sage.Materials.MaterialTransferSpecByMass.CloneEvent">
            <summary>
            Fired after a cloning operation has taken place.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByMass.ToString">
            <summary>
            Provides a human-readable description of the transfer mass, material, and duration, scaled as requested.
            </summary>
            <returns>A human-readable description of the transfer mass, material, and duration, scaled as requested.</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage">
            <summary>
            Represents a request for material transfer, specified as a percentage of a particular
            material in the source mixture.  Stored in an arraylist keyed to the port on which it
            is to be effected, in the SOMTaskDetails.m_xferOutSpecLists hashtable.<p></p>
            <p></p>
            Note that a MaterialTransferSpecByPercentage is not scalable. It is, in effect, scaled
            by the amount of material in the source container.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.#ctor(Highpoint.Sage.Materials.Chemistry.MaterialType,System.Double,System.TimeSpan)">
            <summary>
            Creates a MaterialTransferSpecByMass that will transfer a specified mass of a
            specified type of material, over a specified duration. It is presumed that duration
            and mass do NOT scale, so if you want them to, you will need to add the
            appropriate scaling adapters.
            </summary>
            <param name="matlType">The material type to be transferred.</param>
            <param name="percentage">The percentage of the material of the specified type in the source container.</param>
            <param name="durationPerKilogram">The timespan required to transfer each kilogram of material.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.MaterialType">
            <summary>
            The type of the material to be transferred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.Percentage">
            <summary>
            The percentage of the material of the specified type that is found in the source container, that should be transferred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.Duration">
            <summary>
            The total duration of the transfer. Note that since this is dependent upon the mass,
            which is dependent on how much of the type of material was found in the source container,
            it will not be known correctly until after <b>GetExtract</b> is called.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.Mass">
            <summary>
            The total mass of the transfer. Note that since this is dependent upon how
            much of the type of material was found in the source container,
            it will not be known correctly until after <b>GetExtract</b> is called.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.DurationPerKilogram">
            <summary>
            The timespan to allot for each kilogram transferred.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.GetExtract(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Gets the material to be transferred by extracting it from the source material.
            </summary>
            <param name="source">The material from which the transfer is to be made.</param>
            <returns>The material to be transferred.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.Clone">
            <summary>
            Clone operation allows a MTSBP object to be reused, thereby eliminating the need to
            re-specify each time the transfer is to take place.
            </summary>
            <returns>A clone of this instance.</returns>
        </member>
        <member name="E:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.CloneEvent">
            <summary>
            Fired after a clone operation has taken place.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.MaterialTransferSpecByPercentage.ToString">
            <summary>
            Provides a human-readable description of the transfer mass, material, and duration, scaled as requested.
            </summary>
            <returns>A human-readable description of the transfer mass, material, and duration, scaled as requested.</returns>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureControllerMode">
            <summary>
            This is the operating mode for the Temperature Controller. The temperature
            controller will either maintain a constant driving temperature in the cooling
            or heating medium (constant_T mode), it will maintain a constant delta T
            across the boundary between the cooling or heating medium and the mixture (as
            in the constant_DeltaT mode), or it will manipulate the deltaT to ensure a
            constant temperature ramp rate in the mixture.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureControllerMode.ConstantT">
            <summary>
            Maintains a constant driving temperature in the cooling or heating medium (constant_T mode)
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureControllerMode.ConstantDeltaT">
            <summary>
            Maintains a constant delta T across the boundary between the cooling or heating medium and the mixture.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureControllerMode.Constant_RampRate">
            <summary>
            Maintains a constant temperature ramp-rate in the mixture.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureRampRate">
            <summary>
            Describes a temperature ramp rate in degrees kelvin per time period. Note that
            since the degreesKelvin parameter describes a delta-T rather than an absolute,
            degrees Celsius per time period as well. Only degrees Fahrenheit per time period
            is wrong.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureRampRate.#ctor(System.Double,System.TimeSpan)">
            <summary>
            Creates a temperature ramp rate object representing a ramp rate of a specified
            number of degrees kelvin (or celsius) per given time period.
            </summary>
            <param name="degreesKelvin">The number of degrees kelvin per the specified time period.</param>
            <param name="perTimePeriod">The time period over which the specified temperature change takes place.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureRampRate.DegreesKelvin">
            <summary>
            The number of degrees kelvin per the specified time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureRampRate.PerTimePeriod">
            <summary>
            The time period over which the specified temperature change takes place.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController">
            <summary>
            This interface permits the user to set, read and control an object's temperature control capabilities.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.SetThermalConductance(System.Double,System.Double)">
            <summary>
            This sets a value for thermal conductance between the compartment containing the
            heating/cooling medium and the compartment containing the mixture in a vessel at a
            certain level. For example, SetThermalConductance(0.30,150) sets the thermal conductance
            to 150 Watts per degree kelvin difference between the heating/cooling medium and the
            mixture, when the mixture fills the vessel to it's '30% FULL' line.
            </summary>
            <param name="level">Describes at what level (0.30 equates to 30% FULL) the datum is correct.</param>
            <param name="val">Thermal conductance, in Watts per degree kelvin.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.GetThermalConductance(System.Double)">
            <summary>
            Gets the value of thermal conductance between the compartment containing the
            heating/cooling medium and the compartment containing the mixture, when a
            mixture fills a vessel to the level specified. This value is a linear interpolation
            based on the discrete data points provided.
            </summary>
            <param name="level">The percentage full (0.30 is 30%) that the vessel is, at the data point of interest.</param>
            <returns>The value of the specified thermal conductance.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.SetAmbientThermalConductance(System.Double,System.Double)">
            <summary>
            This sets a value for thermal conductance between the outside environment (ambient)
            and the compartment containing the mixture in a vessl at a certain level. For example,
            SetAmbientThermalConductance(0.50,20) sets the thermal conductance to 20 Watts per degree
            kelvin difference between the outside air and the mixture, when the mixture fills the
            vessel to it's '30% FULL' line.
            </summary>
            <param name="level">Describes at what level (0.30 equates to 30% FULL) the datum is correct.</param>
            <param name="val">Thermal conductance, in Watts per degree kelvin.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.GetAmbientThermalConductance(System.Double)">
            <summary>
            Gets the value of thermal conductance between the outside environment (ambient)
            and the compartment containing the mixture, when a mixture fills a vessel to the
            level specified. This value is a linear interpolation based on the discrete data
            points provided.
            </summary>
            <param name="level">The percentage full (0.30 is 30%) that the vessel is, at the
            data point of interest.</param>
            <returns>The value of the specified thermal conductance.</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCEnabled">
            <summary>
            Sets and gets a boolean that represents whether the Temperature Control System is
            enabled (true - the TCSrcTemperature is relevant, but ambient temperature is ignored, 
            or false - TCSrcTemperature is ignored, and temperature is allowed to drif toward ambient.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCSetpoint">
            <summary>
            The target temperature for the temperature control system. This is the temperature that
            the system will seek and maintain (+/- the specified error band), if it is enabled.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCSrcTemperature">
            <summary>
            This is the temperature of the heating/cooling medium for the system, if it is in constant_T mode.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCMaxSrcTemperature">
            <summary>
            This is the maximum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCMinSrcTemperature">
            <summary>
            This is the minimum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCSrcDelta">
            <summary>
            This is the difference in temperature between the heating/cooling medium and the mixture, if the 
            system is in constant_DeltaT mode.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCTemperatureRampRate">
            <summary>
            This is the ramp rate that the temperature control system will maintain if it is set to
            Constant_RampRate mode. Note that it does not have meaning if the temperature control system 
            is not set to Constant_RampRate mode. It defaults to 0 degrees per minute.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.AmbientTemperature">
            <summary>
            This is the "outside temperature", for example, the atmospheric temperature in the plant.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TCMode">
            <summary>
            The mode of the system (Constant delta-T, constant TSrc or Constant_RampRate).
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.Precision">
            <summary>
            The temperature controller's precision is a measure of how close to the setpoint the mixture
            needs to be in actuality before the controller will consider the mixture to have reached the
            setpoint. This is necessary in order to represent the physical case where the temperature
            controller mode is Constant_TSrc, the src temp is at 79 degrees, and the setpoint is also at 79 degrees -
            theoretically, the mixture, unless already at precisely 79 degrees, will not reach the desired
            setpoint temperature. However, if precision is set to 0.0001, then the mixture will be considered
            to have reached its setpoint when at 78.9999, or at 79.0001, if being driven up from below, or 
            down from above, respectively.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.TimeNeededToReachTargetTemp">
            <summary>
            The temperature control system will predict the amount of time required for it to reach
            the setpoint temperature (plus or minus the temperature controller's precision) in the
            mixture. <para><B>This will throw an exception if the system cannot ever drive the mixture
            to the target temperature.</B></para>
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.ImposeEffectsOfDuration(System.TimeSpan)">
            <summary>
            The temperature control system will modify the mixture (and perhaps its TCSrcTemperature,
            if it is in constant deltaT mode) to represent the state in effect after passage of the
            proscribed timespan.
            </summary>
            <param name="elapsedSinceLastUpdate"></param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.GetCurrentThermalPower">
            <summary>
            Returns the current power available from the temperature controller, given existing settings
            of TCMode, Tsrc, Tambient, thermal conductivity and mixture levels.
            </summary>
            <returns>Thermal power currently available, in watts.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.ITemperatureController.Validate(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Validates the current settings of this Temperature controller. If warnings and errors are encountered,
            then the method adds those errors and warnings to the model. If the model reference is null, then this
            method ignores warnings and throws an exception with the first error encountered.
            </summary>
            <param name="model">The model in whose context this temperature controller is running.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController">
            <summary>
            
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.DefaultPrecision">
            <summary>
            if precision is set to 0.01, then the mixture will be considered
            to have reached its setpoint when at 78.99, or at 79.01.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.Precision">
            <summary>
            The temperature controller's precision is a measure of how close to the setpoint the mixture
            needs to be in actuality before the controller will consider the mixture to have reached the
            setpoint. This is necessary in order to represent the physical case where the temperature
            controller mode is at, say, a constant 79 degrees, and the setpoint is also at 79 degrees -
            theoretically, the mixture, unless already at precisely 79 degrees, will not reach the desired
            setpoint temperature. However, if precision is set to 0.01, then the mixture will be considered
            to have reached its setpoint when at 78.99, or at 79.01, if being driven up from below, or 
            down from above, respectively. This value defaults to the value of TemperatureController.DEFAULT_PRECISION,
            which can itself be changed, but starts at 0.01.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.#ctor(Highpoint.Sage.Materials.Chemistry.IContainer)">
            <summary>
            Creates a new instance of the <see cref="T:TemperatureController"/> class.
            </summary>
            <param name="icontainer">The container on which this <see cref="T:TemperatureController"/> operates.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TimeNeededToReachTargetTemp">
            <summary>
            The temperature control system will predict the amount of time required for it to reach
            the setpoint temperature (plus or minus the temperature controller's precision) in the
            mixture. <para><B>This will throw an exception if the system cannot ever drive the mixture
            to the target temperature.</B></para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ImposeEffectsOfDuration(System.TimeSpan)">
            <summary>
            Changes the mixture temperature relative to the current parameters,
            over the specified timespan. Assumes no changes in volume, etc, but
            adjusts TSetpoint afterwards if the system is in constant delta-T mode.
            </summary>
            <param name="elapsedSinceLastUpdate">How much time has elapsed since the last time this method was called.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.SetThermalConductance(System.Double,System.Double)">
            <summary>
            Replaces a thermal conductance value already in the controller.
            </summary>
            <param name="level">The tank level associated with the newly-specified thermal conductance.</param>
            <param name="val">The new thermal conductance value.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.GetThermalConductance(System.Double)">
            <summary>
            Gets the value of thermal conductance between the compartment containing the
            heating/cooling medium and the compartment containing the mixture, when a
            mixture fills a vessel to the level specified. This value is a linear interpolation
            based on the discrete data points provided.
            </summary>
            <param name="level">The percentage full (0.30 is 30%) that the vessel is, at the data point of interest.</param>
            <returns>
            The value of the specified thermal conductance.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.SetAmbientThermalConductance(System.Double,System.Double)">
            <summary>
            This sets a value for thermal conductance between the outside environment (ambient)
            and the compartment containing the mixture in a vessl at a certain level. For example,
            SetAmbientThermalConductance(0.50,20) sets the thermal conductance to 20 Watts per degree
            kelvin difference between the outside air and the mixture, when the mixture fills the
            vessel to it's '30% FULL' line.
            </summary>
            <param name="level">Describes at what level (0.30 equates to 30% FULL) the datum is correct.</param>
            <param name="val">Thermal conductance, in Watts per degree kelvin.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.GetAmbientThermalConductance(System.Double)">
            <summary>
            Gets the value of thermal conductance between the outside environment (ambient)
            and the compartment containing the mixture, when a mixture fills a vessel to the
            level specified. This value is a linear interpolation based on the discrete data
            points provided.
            </summary>
            <param name="level">The percentage full (0.30 is 30%) that the vessel is, at the
            data point of interest.</param>
            <returns>
            The value of the specified thermal conductance.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCEnabled">
            <summary>
            Sets and gets a boolean that represents whether the Temperature Control System is
            enabled (true - the TCSrcTemperature is relevant, but ambient temperature is ignored,
            or false - TCSrcTemperature is ignored, and temperature is allowed to drif toward ambient.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCSetpoint">
            <summary>
            The target temperature for the temperature control system. This is the temperature that
            the system will seek and maintain (+/- the specified error band), if it is enabled.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCSrcTemperature">
            <summary>
            This is the temperature of the heating/cooling medium for the system, if it is in constant_T mode.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCMaxSrcTemperature">
            <summary>
            This is the maximum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCMinSrcTemperature">
            <summary>
            This is the minimum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCSrcDelta">
            <summary>
            This is the difference in temperature between the heating/cooling medium and the mixture, if the
            system is in constant_DeltaT mode.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.AmbientTemperature">
            <summary>
            This is the "outside temperature", for example, the atmospheric temperature in the plant.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCMode">
            <summary>
            The mode of the system (Constant delta-T, constant TSrc or Constant_RampRate).
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TCTemperatureRampRate">
            <summary>
            This is the ramp rate that the temperature control system will maintain if it is set to
            Constant_RampRate mode. Note that it does not have meaning if the temperature control system 
            is not set to Constant_RampRate mode. It defaults to 0 degrees per minute.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.GetCurrentThermalPower">
            <summary>
            Returns the current power available from the temperature controller, given existing settings
            of TCMode, Tsrc, Tambient, thermal conductivity and mixture levels. Positive power implies
            ability to heat a mixture, negative power implies ability to cool. If the Temperature control
            mode is Constant_DeltaT, then the power will be positive, even though the temperature controller
            could heat or cool a mixture with equivalent power.
            </summary>
            <returns>Thermal power currrently available, in watts.</returns>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.Validate(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Validates the current settings of this Temperature Controller. If warnings and errors are encountered,
            then the method adds those errors and warnings to the model. If the model reference is null, then this
            method ignores warnings and throws an exception with the first error encountered.
            </summary>
            <param name="model">The model in whose context this temperature controller is running.</param>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException">
            <summary>
            A TemperatureControllerException is both an ApplicationException and an IModelError. It is thrown from the
            temperature controller, in most cases, and may be caught at a higher level, and then either provisioned
            with more high-level target &amp; subject information, or logged into the model as a model error.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException"/> class.
            </summary>
            <param name="tc">The temperature controller that initiated the exception/error.</param>
            <param name="msg">A textual message that the thrower provides.</param>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException"/> class.
            </summary>
            <param name="tc">The temperature controller that initiated the exception/error.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerContainerCapacity">
            <summary>
            Gets the temperature controller's container's capacity in liters.
            </summary>
            <value>The temperature controller's container's capacity in liters.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerContainerMixture">
            <summary>
            Gets the temperature controller's container's mixture at the time of the exception/error.
            </summary>
            <value>The temperature controller container mixture.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerThermalConductance">
            <summary>
            Gets a double interpolable holding the value of thermal conductance between the 
            compartment containing the heating/cooling medium and the compartment containing the 
            mixture, when a mixture fills a vessel to the level specified. This value is a linear 
            interpolation based on the discrete data points provided.
            </summary>
            <value>The temperature controller thermal conductance.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerAmbientThermalConductance">
            <summary>
            Gets a double interpolable holding the value of thermal conductance between the outside
            environment (ambient) and the compartment containing the mixture, when a mixture fills
            a vessel to the level specified. This value is a linear interpolation based on the discrete
            data points provided.
            </summary>
            <value>The temperature controller ambient thermal conductance.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerEnabled">
            <summary>
            Gets a boolean that represents whether the Temperature Control System is
            enabled (true - the TCSrcTemperature is relevant, but ambient temperature is ignored, 
            or false - TCSrcTemperature is ignored, and temperature is allowed to drif toward ambient.)
            </summary>
            <value>
            	<c>true</c> if [temperature controller enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerSetpoint">
            <summary>
            The target temperature for the temperature control system. This is the temperature that
            the system will seek and maintain (+/- the specified error band), if it is enabled.
            </summary>
            <value>The temperature controller setpoint.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerSourceTemp">
            <summary>
            This is the temperature of the heating/cooling medium for the system, if it is in constant_T mode.
            </summary>
            <value>The temperature controller source temp.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerMinSourceTemp">
            <summary>
            This is the minimum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
            <value>The temperature controller min source temp.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerMaxSourceTemp">
            <summary>
            This is the maximum temperature of the heating/cooling medium for the system, important in constant
            delta T and constant ramp rate modes.
            </summary>
            <value>The temperature controller max source temp.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerDeltaT">
            <summary>
            This is the difference in temperature between the heating/cooling medium and the mixture, if the 
            system is in constant_DeltaT mode.
            </summary>
            <value>The temperature controller delta T.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.AmbientTemperature">
            <summary>
            This is the "outside temperature", for example, the atmospheric temperature in the plant.
            </summary>
            <value>The ambient temperature.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureControllerMode">
            <summary>
            The mode of the system (Constant delta-T, constant TSrc or Constant_RampRate).
            </summary>
            <value>The temperature controller mode.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureRampRate">
            <summary>
            This is the ramp rate that the temperature control system will maintain if it is set to
            Constant_RampRate mode. Note that it does not have meaning if the temperature control system 
            is not set to Constant_RampRate mode. It defaults to 0 degrees per minute.
            </summary>
            <value>The temperature ramp rate.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.TemperatureController">
            <summary>
            Gets the temperature controller.
            </summary>
            <value>The temperature controller.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Name">
            <summary>
            The name of the notification.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Narrative">
            <summary>
            A descriptive text that describes what happened.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Target">
            <summary>
            Target is the place that the notification occurred.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Subject">
            <summary>
            Subject is the thing that (probably) caused the notification.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.TemperatureControllerException.Priority">
            <summary>
            Gets or sets the priority of the notification.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException">
            <summary>
            An IncalculableTimeToSetpointException is both an ApplicationException and an IModelError.
            It is thrown when the temperature controller cannot calculate the amount of time it will
            take to reach the requested setpoint.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException"/> class.
            </summary>
            <param name="tc">The temperature controller.</param>
            <param name="nSeconds">The number of seconds to setpoint. Will be double.NaN or double.Infinity.</param>
            <param name="kMix">The heat conductance of the mixture.</param>
            <param name="tSrc">The temperature of the driving heat source or sink.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException.NumberOfSeconds">
            <summary>
            Gets the number of seconds that was calculated for time to reach setpoint. This will be double.NaN, or double.Infinity(pos or neg).
            </summary>
            <value>The number of seconds.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException.SourceTemperature">
            <summary>
            Gets the temperature of the heat source/sink that was used in calculating the duration.
            </summary>
            <value>The source temperature.</value>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.IncalculableTimeToSetpointException.HeatConductance">
            <summary>
            Gets the heat conductance of the vessel at the specific fullness of the vessel.
            </summary>
            <value>The heat conductance.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException">
            <summary>
            An ThermalConductanceSpecificationException is both an ApplicationException and an IModelError.
            It is thrown when the <see cref="T:Highpoint.Sage.Mathematics.SmallDoubleInterpolable"/> that holds
            the thermal conductance of the containing vessel cannot determine conductance for some level of
            mixture in the vessel.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException.ThermalDriveType.Driven">
            <summary>
            Thermal conductance in error is the non-ambient conductance.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException.ThermalDriveType.Ambient">
            <summary>
            Thermal conductance in error is the ambient conductance.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController,Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException.ThermalDriveType)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException"/> class.
            </summary>
            <param name="tc">The tc.</param>
            <param name="dt">The dt.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalConductanceSpecificationException.DriveType">
            <summary>
            Gets the type of thermal drive for which the conductance cannot be determined.
            </summary>
            <value>The type of the drive.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException">
            <summary>
            A ThermalRangeEndSpecificationException is both an ApplicationException and an IModelError.
            It is thrown when the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController"/> has been configured to, for example,
            cool a mixture to -40C, but the minimum coolant temperature is at 0C. or conversely, the
            <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController"/> has been configured to raise a mixture to +100C and the
            maximum heat source temperature is +80C.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.RangeEndError">
            <summary>
            Communicates which end (high or low) of the temperature range is not properly specified.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.RangeEndError.High">
            <summary>
            The high end of the temperature range is not properly specified.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.RangeEndError.Low">
            <summary>
            The low end of the temperature range is not properly specified.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController,Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.RangeEndError)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException"/> class.
            </summary>
            <param name="tc">The tc.</param>
            <param name="ree">The ree.</param>
        </member>
        <member name="P:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.ThermalRangeEndSpecificationException.RangeEnd">
            <summary>
            Communicates which end (hogh or low) of the temperature range is not properly specified.
            </summary>
            <value>The range end.</value>
        </member>
        <member name="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.BogusTemperatureRampRateException">
            <summary>
            A BogusTemperatureRampRateException is both an ApplicationException and an IModelError.
            It is thrown when a temperature ramp rate is specified that cannot be achieved in the
            model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.BogusTemperatureRampRateException.#ctor(Highpoint.Sage.Materials.Thermodynamics.TemperatureController)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Materials.Thermodynamics.TemperatureController.BogusTemperatureRampRateException"/> class.
            </summary>
            <param name="tc">The tc.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Connectors.ConnectorType">
            <summary>
            An enumeration of the different types of connectors that can be created by a ConnectorFactory.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Connectors.ConnectorType.BasicNonBuffered">
            <summary>
            The <see cref="T:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector"/> class.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.IConnector.Upstream">
            <summary>
            Gets the upstream port.
            </summary>
            <value>The upstream port.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.IConnector.Downstream">
            <summary>
            Gets the downstream port.
            </summary>
            <value>The downstream port.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.Disconnect">
            <summary>
            Disconnects this connector from its upstream and downstream ports, and then removes them from their owners, if possible.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.Connect(Highpoint.Sage.ItemBased.Ports.IPort,Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Connects the specified port, p1 (the upstream port) to the specified port, p2 (the downstream port.)
            </summary>
            <param name="p1">The upstream port.</param>
            <param name="p2">The downstream port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.NotifyDataAvailable">
            <summary>
            Called by the upstream port to inform the connector, and thereby the downstream port,
            that an item is available for pull by its owner.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.GetOutOfBandData">
            <summary>
            Retrieves the default out-of-band data for this port. This data is set via an API on GenericPort.
            </summary>
            <returns>The default out-of-band data for this port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.GetOutOfBandData(System.Object)">
            <summary>
            Retrieves the out-of-band data corresponding to the provided key, for this port.
            This data is set via an API on GenericPort.
            </summary>
            <param name="key">The key (such as "Priority") associated with this port's out of band data.</param>
            <returns>The out-of-band data corresponding to the provided key.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.IConnector.IsPeekable">
            <summary>
            Gets a value indicating whether this connector is peekable. The downstream port will call this API,
            resulting in a passed-through call to the upstream port, where it will declare whether it supports the
            'peek' operation.
            </summary>
            <value>
            	<c>true</c> if this instance is peekable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.Peek(System.Object)">
            <summary>
            Propagates a 'Peek' operation through this connector to the upstream port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The object or item, if any, available on the upstream port. The item is left on the port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.Take(System.Object)">
            <summary>
            Propagates a 'Take' operation through this connector to the upstream port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The object or item, if any, available on the upstream port. The item is removed from the port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.IConnector.Put(System.Object)">
            <summary>
            Puts the specified data onto the downstream port, if possible.
            </summary>
            <param name="data">The item or data to be put to the downstream port.</param>
            <returns>true if the put operation was successful, otherwise (if the port was blocked), false.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.IConnector.InUse">
            <summary>
            Gets or sets a value indicating whether the connector is currently in use.
            </summary>
            <value><c>true</c> if [in use]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPort,Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The GUID.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.#ctor">
            <summary>
            For prelude to deserialization only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.NotifyDataAvailable">
            <summary>
            Called by the PortOwner after it has put new data on the port. It indicates that
            data is newly available on this port. Since it is a multicast event, by the time
            a recipient receives it, the newly-arrived data may be gone already.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Services needs in the first dependency-sequenced round of initialization.
            </summary>
            <param name="model">The model in which the initialization is taking place.</param>
            <param name="p">The array of objects that take part in this round of initialization.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.Model">
            <summary>
            The model to which this BasicNonBufferedConnector belongs.
            </summary>
            <value>The BasicNonBufferedConnector's description.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.Name">
            <summary>
            The Name for this BasicNonBufferedConnector. Typically used for human-readable representations.
            </summary>
            <value>The BasicNonBufferedConnector's name.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.Guid">
            <summary>
            The Guid of this BasicNonBufferedConnector.
            </summary>
            <value>The BasicNonBufferedConnector's Guid.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.Description">
            <summary>
            The description for this BasicNonBufferedConnector. Typically used for human-readable representations.
            </summary>
            <value>The BasicNonBufferedConnector's description.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The BasicNonBufferedConnector's new model value.</param>
            <param name="name">The BasicNonBufferedConnector's new name value.</param>
            <param name="description">The BasicNonBufferedConnector's new description value.</param>
            <param name="guid">The BasicNonBufferedConnector's new GUID value.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Connectors.BasicNonBufferedConnector.LoadFromXElement(System.Xml.Linq.XElement,Highpoint.Sage.Persistence.DeserializationContext)">
            <summary>
            Prior to this call, you must have created the connector using the 
            </summary>
            <param name="self"></param>
            <param name="deserializationContext"></param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Channels.FixedRateChannel">
            <summary>
            Summary description for FixedRateChannel.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.SimCore.IExecutive,System.TimeSpan,System.Double)">
            <summary>
            Creates a channel for which the transit rate is fixed, and which can hold a specified
            capacity of payload.
            </summary>
            <param name="model">The model in which this FixedRateChannel exists.</param>
            <param name="name">The name of this FixedRateChannel.</param>
            <param name="guid">The GUID of this FixedRateChannel.</param>
            <param name="exec">The executive that controls this channel.</param>
            <param name="transitPeriod">How long it takes an object to transit the channel.</param>
            <param name="capacity">How many objects the channel can hold.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.Entry">
            <summary>
            The input port (i.e. the on-ramp).
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.Exit">
            <summary>
            The output port (i.e. the off-ramp).
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that is to be added to this IPortOwner.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Channels.FixedRateChannel.Bin">
            <summary>
            A channel contains a series of bins. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Nexus">
            <summary>
            items show up on input ports. If it has one, the Nexus' IPortSelector is queried
            for a selection of output port, and if one is provided, the item is placed on that
            port. If it has no IPortSelector and the serviceObject implements IPortSelector, it is
            asked where it would like to go next. If it answers with a selected port, it is placed on
            that port. Otherwise, the nexus selects an output port at random.
            Note that the IPortSelector in this case must always select IOutputPorts.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Nexus.PortSelector">
            <summary>
            Gets or sets the port selector that will be used to determine where, if an object is pushed into the nexus,
            it will emerge.
            </summary>
            <value>The port selector.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.Bind(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Connects the Nexus to the specified port If the specified port is an input port, creates an output port
            on the nexus and adds a connector to the specified port from that output port. The relationship does not
            allow taking or peeking from the nexus.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Nexus.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port being added.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Nexus.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port being unregistered.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Nexus.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Nexus.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Nexus.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.PortSelector">
            <summary>
            This delegate receives the object passed in on a port and the set of choices to which it can be
            passed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.PortDataEvent">
            <summary>
            This is implemented by a method that will be paying attention to
            a port. PortData events include those occurring when data is 
            presented to a port, accepted by a port, or rejected by a port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.PortEvent">
            <summary>
            This is the signature of a listener to a port. PortEvents are
            fired when data becomes available on a port, when a port has just
            been pulled from or pushed to, or when someone has tried to pull
            from an empty port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.DataArrivalHandler">
            <summary>
             Implemented by a method designed to respond to the arrival of data
             on a port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.DataProvisionHandler">
            <summary>
            Implemented by a method designed to provide data on an external
            entity's requesting it from a port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IPortOwner">
            <summary>
            Interface implemented by any object that exposes ports.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortOwner.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a user-created port to this object's port set.
            </summary>
            <param name="port">The port to be added to the portSet.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortOwner.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortOwner.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel with the provided Guid.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortOwner.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortOwner.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Removes a port from an object's portset. Any entity having references
            to the port may still use it, though this may be wrong from an application
            perspective. Implementers are responsible to refuse removal of a port that
            is a hard property exposed (e.g. this.InputPort0), since it will remain
            accessible via that property.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortOwner.ClearPorts">
            <summary>
            Unregisters all ports.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortOwner.Ports">
            <summary>
            A PortSet containing the ports that this port owner owns.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IPortSet">
            <summary>
            An interface implemented by a PortSet. Permits indexing to a port by key.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Item(System.Guid)">
            <summary>
            Permits a caller to retrieve a port by its guid.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Item(System.String)">
            <summary>
            Permits a caller to retrieve a port by its name.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> with the specified index, i.
            </summary>
            <value>The <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/>.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSet.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a port to this object's port set.
            </summary>
            <param name="port">The port to be added to the portSet.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSet.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Removes a port from an object's portset. Any entity having references
            to the port may still use it, though this may be wrong from an application
            perspective.
            </summary>
            <param name="port">The port to be removed from the portSet.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSet.ClearPorts">
            <summary>
            Unregisters all ports.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortSet.PortAdded">
            <summary>
            Fired when a port has been added to this IPortSet.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortSet.PortRemoved">
            <summary>
            Fired when a port has been removed from this IPortSet.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.PortKeys">
            <summary>
            Returns a collection of the keys that belong to ports known to this PortSet.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSet.GetKey(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Looks up the key associated with a particular port.
            </summary>
            <param name="port">The port for which we want the key.</param>
            <returns>The key for the provided port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Count">
            <summary>
            Gets the count of all kids of ports in this collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Outputs">
            <summary>
            Gets the output ports owned by this PortSet.
            </summary>
            <value>The output ports.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPortSet.Inputs">
            <summary>
            Gets the input ports owned by this PortSet.
            </summary>
            <value>The input ports.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSet.SetSortOrder``1(System.Object)">
            <summary>
            Sorts the ports based on one element of their Out-of-band data sets.
            Following a return from this call, the ports will be in the order requested.
            The &quot;T&quot; parameter will usually be int, double or string, but it must
            represent the IComparable-implementing type of the data stored under the
            provided OOBDataKey.
            </summary>
            <param name="oobDataKey">The oob data key.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.PortSet">
            <summary>
            Contains and provides IPort objects based on keys. PortOwner objects (those
            which implement IPortOwner) will typically (though not necessarily) contain one
            of these.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Ports.PortSet"/> class.
            </summary>
            <param name="useCaseInsensitiveKeys">if set to <c>true</c> the portSet will use case insensitive keys.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Ports.PortSet"/> class with case-sensitive keys.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a port to this object's port set.
            </summary>
            <param name="port">The port to be added to the portSet.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Removes a port from an object's portset. Any entity having references
            to the port may still use it, though this may be wrong from an application
            perspective.
            </summary>
            <param name="port">The port to be removed from the portSet.</param>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.PortAdded">
            <summary>
            Fired when a port has been added to this IPortSet.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.PortRemoved">
            <summary>
            Fired when a port has been removed from this IPortSet.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.ClearPorts">
            <summary>
            Unregisters all ports.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.PortDataPresented">
            <summary>
            This event is fired when data is presented to any input port in this
            PortSet from outside, or to any output port from inside.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.PortDataAccepted">
            <summary>
            This event is fired whenever any input port accepts data presented to it
            from outside or any output port accepts data presented to it from inside. 
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.PortDataRejected">
            <summary>
            This event is fired whenever an input port rejects data that is presented
            to it from outside or an output port rejects data that is presented to it
            from inside.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.BeforeConnectionMade">
            <summary>
            This event fires immediately before the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.AfterConnectionMade">
            <summary>
            This event fires immediately after the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.BeforeConnectionBroken">
            <summary>
            This event fires immediately before the port's connector property becomes null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.PortSet.AfterConnectionBroken">
            <summary>
            This event fires immediately after the port's connector property becomes null.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.PortKeys">
            <summary>
            Returns a collection of the keys that belong to ports known to this PortSet.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.GetKey(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Looks up the key associated with a particular port.
            </summary>
            <param name="port">The port for which we want the key.</param>
            <returns>The key for the provided port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Count">
            <summary>
            Gets the count of all kinds of ports in this collection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Item(System.Guid)">
            <summary>
            Returns the port associated with the provided key.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> with the specified index, i.
            </summary>
            <value>The <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/>.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Item(System.String)">
            <summary>
            Returns the port associated with the provided name.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.GetEnumerator">
            <summary>
            Provides an enumerator over the IPort instances.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Outputs">
            <summary>
            Gets the output ports owned by this PortSet.
            </summary>
            <value>The output ports.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.Inputs">
            <summary>
            Gets the input ports owned by this PortSet.
            </summary>
            <value>The input ports.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PortSet.SortedPorts">
            <summary>
            Gets or sets the internal list of sorted ports.
            </summary>
            <value>The sorted ports.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PortSet.SetSortOrder``1(System.Object)">
            <summary>
            Sorts the ports based on one element of their Out-of-band data sets.
            Following a return from this call, the ports will be in the order requested.
            The "T" parameter will usually be int, double or string, but it must
            represent the IComparable-implementing type of the data stored under the
            provided OOBDataKey.
            </summary>
            <param name="oobDataKey">The oob data key.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IPortEvents">
            <summary>
            An interface describing the events that are fired by all IPort objects.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.PortDataPresented">
            <summary>
            This event fires when data is presented on a port. For an input port, this
            implies presentation by an outsider, and for an output port, it implies 
            presentation by the port owner.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.PortDataAccepted">
            <summary>
            This event fires when data is accepted by a port. For an input port, this
            implies acceptance by the port owner, and for an output port, it implies 
            acceptance by an outsider.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.PortDataRejected">
            <summary>
            This event fires when data is rejected by a port. For an input port, this
            implies rejection by the port owner, and for an output port, it implies 
            rejection by an outsider.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.BeforeConnectionMade">
            <summary>
            This event fires immediately before the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.AfterConnectionMade">
            <summary>
            This event fires immediately after the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.BeforeConnectionBroken">
            <summary>
            This event fires immediately before the port's connector property becomes null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IPortEvents.AfterConnectionBroken">
            <summary>
            This event fires immediately after the port's connector property becomes null.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IPort">
            <summary>
            This interface specifies the methods common to all types of ports, that are visible 
            to objects other than the owner of the port.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Connector">
            <summary>
            This property represents the connector object that this port is associated with.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Owner">
            <summary>
            This property contains the owner of the port.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Key">
            <summary>
            Returns the key by which this port is known to its owner.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Peer">
            <summary>
            This property returns the port at the other end of the connector to which this
            port is connected, or null, if there is no connector, and/or no port on the
            other end of a connected connector.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPort.GetOutOfBandData">
            <summary>
            Returns the default out-of-band data from this port. Out-of-band data
            is data that is not material that is to be transferred out of, or into,
            this port, but rather context, type, or other metadata to the transfer
            itself.
            </summary>
            <returns>The default out-of-band data from this port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPort.GetOutOfBandData(System.Object)">
            <summary>
            Returns out-of-band data from this port. Out-of-band data is data that is
            not material that is to be transferred out of, or into, this port, but
            rather context, type, or other metadata to the transfer itself.
            </summary>
            <param name="selector">The key of the sought metadata.</param>
            <returns>The desired out-of-band metadata.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Intrinsic">
            <summary>
            Gets a value indicating whether this <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> is intrinsic. An intrinsic
            port is a hard-wired part of its owner. It is there when its owner is created, and
            cannot be removed.
            </summary>
            <value><c>true</c> if intrinsic; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPort.DetachHandlers">
            <summary>
            Detaches this port's data handlers.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IPort.Index">
            <summary>
            The port index represents its sequence, if any, with respect to the other ports.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IInputPort">
            <summary>
            IInputPort is the portion of an InputPort that is intended to be visible
            and accessible from outside the scope of its owner.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IInputPort.Put(System.Object)">
            <summary>
            This method attempts to place the provided data object onto the port from
            upstream of its owner. It will succeed if the port is unoccupied, or if
            the port is occupied and the port permits overwrites.
            </summary>
            <param name="obj">the data object</param>
            <returns>True if successful. False if it fails.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IInputPort.NotifyDataAvailable">
            <summary>
            This is called by a peer to let the input port know that there is data
            available at the peer, in case the input port wants to pull the data.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IInputPort.PutHandler">
            <summary>
            This sets the PutHandler that this port will use, replacing the current
            one. This should be used only by objects under the control of, or owned by, the
            IPortOwner that owns this port.
            </summary>
            <value>The new PutHandler.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IOutputPort">
            <summary>
            IOutputPort is the portion of an output port that is intended to be visible 
            and accessible from outside the scope of its owner. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IOutputPort.Take(System.Object)">
            <summary>
            This method removes and returns the current contents of the port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The current contents of the port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IOutputPort.IsPeekable">
            <summary>
            True if Peek can be expected to return meaningful data.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IOutputPort.Peek(System.Object)">
            <summary>
            Nonconsumptively returns the contents of this port. A subsequent Take
            may or may not produce the same object, if, for example, the stuff
            produced from this port is time-sensitive.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>
            The current contents of this port. Null if this port is not peekable.
            </returns>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.IOutputPort.DataAvailable">
            <summary>
            This event is fired when new data is available to be taken from a port.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IOutputPort.TakeHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to take data from this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The take handler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.IOutputPort.PeekHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to peek at data on this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The peek handler.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.GenericPort">
            <summary>
            Base class implementation for ports.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPortOwner)">
            <summary>
            Creates a port with a given owner. It is the responsibility of the creator to add the port to the
            owner's PortSet.
            </summary>
            <param name="model">The model in which the port exists.</param>
            <param name="name">The name of the port.</param>
            <param name="guid">The GUIDof the port.</param>
            <param name="owner">The IPortOwner that will own this port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.DetachHandlers">
            <summary>
            Detaches any data arrival, peek, push, etc. handlers.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.GetNextName(Highpoint.Sage.ItemBased.Ports.IPortOwner)">
            <summary>
            Gets the next port name for the specified portOwner. If has (Input_0, Input_3 and Input_9) next is Input_10.
            </summary>
            <param name="owner">The prospective new IPortOwner for the port in question.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.PortPrefix">
            <summary>
            Gets the default naming prefix for all ports of this type.
            </summary>
            <value>The port prefix.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Index">
            <summary>
            The port index represents its sequence, if any, with respect to the other ports.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Connector">
            <summary>
            The connector, if any, to which this port is attached. If there is already a connector,
            then the setter is allowed to set Connector to &lt;null&gt;. Thereafter, the setter will
            be permitted to set the connector to a new value. This is to prevent accidentally
            overwriting a connection in code.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.BeforeConnectionMade">
            <summary>
            This event fires immediately before the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.AfterConnectionMade">
            <summary>
            This event fires immediately after the port's connector property becomes non-null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.BeforeConnectionBroken">
            <summary>
            This event fires immediately before the port's connector property becomes null.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.AfterConnectionBroken">
            <summary>
            This event fires immediately after the port's connector property becomes null.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Owner">
            <summary>
            This port's owner.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Key">
            <summary>
            Returns the key by which this port is known to its owner.
            </summary>
            <value></value>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.PortDataPresented">
            <summary>
            This event fires when data is presented on a port. For an input port, this
            implies presentation by an outsider, and for an output port, it implies 
            presentation by the port owner.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.PortDataAccepted">
            <summary>
            This event fires when data is accepted by a port. For an input port, this
            implies acceptance by an outsider, and for an output port, it implies 
            acceptance by the port owner.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.GenericPort.PortDataRejected">
            <summary>
            This event fires when data is rejected by a port. For an input port, this
            implies rejection by an outsider, and for an output port, it implies 
            rejection by the port owner.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.OnPresentingData(System.Object)">
            <summary>
            Handler for arrival of data. For an output port, this will be the PortOwner
            presenting data to the port, for an input port, it will be the IPort's peer
            presenting data through the connector.
            </summary>
            <param name="data">The data being transmitted.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.OnAcceptingData(System.Object)">
            <summary>
            Handler for the acceptance of data. For an output port, this will be the port
            accepting data from the port owner, and for an input port, it will be the port's peer
            accepting data offered through the connector by this port.
            </summary>
            <param name="data">The data being transmitted.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.OnRejectingData(System.Object)">
            <summary>
            Handler for the acceptance of data. For an output port, this will be the port
            accepting data from the port owner, and for an input port, it will be the port's peer
            accepting data offered through the connector by this port.
            </summary>
            <param name="data">The data being transmitted.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.GetOutOfBandData">
            <summary>
            Returns the default out-of-band data from this port. Out-of-band data
            is data that is not material that is to be transferred out of, or into,
            this port, but rather context, type, or other metadata to the transfer
            itself.
            </summary>
            <returns>The default out-of-band data from this port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.GetOutOfBandData(System.Object)">
            <summary>
            Returns out-of-band data from this port. Out-of-band data is data that is
            not material that is to be transferred out of, or into, this port, but
            rather context, type, or other metadata to the transfer itself.
            </summary>
            <param name="key">The key of the sought metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.SetDefaultOutOfBandData(System.Object)">
            <summary>
            Sets the default out-of-band data.
            </summary>
            <param name="defaultOobData">The default out-of-band data.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.SetOutOfBandData(System.Object,System.Object)">
            <summary>
            Sets an out-of-band data item based on its key.
            </summary>
            <param name="key">The key through which the out-of-band data is to be returned.</param>
            <param name="outOfBandData">The out-of-band data associated with the above key.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Peer">
            <summary>
            Returns the peer of this port. A port's peer is the port
            that is at the other end of the connector to which this
            port is attached, or null if there is no attached conenctor
            or if there is no port on the other end.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Intrinsic">
            <summary>
            Gets and sets a value indicating whether this <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> is intrinsic. An intrinsic
            port is a hard-wired part of its owner. It is there when its owner is created, and
            cannot be removed.
            </summary>
            <value><c>true</c> if intrinsic; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Ports.GenericPort.UnassignedIndex">
            <summary>
            When a port index is this value upon being added to a PortSet, that PortSet will assign a sequential index value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Name">
            <summary>
            The user-friendly name for this object.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.GenericPort.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.GenericPort.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.InputPortProxy">
            <summary>
            An InputPortProxy represents to an encasing IPortOwner, an input port on some encased child IPortOwner. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPortOwner,Highpoint.Sage.ItemBased.Ports.IInputPort)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Ports.InputPortProxy"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:InputPortProxy"/> will run.</param>
            <param name="name">The name of the new <see cref="T:InputPortProxy"/>.</param>
            <param name="description">The description of the new <see cref="T:InputPortProxy"/>.</param>
            <param name="guid">The GUID of the new <see cref="T:InputPortProxy"/>.</param>
            <param name="owner">The owner of this proxy port.</param>
            <param name="ward">The ward - the internal port which this proxy port will represent.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Put(System.Object)">
            <summary>
            This method attempts to place the provided data object onto the port from
            upstream of its owner. It will succeed if the port is unoccupied, or if
            the port is occupied and the port permits overwrites.
            </summary>
            <param name="obj">the data object</param>
            <returns>True if successful. False if it fails.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.NotifyDataAvailable">
            <summary>
            This is called by a peer to let the input port know that there is data
            available at the peer, in case the input port wants to pull the data.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.PutHandler">
            <summary>
            This sets the DataArrivalHandler that this port will use, replacing the current
            one. This should be used only by objects under the control of, or owned by, the
            IPortOwner that owns this port.
            </summary>
            <value>The new dataArrivalHandler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Connector">
            <summary>
            This property represents the connector object that this port is associated with.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Owner">
            <summary>
            This property contains the owner of the port.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Key">
            <summary>
            Returns the key by which this port is known to its owner.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Peer">
            <summary>
            This property returns the port at the other end of the connector to which this
            port is connected, or null, if there is no connector, and/or no port on the
            other end of a connected connector.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.GetOutOfBandData">
            <summary>
            Returns the default out-of-band data from this port. Out-of-band data
            is data that is not material that is to be transferred out of, or into,
            this port, but rather context, type, or other metadata to the transfer
            itself.
            </summary>
            <returns>
            The default out-of-band data from this port.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.GetOutOfBandData(System.Object)">
            <summary>
            Returns out-of-band data from this port. Out-of-band data is data that is
            not material that is to be transferred out of, or into, this port, but
            rather context, type, or other metadata to the transfer itself.
            </summary>
            <param name="selector">The key of the sought metadata.</param>
            <returns>The desired out-of-band metadata.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Intrinsic">
            <summary>
            Gets and sets a value indicating whether this <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> is intrinsic. An intrinsic
            port is a hard-wired part of its owner. It is there when its owner is created, and
            cannot be removed.
            </summary>
            <value><c>true</c> if intrinsic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Index">
            <summary>
            The port index represents its sequence, if any, with respect to the other ports.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.InputPortProxy.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.InputPortProxy.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.SimpleInputPort">
            <summary>
            A simple implementation of input port. A data arrival handler may be defined to
            react to data that has been pushed from its peer - if none is provided, then it 
            cannot accept pushed data, (i.e. can only pull data from its peer at the request
            of its owner.) 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPortOwner,Highpoint.Sage.ItemBased.Ports.DataArrivalHandler)">
            <summary>
            Creates a simple input port with a specified owner and handler to be called
            when data arrives on the port. If the handler is null, then an internal handler
            is used that, in effect, refuses delivery of the data.
            It is the responsibility of the creator to add the port to the owner's PortSet.
            </summary>
            <param name="model">The model in which this port participates.</param>
            <param name="name">The name of the port. This is typically required to be unique within an owner.</param>
            <param name="guid">The GUID of the port - also known to the PortOwner as the port's Key.</param>
            <param name="owner">The IPortOwner that owns this port.</param>
            <param name="dah">The DataArrivalHandler that will respond to data arriving on
            this port having been pushed from its peer.</param>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.DataAvailable">
            <summary>
            This event is fired when new data is available to be taken from a port.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.Put(System.Object)">
            <summary>
            Called by this port's peer when it is pushing data to this port.
            </summary>
            <param name="newData">The data being pushed to the port from its peer.</param>
            <returns>true if this port is accepting the data, otherwise false.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.NotifyDataAvailable">
            <summary>
            Called by the peer output port to let the input port know that data is available
            on the output port, in case the input port wants to pull that data.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.PutHandler">
            <summary>
            This sets the DataArrivalHandler that this port will use, replacing the current
            one. This should be used only by objects under the control of, or owned by, the
            IPortOwner that owns this port.
            </summary>
            <value>The DataArrivalHandler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.PortPrefix">
            <summary>
            Gets the default naming prefix for all ports of this type.
            </summary>
            <value>The port prefix.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.OwnerPeek(System.Object)">
            <summary>
            The port owner can use this API to look at, but not remove, what is on
            the upstream port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>A reference to the object, if any, that is on the upstream port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.OwnerTake(System.Object)">
            <summary>
            The owner of an Input Port uses this to remove an object from the port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The object that heretofore was on the input port.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleInputPort.DetachHandlers">
            <summary>
            Detaches this input port's data arrival handler.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PlaceholderPortOwner.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.PlaceholderPortOwner.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.PlaceholderPortOwner.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPortOwner,Highpoint.Sage.ItemBased.Ports.IOutputPort)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Ports.OutputPortProxy"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:OutputPortProxy"/> will run.</param>
            <param name="name">The name of the new <see cref="T:OutputPortProxy"/>.</param>
            <param name="description">The description of the new <see cref="T:OutputPortProxy"/>.</param>
            <param name="guid">The GUID of the new <see cref="T:OutputPortProxy"/>.</param>
            <param name="owner">The owner of this proxy port.</param>
            <param name="ward">The ward - the internal port which this proxy port will represent.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Take(System.Object)">
            <summary>
            This method removes and returns the current contents of the port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The current contents of the port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.IsPeekable">
            <summary>
            True if Peek can be expected to return meaningful data.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Peek(System.Object)">
            <summary>
            Nonconsumptively returns the contents of this port. A subsequent Take
            may or may not produce the same object, if, for example, the stuff
            produced from this port is time-sensitive.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>
            The current contents of this port. Null if this port is not peekable.
            </returns>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.DataAvailable">
            <summary>
            This event fires when data has been made available on this port.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.TakeHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to take data from this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The take handler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.PeekHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to peek at data on this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The peek handler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Connector">
            <summary>
            This property represents the connector object that this port is associated with.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Owner">
            <summary>
            This property contains the owner of the port.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Key">
            <summary>
            Returns the key by which this port is known to its owner.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Peer">
            <summary>
            This property returns the port at the other end of the connector to which this
            port is connected, or null, if there is no connector, and/or no port on the
            other end of a connected connector.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.GetOutOfBandData">
            <summary>
            Returns the default out-of-band data from this port. Out-of-band data
            is data that is not material that is to be transferred out of, or into,
            this port, but rather context, type, or other metadata to the transfer
            itself.
            </summary>
            <returns>
            The default out-of-band data from this port.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.GetOutOfBandData(System.Object)">
            <summary>
            Returns out-of-band data from this port. Out-of-band data is data that is
            not material that is to be transferred out of, or into, this port, but
            rather context, type, or other metadata to the transfer itself.
            </summary>
            <param name="selector">The key of the sought metadata.</param>
            <returns>The desired out-of-band metadata.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Intrinsic">
            <summary>
            Gets and sets a value indicating whether this <see cref="T:Highpoint.Sage.ItemBased.Ports.IPort"/> is intrinsic. An intrinsic
            port is a hard-wired part of its owner. It is there when its owner is created, and
            cannot be removed.
            </summary>
            <value><c>true</c> if intrinsic; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.DetachHandlers">
            <summary>
            Detaches this output port's data peek and take handler.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Index">
            <summary>
            The port index represents its sequence, if any, with respect to the other ports.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.OutputPortProxy.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort">
            <summary>
            A simple implementation of output port. A data provision handler may be defined to
            react to a data take request from its peer - if none is provided, then it 
            cannot accept a data take request, (i.e. it can only provide data as a push, driven by
            the port owner.) A similar handler, with the same conditions, is provided for handling
            a 'peek' request. If no data provision handler has been provided, either request
            will return null. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.Ports.IPortOwner,Highpoint.Sage.ItemBased.Ports.DataProvisionHandler,Highpoint.Sage.ItemBased.Ports.DataProvisionHandler)">
            <summary>
            Creates a simple output port.
            It is the responsibility of the creator to add the port to the owner's PortSet.
            </summary>
            <param name="model">The model in which this port participates.</param>
            <param name="name">The name of the port. This is typically required to be unique within an owner.</param>
            <param name="guid">The GUID of the port - also known to the PortOwner as the port's Key.</param>
            <param name="owner">The IPortOwner that will own this port.</param>
            <param name="takeHandler">The delegate that will be called when a peer calls 'Take()'. Null is okay.</param>
            <param name="peekHandler">The delegate that will be called when a peer calls 'Peek()'. Null is okay.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.PortPrefix">
            <summary>
            Gets the default naming prefix for all ports of this type.
            </summary>
            <value>The port prefix.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.Take(System.Object)">
            <summary>
            This method removes and returns the current contents of the port.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>The current contents of the port.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.IsPeekable">
            <summary>
            True if Peek can be expected to return meaningful data.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.Peek(System.Object)">
            <summary>
            Nonconsumptively returns the contents of this port. A subsequent Take
            may or may not produce the same object, if, for example, the stuff
            produced from this port is time-sensitive.
            </summary>
            <param name="selector">An object that is used in the dataProvider to
            determine which of potentially more than one available data element is
            to be provided to the requestor.</param>
            <returns>
            The current contents of this port. Null if this port is not peekable.
            </returns>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.DataAvailable">
            <summary>
            This event is fired when new data is available to be taken from a port.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.TakeHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to take data from this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The take handler.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.PeekHandler">
            <summary>
            This sets the DataProvisionHandler that this port will use to handle requests
            to peek at data on this port, replacing the current one. This should be used
            only by objects under the control of, or owned by, the IPortOwner that owns
            this port.
            </summary>
            <value>The peek handler.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.OwnerPut(System.Object)">
            <summary>
            Called by the port owner to put data on the port.
            </summary>
            <param name="newData">The object that is new data to be placed on the port.</param>
            <returns>True if the port was able to accept the data.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.NotifyDataAvailable">
            <summary>
            This method is called when a Port Owner passively provides data objects - that is, it has
            a port on which it makes data available, but it expects others to pull from that port,
            rather than it pushing data to the port's peers. So, for example, a queue might call this
            method (a) when it is ready to discharge an object from the queue to an output port, or
            (b) immediately following an object being pulled from the output port, if there is another
            waiting right behind it.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.SimpleOutputPort.DetachHandlers">
            <summary>
            Detaches this input port's data arrival handler.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ports.IPortSelector">
            <summary>
            This interface is implemented by any object that can choose ports. It is useful in
            constructing an autonomous route navigator, route strategy object, or transportation
            manager.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ports.IPortSelector.SelectPort(Highpoint.Sage.ItemBased.Ports.IPortSet)">
            <summary>
            Selects a port from among a presented set of ports.
            </summary>
            <param name="portSet">The Set of ports.</param>
            <returns>The selected port.</returns>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.PulseEvent">
            <summary>
            An event that a pulse source fires. Anyone wanting to receive a 'Do It!' command implements this delegate.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.IPulseSource">
            <summary>
            Implemented by an object that generates pulses, either periodic or random.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.IPulseSource.PulseEvent">
            <summary>
            Fired when a PulseSource delivers its 'Do It!' command.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime">
            <summary>
            Summary description for WaitingTime.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.Queues.IQueue,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="hostQueue">The host queue.</param>
            <param name="nBins">The number of bins into which to divide the waiting time.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime.Description">
            <summary>
            A description of this WaitingTime Histogram.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.DataCollectors.WaitingTime.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Queues.Queue">
             <summary>
            
             </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Queues.Queue"/> class.
            </summary>
            <param name="model">The model in which this queue exists.</param>
            <param name="name">The name of this queue.</param>
            <param name="guid">The GUID of this queue.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.Queues.Queue"/> class.
            </summary>
            <param name="model">The model in which this queue exists.</param>
            <param name="name">The name of this queue.</param>
            <param name="guid">The GUID of this queue.</param>
            <param name="max">The maximum number of items that can be held in this queue.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Input">
            <summary>
            Gets the input port for this queue.
            </summary>
            <value>The input port.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Output">
            <summary>
            Gets the output port for this queue.
            </summary>
            <value>The output.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.#ctor">
            <summary>
            Use this for initialization of the form 'new Queue().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Int32)">
            <summary>
            The Initialize(...) method is designed to be used explicitly with the 'new ObjectQueue().Initialize(...);'
            idiom, and then implicitly upon loading of the model from an XML document.
            </summary>
            <param name="model">The model in which this queue exists.</param>
            <param name="name">The name of this queue.</param>
            <param name="description">The description of this queue.</param>
            <param name="guid">The GUID of this queue.</param>
            <param name="max">The maximum number of items that can be held in this queue.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            First-round follow-on to the <see cref="M:Highpoint.Sage.ItemBased.Queues.Queue.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Int32)"/> call.
            </summary>
            <param name="model">The model in which this queue exists.</param>
            <param name="p">The array of passed-in arguments.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.MaxDepth">
            <summary>
            Gets the max depth of this queue.
            </summary>
            <value>The max depth.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.OnQueueLevelChanged(System.Int32,System.Int32,Highpoint.Sage.ItemBased.Queues.IQueue)">
            <summary>
            Called when the queue level changes.
            </summary>
            <param name="previous">The previous level.</param>
            <param name="current">The current level.</param>
            <param name="queue">The queue on which the change occurred.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Count">
            <summary>
            Gets the number of items currently in this queue.
            </summary>
            <value>The count.</value>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Queues.Queue.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port that this IPortOwner will remove.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Model">
            <summary>
            The model to which this Queue belongs.
            </summary>
            <value>The Queue's description.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Name">
            <summary>
            The Name for this Queue. Typically used for human-readable representations.
            </summary>
            <value>The Queue's name.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Guid">
            <summary>
            The Guid of this Queue.
            </summary>
            <value>The Queue's Guid.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.Queue.Description">
            <summary>
            The description for this Queue. Typically used for human-readable representations.
            </summary>
            <value>The Queue's description.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.Queue.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The Queue's new model value.</param>
            <param name="name">The Queue's new name value.</param>
            <param name="description">The Queue's new description value.</param>
            <param name="guid">The Queue's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Queues.MultiQueueHead">
            <summary>
            An object that has multiple inputs and one output. When a pull occurs on the output,
            a selection strategy is used to 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port being removed.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Queues.MultiQueueHead.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.BufferedServer">
            <summary>
            A buffered server maintains a buffer before and after (both, optionally) a server, so that the server
            can act as a process step of arbitrarily large capacity that accepts service objects, and has them
            wait until the core server is ready for them. The effect of the output queue is that the server may always
            move on to the next service object, irrespective of whether the downstream process step is ready for
            the current service object. <para/>
            The constructors will accept an externally-provided server, for custom service behaviors, or will provide
            a simple, single-client server by default.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.Servers.IServer,Highpoint.Sage.ItemBased.Queues.IQueue,Highpoint.Sage.ItemBased.Queues.IQueue)">
            <summary>
            Creates a Buffered Server with the specified server, preQueue and postQueue. If either queue is null,
            that queue will not be used. The server cannot be null.<para/>
            </summary>
            <param name="model">The model in which this buffered server will operate.</param>
            <param name="name">The name given to this server.</param>
            <param name="guid">The guid that this server will be known by.</param>
            <param name="server">The inner server around which the queues will be placed.</param>
            <param name="preQueue">The </param>
            <param name="postQueue"></param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Servers.BufferedServer.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that is to be registered with this IPortOwner.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.BufferedServer.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port being unregistered.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.BufferedServer.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.BufferedServer.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.BufferedServer.Description">
            <summary>
            A description of this BufferedServer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.BufferedServer.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.ServiceEvent">
            <summary>
            Implemented by an object wishing to receive notification of the commencement or completion
            of service of an object.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.ServiceRequestEvent">
            <summary>
            Implemented by an object wishing to participate in the decision of whether a service object
            can be serviced.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.IServer">
            <summary>
            An object that implements IServer receives objects on an input port, and some time later,
            emits them from its Output port. If the model's SupportsServiceObjects property is set to
            true, and the received object is an implementer of IServiceObject, then that object's
            OnServiceBeginning and OnServiceCompleting events are fired as the object is received, and
            later, emitted.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.IServer.Input">
            <summary>
            The port on which a new service item arrives.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.IServer.Output">
            <summary>
            The port to which a completed service item is discharged.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.IServer.PlaceInServiceAt(System.DateTime)">
            <summary>
            Call this API to schedule the server to be placed in service at given time.
            </summary>
            <param name="dt">The time at which the server is to be placed in service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.IServer.PlaceInService">
            <summary>
            Places this server in service immediately.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.IServer.RemoveFromServiceAt(System.DateTime)">
            <summary>
            Call this API to schedule the server to be removed from service at given time.
            </summary>
            <param name="dt">The time at which the server is to be removed from service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.IServer.RemoveFromService">
            <summary>
            Removes this server from service.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.IServer.ServiceBeginning">
            <summary>
            Fired when service begins for a particular object.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.IServer.ServiceCompleted">
            <summary>
            Fired when service completes for a particular object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.IServer.Periodicity">
            <summary>
            The periodicity of the server.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.IServiceObject">
            <summary>
            Optional interface for a service object, in case it wants to be notified of its
            stages of participation with, or processing by, a server.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.Mathematics.TimeSpanDistribution,System.Int32)">
            <summary>
            Creates a Server that accepts service objects on its input port, and holds them for a duration
            specified by a TimeSpanDistribution before emitting them from its output port. It currently is
            designed always to be "in service."<para/>
            </summary>
            <param name="model">The model in which this buffered server will operate.</param>
            <param name="name">The name given to this server.</param>
            <param name="guid">The guid that this server will be known by.</param>
            <param name="timeSpanDistribution">The TimeSpanDistribution that specifies how long each object is held.</param>
            <param name="capacity">The capacity of this server to hold service objects (i.e. how many it can hold)</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port to be removed from this MultiChannelDelayServer.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.Description">
            <summary>
            A description of this BufferedServer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.PlaceInServiceAt(System.DateTime)">
            <summary>
            From class docs - It currently is designed always to be "in service."
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.PlaceInService">
            <summary>
            From class docs - It currently is designed always to be "in service."
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.RemoveFromServiceAt(System.DateTime)">
            <summary>
            From class docs - It currently is designed always to be "in service."
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.RemoveFromService">
            <summary>
            From class docs - It currently is designed always to be "in service."
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.MultiChannelDelayServer.Periodicity">
            <summary>
            This server has no periodicity, but rather a TimeSpanDistribution (since it
            services multiple objects at the same time.)
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.ResourceServer">
            <summary>
            A resource server is a server that acquires a resource on behalf of an object presented
            at its input port, waits a particular duration, releases that resource, and passes the
            object to its output port.<p></p>
            The ResourceServer is aware of a ResourcePool, and when the ResourceServer is placed in
            service, or the ResourcePool fires a Release event, the resource server attampts to pull
            and service a new object from its input port.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.ServerPlus">
            <summary>
            A 'server plus' is a server that can decide whether it can provide service based on some
            outside criteria, then do something (i.e. setup) before starting service, and something
            else (i.e. teardown) before completing service.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.IPeriodicity)">
            <summary>
            Creates a new instance of the <see cref="T:ServerPlus"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="periodicity">The periodicity.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.PlaceInServiceAt(System.DateTime)">
            <summary>
            Waits until a specified time, then places the server in service. Can be done directly in code
            through the PlaceInService() API and an executive event with handler. 
            </summary>
            <param name="dt">The DateTime at which the server will be placed in service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.PlaceInService(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Places the server in service immediately. The server will try immediately to
            pull and service a service object from its input port.
            </summary>
            <param name="exec">The executive controlling the timebase in which this server is
            to operate. Typically, model.Executive.</param>
            <param name="userData"></param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.PlaceInService">
            <summary>
            Places the server in service immediately. The server will try immediately to
            pull and service a service object from its input port.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.RemoveFromServiceAt(System.DateTime)">
            <summary>
            Removes the server from service at a specified time. The server will complete
            servicing its current service item, and then accept no more items.
            </summary>
            <param name="dt">The DateTime at which this server is to be removed from service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.RemoveFromService">
            <summary>
            Removes this server from service immediately. The server will complete
            servicing its current service item, and then accept no more items.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.ServerPlus.ServiceBeginning">
            <summary>
            Fires when the server begins servicing an object.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.ServerPlus.ServiceCompleted">
            <summary>
            Fires when the server completes servicing an object.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Servers.ServerPlus.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add. It is known by the Guid and name of the port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.ServerPlus.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port that is to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.ServerPlus.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.ServerPlus.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.ServerPlus.Description">
            <summary>
            A description of this ServerPlus.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.ServerPlus.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Servers.SimpleServer">
            <summary>
            A SimpleServer is a single-channeled server that accepts one object from its input port,
            waits a specified timespan, and then presents that object to its output port. It does not
            permit its own outputs to be refused.
            <p></p>
            When a server becomes idle, it attempts to pull from its input port. If it is successful,
            it becomes busy for a timespan, determined by a timespan distribution after which the
            object is presented to its output port. Once the object at its output port is taken, the
            server becomes idle.
            If an object is presented on its input port and it is busy, it rejects the presentation
            by returning false. If it is not busy when the presentation is made, then it accepts 
            the new arrival, and commences working on it for a timespan. When the timespan expires,
            the object is placed on its output port. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.PlaceInServiceAt(System.DateTime)">
            <summary>
            Waits until a specified time, then places the server in service. Can be done directly in code
            through the PlaceInService() API and an executive event with handler. 
            </summary>
            <param name="dt">The DateTime at which the server will be placed in service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.PlaceInService(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Places the server in service immediately. The server will try immediately to
            pull and service a service object from its input port.
            </summary>
            <param name="exec">The executive controlling the timebase in which this server is
            to operate. Typically, model.Executive.</param>
            <param name="userData"></param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.PlaceInService">
            <summary>
            Places the server in service immediately. The server will try immediately to
            pull and service a service object from its input port.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.RemoveFromServiceAt(System.DateTime)">
            <summary>
            Removes the server from service at a specified time. The server will complete
            servicing its current service item, and then accept no more items.
            </summary>
            <param name="dt">The DateTime at which this server is to be removed from service.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.RemoveFromService">
            <summary>
            Removes this server from service immediately. The server will complete
            servicing its current service item, and then accept no more items.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.SimpleServer.Periodicity">
            <summary>
            The periodicity of the server.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.PrepareToServe">
            <summary>
            This method is called either when an in-process service completes, or when a new
            service object shows up at the entry point of an idle server.
            </summary>
            <returns>true if the service event may proceed. If an implementer returns false,
            it is up to that implementer to ensure that in some way, it initiates re-attempt
            at a later time, or this server will freeze.</returns>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.SimpleServer.ServiceBeginning">
            <summary>
            Fires when the server begins servicing an object.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Servers.SimpleServer.ServiceCompleted">
            <summary>
            Fires when the server completes servicing an object.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.Servers.SimpleServer.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.SimpleServer.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port being unregistered.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.SimpleServer.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.SimpleServer.Description">
            <summary>
            A description of this SimpleServer.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.Servers.SimpleServer.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Servers.SimpleServer.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SimplePortOwner">
            <summary>
            Summary description for SimplePortOwner.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.SimplePortOwner"/> class.
            </summary>
            <param name="name">The name by which this SimplePortOwner will be known.</param>
            <param name="guid">The GUID by which this SimplePortOwner will be known.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SimplePortOwner.Ports">
            <summary>
            The PortSet that contains all ports currently registered with this
            SimplePortOwner.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a Port to this SimplePortOwner's PortSet.
            </summary>
            <param name="port">The port that is being registered.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SimplePortOwner.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this SimplePortOwner's PortSet.
            </summary>
            <param name="port">The port that is to be removed from this IPortOwner.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SimplePortOwner.ClearPorts">
            <summary>
            Unregisters all ports from this PortSet.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SimplePortOwner.Description">
            <summary>
            A description of this SimplePortOwner.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SinksAndSources.ObjectSink">
            <summary>
            Implemented by a method that is intended to consume objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.CanAcceptPushedData(System.Object,Highpoint.Sage.ItemBased.Ports.IInputPort)">
            <summary>
            Determines whether this instance can accept pushed data on its input port[s].
            </summary>
            <param name="data">The data.</param>
            <param name="port">The port.</param>
            <returns>
            	<c>true</c> if this instance can accept pushed data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port being unregistered.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.Description">
            <summary>
            A description of this ItemSink.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSink.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SinksAndSources.ObjectSource">
            <summary>
            Implemented by a method that is intended to generate objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.ItemBased.SinksAndSources.ObjectSource,Highpoint.Sage.ItemBased.IPulseSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="objectSource">The object source.</param>
            <param name="pulseSource">The pulse source.</param>
            <param name="persistentOutput">If true, then the most recent output value will be returned on any peek or pull.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.Output">
            <summary>
            Gets the output port for this source.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.ObjectSource">
            <summary>
            Gets or sets the object source, the factory method for creating items from this source.
            </summary>
            <value>The object source.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.PulseSource">
            <summary>
            Gets or sets the pulse source, the ModelObject tjat provides the cadence for creating items from this source.
            </summary>
            <value>The pulse source.</value>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will know by this key.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.Description">
            <summary>
            A description of this ItemSource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SinksAndSources.ItemSource.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock">
            <summary>
            The SimpleBranchBlock takes an object off of one input port, makes a choice from among its
            output ports, and sends the object to that port.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.OnDataArrived(System.Object,Highpoint.Sage.ItemBased.Ports.IInputPort)">
            <summary>
             Implemented by a method designed to respond to the arrival of data
             on a port.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Adds a user-created port to this object's port set.
            </summary>
            <param name="port">The port to be added to the portSet.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Removes a port from an object's portset. Any entity having references
            to the port may still use it, though this may be wrong from an application
            perspective. Implementers are responsible to refuse removal of a port that
            is a hard property exposed (e.g. this.InputPort0), since it will remain
            accessible via that property.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.ClearPorts">
            <summary>
            Unregisters all ports.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.Ports">
            <summary>
            A PortSet containing the ports that this port owner owns.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.Description">
            <summary>
            A description of this SimpleBranchBlock.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimpleBranchBlock.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner">
            <summary>
            Receives an object on its input port, and sends it out one or more output ports, as defined
            in a derived class. If it gets a pull from any output port, it pulls from its one input port.
            Notification of data available proceeds according to a derived class' logic.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that this IPortOwner will add.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port that will be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Joiner.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.PushJoiner">
            <summary>
            This joiner places anything that appears on any of its input ports, onto
            its output port. Pulls and Peeks are not permitted, and if the downstream
            entity rejects the push, the (upstream) provider's push will be refused.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter">
            <summary>
            Receives an object on its input port, and sends it out one or more output ports, as defined
            in a derived class. If it gets a pull from any output port, it pulls from its one input port.
            Notification of data available proceeds according to a derived class' logic.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.m_ports">
            <summary>
            The PortSet object to which this IPortOwner delegates.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.AddPort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Registers a port with this IPortOwner
            </summary>
            <param name="port">The port that is to be added to this IPortOwner.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.AddPort(System.String)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channel">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.AddPort(System.String,System.Guid)">
            <summary>
            Adds a port to this object's port set in the specified role or channel.
            </summary>
            <param name="channelTypeName">The channel - usually "Input" or "Output", sometimes "Control", "Kanban", etc.</param>
            <param name="guid">The GUID to be assigned to the new port.</param>
            <returns>The newly-created port. Can return null if this is not supported.</returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.SupportedChannelInfo">
            <summary>
            Gets the names of supported port channels.
            </summary>
            <value>The supported channels.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.RemovePort(Highpoint.Sage.ItemBased.Ports.IPort)">
            <summary>
            Unregisters a port from this IPortOwner.
            </summary>
            <param name="port">The port that is to be removed from this IPortOwner.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.ClearPorts">
            <summary>
            Unregisters all ports that this IPortOwner knows to be its own.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.Ports">
            <summary>
            The public property that is the PortSet this IPortOwner owns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.Splitter.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimultaneousPushSplitter">
            <summary>
            This splitter places anything that appears on its input port, simultaneously
            onto all of its output ports. If any output port cannot accept it, that output
            port is ignored <b>REJECTION OF PUSHES IS NOT SUPPORTED.</b>. Pulls and Peeks are not permitted.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimultaneousPushSplitter.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.SplittersAndJoiners.SimultaneousPushSplitter"/> class.
            </summary>
            <param name="model">The model in which this <see cref="T:SimultaneousPushSplitter"/> will run.</param>
            <param name="name">The name of the new <see cref="T:SimultaneousPushSplitter"/>.</param>
            <param name="guid">The GUID of the new <see cref="T:SimultaneousPushSplitter"/>.</param>
            <param name="nOuts">The number of outputs this splitter will start with.</param>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.ITagType">
            <summary>
            A TagType contains metadata governing the use of Tags for a particular purpose. Tags can be
            constrained or not, extensible or not, and have a list of candidate values or not. 
            <b></b>Example 1: A tag named "LotID" would be unconstrained, and therefore, extensible. That
            is to say that the tag may hold any (string) value and therefore, any new value is acceptable.
            <b></b>Example 2: A tag might be of type "Rework", and be constrained to values "Yes" or "No",
            and not be extensible, i.e. with no provision for being able to add any other options.
            <b></b>Example 3: A tag might be of type "Flavor", and be constrained to "Chocolate", "Vanilla"
            and "Strawberry", but be extensible so that during execution, some dispatcher (or whatever) can
            add "Tutti-Frutti" to the list of acceptable values.
            <b></b>A TagType is used to create tags or its type.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.ITagType.TypeName">
            <summary>
            Gets the name of the tag type.
            </summary>
            <value>The name of the tag type.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.ITagType.ValueCandidates">
            <summary>
            Gets the value candidates list for this tag type. If the tag type is unconstrained, it returns null.
            </summary>
            <value>The value candidates.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.ITagType.isConstrained">
            <summary>
            Gets a value indicating whether this instance is constrained to a specific set of candidate values.
            </summary>
            <value>
            	<c>true</c> if this instance is constrained; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.ITagType.isExtensible">
            <summary>
            Gets a value indicating whether this instance is extensible. An unconstrained tag type is by definition extensible.
            </summary>
            <value>
            	<c>true</c> if this instance is extensible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.ITagType.AddValueCandidate(System.String)">
            <summary>
            Adds the value to the list of candidate values that tags of this type may take on. This will return false if the
            Tag Type is either not extensible, or not constrained.
            </summary>
            <param name="value">The new value.</param>
            <returns>True if successful, false if the Tag Type is either not extensible, or not constrained.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.ITagType.CreateTag(System.String)">
            <summary>
            Creates a new tag of this type, with the specified initial value.
            </summary>
            <param name="initialValue">The initial value.</param>
            <returns>A new Tag.</returns>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.IChangesTagsOnServiceObjects">
            <summary>
            Implemented by an object that changes the values of the tags on service objects it handles.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.IChangesTagsOnServiceObjects.TagTypesAffected">
            <summary>
            Gets a list of the tag types that can be changed on service objects.
            </summary>
            <value>The tag types affected.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.IAddsTagsToServiceObjects">
            <summary>
            Implemented by an object that adds tags to service objects it handles.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.IAddsTagsToServiceObjects.TagTypesAffected">
            <summary>
            Gets a list of the tag types that can be added to service objects.
            </summary>
            <value>The tag types affected.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.ITagHolder">
            <summary>
            Implemented by an object (usually a service item) that has tags attached.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.ITagHolder.Tags">
            <summary>
            Gets the tags held by this service item.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.TagList">
            <summary>
            A list of tags.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagList.FilterOn(Highpoint.Sage.ItemBased.ITagType)">
            <summary>
            Filters the list on those tags with the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>A sublist consisting only of tags with the specified type.</returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagList.FilterOn(System.String)">
            <summary>
            Filters the list on those tags with the specified type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>
            A sublist consisting only of tags with the specified type name.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.TagList.Item(System.String)">
            <summary>
            Gets the <see cref="T:Highpoint.Sage.ItemBased.ITag"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.IReadOnlyTag">
            <summary>
            A read only Tag.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.ITag">
            <summary>
            A tag that can be read and written.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.TagComparers">
            <summary>
            This is a holder class for access to IComparers that can be used to sort tags and TagHolders in their lists.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagComparers.TagsByValue(System.String)">
            <summary>
            Returns an IComparer that compares objects that implement IHasTags, where the comparison is done against
            a specifically-named tag.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.TagType">
            <summary>
            A TagType contains metadata governing the use of Tags for a particular purpose. Tags can be
            constrained or not, extensible or not, and have a list of candidate values or not. 
            <b></b>Example 1: A tag named "LotID" would be unconstrained, and therefore, extensible. That
            is to say that the tag may hold any (string) value and therefore, any new value is acceptable.
            <b></b>Example 2: A tag might be of type "Rework", and be constrained to values "Yes" or "No",
            and not be extensible, i.e. with no provision for being able to add any other options.
            <b></b>Example 3: A tag might be of type "Flavor", and be constrained to "Chocolate", "Vanilla"
            and "Strawberry", but be extensible so that during execution, some dispatcher (or whatever) can
            add "Tutti-Frutti" to the list of acceptable values.
            <b></b>A TagType is used to create tags or its type.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.TagType"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagType.#ctor(System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.ItemBased.TagType"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="extensible">if set to <c>true</c> [extensible].</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.TagType.TypeName">
            <summary>
            Gets the name of the tag type.
            </summary>
            <value>The name of the tag type.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.TagType.ValueCandidates">
            <summary>
            Gets the value candidates list for this tag type. If the tag type is unconstrained, it returns null.
            </summary>
            <value>The value candidates.</value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.TagType.isConstrained">
            <summary>
            Gets a value indicating whether this instance is constrained to a specific set of candidate values.
            </summary>
            <value>
            	<c>true</c> if this instance is constrained; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.ItemBased.TagType.isExtensible">
            <summary>
            Gets a value indicating whether this instance is extensible. An unconstrained tag type is by definition extensible.
            </summary>
            <value>
            	<c>true</c> if this instance is extensible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagType.AddValueCandidate(System.String)">
            <summary>
            Adds the value to the list of candidate values that tags of this type may take on. This will return false if the
            Tag Type is either not extensible, or not constrained.
            </summary>
            <param name="value">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.TagType.CreateTag(System.String)">
            <summary>
            Creates a new tag of this type, with the specified initial value.
            </summary>
            <param name="initialValue">The initial value.</param>
            <returns>A new Tag.</returns>
        </member>
        <member name="T:Highpoint.Sage.ItemBased.Ticker">
            <summary>
            A class that generates a <see cref="T:Highpoint.Sage.ItemBased.PulseEvent"/> at a specified periodicity.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ticker.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.ItemBased.IPeriodicity,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Ticker"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="periodicity">The periodicity of the ticker.</param>
            <param name="autoStart">if set to <c>true</c> the ticker will start automatically, immediately on model start, and cycle indefinitely.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ticker.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.ItemBased.IPeriodicity,System.Boolean,System.Int64)">
            <summary>
            Creates a new instance of the <see cref="T:Ticker"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="periodicity">The periodicity of the ticker.</param>
            <param name="autoStart">if set to <c>true</c> the ticker will start automatically, immediately on model start, and cycle indefinitely.</param>
            <param name="nPulses">The number of pulses to be served.</param>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ticker.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.ItemBased.Ticker.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.ItemBased.Ticker.PulseEvent">
            <summary>
            Fired when this Ticker pulses.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.IDoubleDistribution">
            <summary>
            The IDoubleDistribution interface produces a sequence of values. They are 
            generated by a class that ensures that the values that are generated
            conform to a particular distribution.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IDoubleDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IDoubleDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IDoubleDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.ITimeSpanDistribution">
            <summary>
            The ITimeSpanDistribution interface produces a sequence of TimeSpan values.
            They are generated by a class that ensures that the values that are generated
            conform to a particular distribution.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ITimeSpanDistribution.GetNext">
            <summary>
            Gets the next value in this distribution.
            </summary>
            <returns>The next value in this distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ITimeSpanDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what duration will, with 90% certainty, always be greater than or equal
            to a duration returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ITimeSpanDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.TimeSpanDistribution">
            <summary>
            A distribution that uses an underlying <see cref="T:Highpoint.Sage.Mathematics.IDoubleDistribution"/> to
            generate a distribution of TimeSpans.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.TimeSpanDistribution.Units">
            <summary>
            The units of a TimeSpanDistribution. The values are according to the underlying IDoubleDistribution, and 
            the units are according to the selected element of this enumeration.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.TimeSpanDistribution.Units.Seconds">
            <summary>
            Seconds 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.TimeSpanDistribution.Units.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.TimeSpanDistribution.Units.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.TimeSpanDistribution.Units.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.#ctor(Highpoint.Sage.Mathematics.IDoubleDistribution,Highpoint.Sage.Mathematics.TimeSpanDistribution.Units)">
            <summary>
            Creates a new instance of the <see cref="T:TimeSpanDistribution"/> class.
            </summary>
            <param name="distribution">The underlying IDoubleDistribution that will generate the values in this TimeSpanDistribution.</param>
            <param name="units">The units that will be applied to the values out of the underlying IDoubleDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.Mathematics.IDoubleDistribution,Highpoint.Sage.Mathematics.TimeSpanDistribution.Units)">
            <summary>
            Creates a new instance of the <see cref="T:TimeSpanDistribution"/> class.
            </summary>
            <param name="model">The model in which this TimeSpanDistribution will exist.</param>
            <param name="name">The name of this TimeSpanDistribution.</param>
            <param name="guid">The GUID of this TimeSpanDistribution.</param>
            <param name="distribution">The underlying IDoubleDistribution that will generate the values in this TimeSpanDistribution.</param>
            <param name="units">The units that will be applied to the values out of the underlying IDoubleDistribution.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TimeSpanDistribution.BaseDistribution">
            <summary>
            Gets or sets the base distribution.
            </summary>
            <value>The base distribution.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new TimeSpanDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Guid,Highpoint.Sage.Mathematics.TimeSpanDistribution.Units)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.TimeSpanDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this TimeSpanDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this TimeSpanDistribution.</param>
            <param name="description">The description of this TimeSpanDistribution.</param>
            <param name="guid">The GUID of this TimeSpanDistribution.</param>
            <param name="distribution">The GUID of the underlying double distribution which drives this TimeSpanDistribution.</param>
            <param name="units">The units (minutes, seconds, etc) that are applied to the underlying double distribution in deriving this TimeSpanDistribution's timespans.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model to which this distribution belongs.</param>
            <param name="name">The name of the distribution.</param>
            <param name="description">The description of the distribution.</param>
            <param name="guid">The GUID of the distribution.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TimeSpanDistribution.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TimeSpanDistribution.Description">
            <summary>
            A description of this Timespan Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TimeSpanDistribution.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TimeSpanDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.GetNext">
            <summary>
            Gets the next value in this distribution.
            </summary>
            <returns>The next value in this distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what duration will, with 90% certainty, always be greater than or equal
            to a duration returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TimeSpanDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.ConstantDoubleDistribution">
            <summary>
            A ConstantDoubleDistribution serves a constant value.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.#ctor(System.Double)">
            <summary>
            Creates a ConstantDoubleDistribution with a specific value;
            </summary>
            <param name="val">The (double) value that this distribution always serves up.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double)">
            <summary>
            Creates a ConstantDoubleDistribution with a specific value;
            </summary>
            <param name="model">the model of which this distribution is a part.</param>
            <param name="name">The name that this distribution goes by.</param>
            <param name="guid">The Guid of this distribution.</param>
            <param name="val">The (double) value that this distribution always serves up.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.#ctor">
            <summary>
            Use this for initialization of the form new ConstantDoubleDistribution().Initialize( ... );
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.ConstantDoubleDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this ConstantDoubleDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this ConstantDoubleDistribution.</param>
            <param name="description">The description of this ConstantDoubleDistribution.</param>
            <param name="guid">The GUID of this ConstantDoubleDistribution.</param>
            <param name="val">The value that this ConstantDoubleDistribution always returns.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model that owns this ConstantDoubleDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this ConstantDoubleDistribution.</param>
            <param name="description">The description of this ConstantDoubleDistribution.</param>
            <param name="guid">The GUID of this ConstantDoubleDistribution.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.Name">
            <summary>
            The user-friendly name for this Constant Double Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.Description">
            <summary>
            A description of this Constant Double Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.Guid">
            <summary>
            The Guid for this Constant Double Distribution. Required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ConstantDoubleDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.NormalDistribution">
            <summary>
            For both theoretical and practical reasons, the normal distribution is 
            probably the most important distribution in statistics. For example, 
            <p></p>Many classical statistical tests are based on the assumption 
            that the data follow a normal distribution. This assumption should be
            tested before applying these tests. 
            <p></p>In modeling applications, such as linear and non-linear regression,
            the error term is often assumed to follow a normal distribution with fixed
            location and scale. 
            <p></p>The normal distribution is used to find significance levels in many
            hypothesis tests and confidence intervals. 
            <p></p> The mathematics for this distribution come from 
            http://home.online.no/~pjacklam/notes/invnorm/impl/misra/normsinv.html
            ...derived from http://www.netlib.org/specfun/erf
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:NormalDistribution"/> class.
            </summary>
            <param name="mean">The mean.</param>
            <param name="stdev">The stdev.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:NormalDistribution"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="mean">The mean.</param>
            <param name="stdev">The stdev.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="p">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.#ctor">
            <summary>
            Use this for initialization of the form new NormalDistribution().Initialize( ... );
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.NormalDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this object and in whose context the initialization is being performed.</param>
            <param name="name">The name of this NormalDistribution.</param>
            <param name="description">The description of this NormalDistribution.</param>
            <param name="guid">The GUID of this NormalDistribution.</param>
            <param name="mean">The mean of this NormalDistribution.</param>
            <param name="stdev">The standard deviation of this NormalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.NormalDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.NormalDistribution.Name">
            <summary>
            The user-friendly name for this NormalDistribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.NormalDistribution.Description">
            <summary>
            A description of this Normal Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.NormalDistribution.Guid">
            <summary>
            The Guid for this NormalDistribution. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.NormalDistribution.Model">
            <summary>
            The model that owns this NormalDistribution, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.LognormalDistribution">
            <summary>
            According to http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm, 
            the lognormal distribution is used extensively in reliability applications to 
            model failure times. The lognormal and Weibull distributions are probably the 
            most commonly used distributions in reliability applications.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:LognormalDistribution"/> class.
            </summary>
            <param name="mean">The mean value of this LognormalDistribution.</param>
            <param name="stdev">The standard deviation of this LognormalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:LognormalDistribution"/> class.
            </summary>
            <param name="model">The model that owns this LognormalDistribution.</param>
            <param name="name">The name of this LognormalDistribution.</param>
            <param name="guid">The GUID of this LognormalDistribution.</param>
            <param name="mean">The mean value of this LognormalDistribution.</param>
            <param name="stdev">The standard deviation of this LognormalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new LognormalDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.NormalDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this object and in whose context the initialization is being performed.</param>
            <param name="name">The name of this LognormalDistribution.</param>
            <param name="description">The description of this LognormalDistribution.</param>
            <param name="guid">The GUID of this LognormalDistribution.</param>
            <param name="mean">The mean of this LognormalDistribution.</param>
            <param name="stdev">The standard deviation of this LognormalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LognormalDistribution._Initialize_LogNormal(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.TriangularDistribution">
            <summary>
            A triangular distribution is a distribution defined on x in [a,b], where its Probability Density Function is
            <para/>
            P(x) = 2(x-a)/((b-a)(c-a)) for x on [a,c]
            <para/>
            P(x) = 2(b-x)/((b-a)(b-c)) for x on [c,b]
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:TriangularDistribution"/> class.
            </summary>
            <param name="lowBound">The low bound.</param>
            <param name="mode">The mode.</param>
            <param name="highBound">The high bound.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:TriangularDistribution"/> class.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The user-friendly name of this object. Typically not required to be unique in a pan-model context.</param>
            <param name="guid">The GUID of this object. Typically registered as this object's ModelObject key, and thus, required to be unique in a pan-model context.</param>
            <param name="lowBound">The low bound.</param>
            <param name="mode">The mode.</param>
            <param name="highBound">The high bound.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new TriangularDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.TriangularDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this TriangularDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this TriangularDistribution.</param>
            <param name="description">The description of this TriangularDistribution.</param>
            <param name="guid">The GUID of this TriangularDistribution.</param>
            <param name="lowBound">The low bound of the TriangularDistribution.</param>
            <param name="mean">The mean of the TriangularDistribution.</param>
            <param name="highBound">The high bound of the TriangularDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.TriangularDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TriangularDistribution.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value>The user-friendly name for this object.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TriangularDistribution.Description">
            <summary>
            A description of this Triangular Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TriangularDistribution.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.TriangularDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.BinomialDistribution">
            <summary>
            A Binomial distribution gives the discrete probability distribution P_p(n|N) of obtaining
            exactly n successes out of N Bernoulli trials (where the result of each Bernoulli trial
            is true with probability p and false with probability q==1-p).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.#ctor(System.Double,System.Int32)">
            <summary>
            Create a binomial distribution.
            </summary>
            <param name="probability">The probability of success in any one Bernoulli trial.</param>
            <param name="numberOfOpps">The number of Bernoulli trials in the experiment.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Int32)">
            <summary>
            Create a binomial distribution.
            </summary>
            <param name="model">The model that owns this BinomialDistribution.</param>
            <param name="name">The name of this BinomialDistribution.</param>
            <param name="guid">The GUID of this BinomialDistribution.</param>
            <param name="probability">The probability of success in any one Bernoulli trial.</param>
            <param name="numberOfOpps">The number of Bernoulli trials in the experiment.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.GetNext">
            <summary>
            Returns a value representing the number of successes experienced in a new experiment.
            </summary>
            <returns>The number of successes experienced in a new experiment. Returned as an integral value.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new BinomialDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Int32)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.BinomialDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this BinomialDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this BinomialDistribution.</param>
            <param name="description">The description of this BinomialDistribution.</param>
            <param name="guid">The GUID of this BinomialDistribution.</param>
            <param name="probability">The probability of any one opportunity embodied by this BinomialDistribution.</param>
            <param name="numberOfOpps">The number of opportunities in a trial.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.BinomialDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.BinomialDistribution.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value>The user-friendly name for this object.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.BinomialDistribution.Description">
            <summary>
            A description of this Binomial Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.BinomialDistribution.Guid">
            <summary>
            The Guid for this Binomial Distribution. Typically required to be unique.
            </summary>
            <value>The Guid for this Binomial Distribution.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.BinomialDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.ExponentialDistribution">
            <summary>
            Produces an exponential distribution. The exponential distribution 
            is primarily used in reliability applications. The exponential 
            distribution is used to model data with a constant failure rate. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates an exponential distribution with a specified mean and beta.
            </summary>
            <param name="location">The mean, or location of the Exponential distribution.</param>
            <param name="scale">The scale, or beta of the Exponential distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Creates an exponential distribution with a specified mean and beta.
            </summary>
            <param name="model">The model to which this exponential distribution belongs.</param>
            <param name="name">The name of this exponential distribution.</param>
            <param name="guid">The GUID of this exponential distribution.</param>
            <param name="location">The mean, or location of the Exponential distribution.</param>
            <param name="scale">The scale, or beta of the Exponential distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.GetNext">
            <summary>
            Serves up the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new ExponentialDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.ExponentialDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this ExponentialDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this ExponentialDistribution.</param>
            <param name="description">The description of this ExponentialDistribution.</param>
            <param name="guid">The GUID of this ExponentialDistribution.</param>
            <param name="location">The location (i.e. center) of the ExponentialDistribution.</param>
            <param name="scale">The scale (i.e. shape) of the ExponentialDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ExponentialDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ExponentialDistribution.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value>The user-friendly name for this object.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ExponentialDistribution.Description">
            <summary>
            A description of this Exponential Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ExponentialDistribution.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.ExponentialDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.PoissonDistribution">
            <summary>
            Creates a Poisson Distribution. The Poisson distribution is a discrete
            distribution that is used to model the number of events occurring within
            a given time interval. 
            http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.#ctor(System.Double)">
            <summary>
            Creates a Poisson Distribution with a specified mean.
            The upper range will be 4 times the mean.
            </summary>
            <param name="mean">The mean (lambda) of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double)">
            <summary>
            Creates a Poisson Distribution with a specified mean.
            The upper range will be 4 times the mean.
            </summary>
            <param name="model">The model that owns this Poisson Distribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this Poisson Distribution.</param>
            <param name="guid">The GUID of this Poisson Distribution.</param>
            <param name="mean">The mean (lambda) of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.GetNext">
            <summary>
            Serves up the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new PoissonDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.PoissonDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this PoissonDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this PoissonDistribution.</param>
            <param name="description">The description of this PoissonDistribution.</param>
            <param name="guid">The GUID of this PoissonDistribution.</param>
            <param name="mean">The mean of the PoissonDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.PoissonDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.PoissonDistribution.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value>The user-friendly name for this object.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.PoissonDistribution.Description">
            <summary>
            A description of this Poisson Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.PoissonDistribution.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.PoissonDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.UniformDistribution">
            <summary>
            Creates a Uniform Distribution with a specified minimum and maximum. 
            The uniform distribution defines equal probability over a given range
            for a continuous distribution. For this reason, it is important as a
            reference distribution. <p></p>
            One of the most important applications of the uniform distribution
            is in the generation of random numbers. That is, almost all random
            number generators generate random numbers on the (0,1) interval. For
            other distributions, some transformation is applied to the uniform
            random numbers. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Uniform Distribution with a specified minimum and maximum.
            </summary>
            <param name="minimum">The minimum of the distribution.</param>
            <param name="maximum">The maximum of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Creates a Uniform Distribution with a specified minimum and maximum.
            </summary>
            <param name="model">The model that owns this Uniform Distribution.</param>
            <param name="name">The name of this Uniform Distribution.</param>
            <param name="guid">The GUID of this Uniform Distribution.</param>
            <param name="minimum">The minimum of the distribution.</param>
            <param name="maximum">The maximum of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.GetNext">
            <summary>
            Serves up the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new UniformDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.UniformDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this UniformDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this UniformDistribution.</param>
            <param name="description">The description of this UniformDistribution.</param>
            <param name="guid">The GUID of this UniformDistribution.</param>
            <param name="minimum">The minimum value in this UniformDistribution.</param>
            <param name="maximum">The maximum value in this UniformDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniformDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniformDistribution.Name">
            <summary>
            The user-friendly name for this Uniform Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniformDistribution.Description">
            <summary>
            A description of this Uniform Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniformDistribution.Guid">
            <summary>
            The Guid for this Uniform Distribution. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniformDistribution.Model">
            <summary>
            The model that owns this Uniform Distribution, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.CauchyDistribution">
            <summary>
            The Cauchy distribution is important
            as an example of a pathological case. Cauchy distributions look similar
            to a normal distribution. However, they have much heavier tails. When
            studying hypothesis tests that assume normality, seeing how the tests
            perform on data from a Cauchy distribution is a good indicator of how
            sensitive the tests are to heavy-tail departures from normality.
            Likewise, it is a good check for robust techniques that are designed to
            work well under a wide variety of distributional assumptions. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Creates a Cauchy Distribution with a specified location and shape.
            </summary>
            <param name="location">The location (center) of the distribution.</param>
            <param name="shape">The shape (extent) of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Creates a Cauchy Distribution with a specified location and shape.
            </summary>
            <param name="model">The model that owns this Cauchy Distribution.</param>
            <param name="name">The name of this Cauchy Distribution.</param>
            <param name="guid">The GUID of this Cauchy Distribution.</param>
            <param name="location">The location (center) of the distribution.</param>
            <param name="shape">The shape (extent) of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.GetNext">
            <summary>
            Serves up the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new CauchyDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.CauchyDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this CauchyDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this CauchyDistribution.</param>
            <param name="description">The description of this CauchyDistribution.</param>
            <param name="guid">The GUID of this CauchyDistribution.</param>
            <param name="location">The location of this CauchyDistribution.</param>
            <param name="shape">The shape of this CauchyDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CauchyDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.CauchyDistribution.Name">
            <summary>
            The user-friendly name for this Cauchy Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.CauchyDistribution.Description">
            <summary>
            A description of this Cauchy Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.CauchyDistribution.Guid">
            <summary>
            The Guid for this Cauchy Distribution. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.CauchyDistribution.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.WeibullDistribution">
            <summary>
            The Weibull distribution is used extensively in reliability applications to model failure times. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            The Weibull distribution is used extensively in reliability applications to model failure times.
            </summary>
            <param name="shape">The shape parameter. Must be &gt; 0. &lt; 1 looks like an L, ~1 looks like a '/', and &gt; 1 looks like a '/\_'</param>
            <param name="location">The location parameter. Where the distribution is, on the X axis.</param>
            <param name="scale">The scale parameter.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,System.Double)">
            <summary>
            The Weibull distribution is used extensively in reliability applications to model failure times.
            </summary>
            <param name="model">The model to which this Weibull Distribution belongs.</param>
            <param name="name">The name of this Weibull Distribution.</param>
            <param name="guid">The GUID of this Weibull Distribution.</param>
            <param name="shape">The shape parameter. Must be &gt; 0. &lt; 1 looks like an L, ~1 looks like a '/', and &gt; 1 looks like a '/\_'</param>
            <param name="location">The location parameter. Where the distribution is, on the X axis.</param>
            <param name="scale">The scale parameter.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.GetNext">
            <summary>
            Serves up the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new WeibullDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double,System.Double,System.Double)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.WeibullDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this WeibullDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this WeibullDistribution.</param>
            <param name="description">The description of this WeibullDistribution.</param>
            <param name="guid">The GUID of this WeibullDistribution.</param>
            <param name="shape">The shape of this WeibullDistribution.</param>
            <param name="location">The location of this WeibullDistribution.</param>
            <param name="scale">The scale of this WeibullDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.WeibullDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.WeibullDistribution.Name">
            <summary>
            The user-friendly name for this Weibull Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.WeibullDistribution.Description">
            <summary>
            A description of this Weibull Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.WeibullDistribution.Guid">
            <summary>
            The Guid for this Weibull Distribution. Typically required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.WeibullDistribution.Model">
            <summary>
            The model that owns this Weibull Distribution, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.EmpiricalDistribution">
            <summary>
            An Empirical distribution is a distribution that is formed from a Probability Density Function (PDF) that
            is provided by an external entity. The PDF is provided as a pair of x-value and y-value arrays. Like-indexed
            elements in these arrays are assumed to correspond to each other to form an (x,y) value that is a point on
            the PDF being described. Additionally, an Interpolator may be specified to smooth the otherwise piecewise
            linear PDF "curve."
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.#ctor(System.Double[],System.Double[],Highpoint.Sage.Mathematics.IDoubleInterpolator)">
            <summary>
            An empirical distribution creates a distribution whose CDF looks like an empirically-declared curve.
            </summary>
            <param name="xVals">The X values that form the empirical data inflection points.</param>
            <param name="yVals">The Y values that form the empirical data inflection points.</param>
            <param name="idi">An implementer of IDoubleInterpolator that this distribution will use to ascertain values between provided inflection points.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double[],System.Double[],Highpoint.Sage.Mathematics.IDoubleInterpolator)">
            <summary>
            An empirical distribution creates a distribution whose CDF looks like an empirically-declared curve.
            </summary>
            <param name="model">The model in which this distribution participates.</param>
            <param name="name">The name assigned to this distribution.</param>
            <param name="guid">The guid that identifies this distribution.</param>
            <param name="xVals">The X values that form the empirical data inflection points.</param>
            <param name="yVals">The Y values that form the empirical data inflection points.</param>
            <param name="idi">An implementer of IDoubleInterpolator that this distribution will use to ascertain values between provided inflection points.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double[],System.Double[])">
            <summary>
            An empirical distribution creates a distribution whose CDF looks like an empirically-declared curve.
            </summary>
            <param name="model">The model in which this distribution participates.</param>
            <param name="name">The name assigned to this distribution.</param>
            <param name="guid">The guid that identifies this distribution.</param>
            <param name="xVals">The X values that form the empirical data inflection points.</param>
            <param name="yVals">The Y values that form the empirical data inflection points.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new EmpiricalDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double[],System.Double[],System.Type)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.Highpoint.Sage.Mathematics.EmpiricalDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this EmpiricalDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this EmpiricalDistribution.</param>
            <param name="description">The description of this EmpiricalDistribution.</param>
            <param name="guid">The GUID of this EmpiricalDistribution.</param>
            <param name="xVals">The x values that make up the Cumulative Density Function of this EmpiricalDistribution.</param>
            <param name="yVals">The y values that make up the Cumulative Density Function of this EmpiricalDistribution.</param>
            <param name="interpolatorType">The type of the interpolator that this EmpiricalDistribution should use.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Double[],System.Double[])">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.EmpiricalDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this EmpiricalDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this EmpiricalDistribution.</param>
            <param name="description">The description of this EmpiricalDistribution.</param>
            <param name="guid">The GUID of this EmpiricalDistribution.</param>
            <param name="xVals">The x values that make up the Cumulative Density Function of this EmpiricalDistribution.</param>
            <param name="yVals">The y values that make up the Cumulative Density Function of this EmpiricalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.EmpiricalDistribution.Name">
            <summary>
            The user-friendly name for this Empirical Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.EmpiricalDistribution.Description">
            <summary>
            A description of this Empirical Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.EmpiricalDistribution.Guid">
            <summary>
            The Guid for this Empirical Distribution. Required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.EmpiricalDistribution.Model">
            <summary>
            The model that owns this Empirical Distribution, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.UniversalDistribution">
            <summary>
            An Empirical distribution is a distribution that is formed from a Probability Density Function (PDF) that
            is provided by an external entity. The PDF is provided as a pair of x-value and y-value arrays. Like-indexed
            elements in these arrays are assumed to correspond to each other to form an (x,y) value that is a point on
            the PDF being described. Additionally, an Interpolator may be specified to smooth the otherwise piecewise
            linear PDF "curve."
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.#ctor(Highpoint.Sage.Mathematics.ICDF)">
            <summary>
            A universal distribution relies on the caller to have implemented an arbitrary Cumulative Density Function.
            </summary>
            <param name="cumulativeDensityFunction">An implementer of ICDF that this distribution will use to ascertain values.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,Highpoint.Sage.Mathematics.ICDF)">
            <summary>
            A universal distribution relies on the caller to have implemented an arbitrary Cumulative Density Function.
            </summary>
            <param name="model">The model in which this distribution participates.</param>
            <param name="name">The name assigned to this distribution.</param>
            <param name="guid">The guid that identifies this distribution.</param>
            <param name="cumulativeDensityFunction">An implementer of ICDF that this distribution will use to ascertain values.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.GetNext">
            <summary>
            Returns the next double in the distribution.
            </summary>
            <returns>The next double in the distribution.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.GetValueWithCumulativeProbability(System.Double)">
            <summary>
            Gets the Y (distribution) value with the specified X (cumulative probability) value. For example,
            if the caller wishes to know what Y value will, with 90% certainty, always be greater than or equal
            to a value returned from the distribution, he would ask for GetValueWithCumulativeProbability(0.90);
            <para>Note: The median value of the distribution will be GetValueWithCumulativeProbability(0.50);</para>
            </summary>
            <param name="probability">The probability.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.SetCDFInterval(System.Double,System.Double)">
            <summary>
            Sets the interval on which the CDF is queried for X. The RNG internally generates a number 'x' on (0..1), and CDF(x) is the output
            random number on the distribution. For the purpose of generating a schedule, running monte-carlo simulations
            of schedules and other related tasks, we may want to generate randoms on just a portion of that CDF, say
            instead of (0..1), perhaps (0..0.95), or if we want the mean value, we would use an interval of (0.5,0.5).
            </summary>
            <param name="low">The low bound (inclusive).</param>
            <param name="high">The high bound (exclusive, unless low and high are equal).</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.#ctor">
            <summary>
            Use this for initialization of the form 'new UniversalDistribution().Initialize( ... );'
            Note that this mechanism relies on the whole model performing initialization.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.Initialize(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,System.Guid)">
            <summary>
            Initializes this <see cref="T:Highpoint.Sage.Mathematics.Highpoint.Sage.Mathematics.EmpiricalDistribution"/> in the context of the specified model. Requires execution against the Sage intialization protocol. Guids specified are those of other objects in the model which this object must interact during initialization.
            </summary>
            <param name="model">The model that owns this UniversalDistribution and in whose context the initialization is being performed.</param>
            <param name="name">The name of this UniversalDistribution.</param>
            <param name="description">The description of this UniversalDistribution.</param>
            <param name="guid">The GUID of this UniversalDistribution.</param>
            <param name="cdfGuid">The Cumulative Density Function of this UniversalDistribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution._Initialize(Highpoint.Sage.SimCore.IModel,System.Object[])">
            <summary>
            Used by the <see cref="T:Highpoint.Sage.SimCore.InitializationManager"/> in the sequenced execution of an initialization protocol.
            </summary>
            <param name="model">The model into which this object is to be initialized.</param>
            <param name="p">The parameters that will be used to initialize this object.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.UniversalDistribution.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Performs the part of object initialization that pertains to the fields associated with this object's being an implementer of IModelObject.
            </summary>
            <param name="model">The model in which this object runs.</param>
            <param name="name">The object's name.</param>
            <param name="description">The object's description.</param>
            <param name="guid">The object's GUID.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniversalDistribution.Name">
            <summary>
            The user-friendly name for this Empirical Distribution. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniversalDistribution.Description">
            <summary>
            A description of this Empirical Distribution.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniversalDistribution.Guid">
            <summary>
            The Guid for this Empirical Distribution. Required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.UniversalDistribution.Model">
            <summary>
            The model that owns this Empirical Distribution, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.ICDF">
            <summary>
            With the value of 'linear' in the Y-value range of (0.0-1.0], this
            will return the X-value variate from the implementing CDF. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.ICDF.GetVariate(System.Double)">
            <summary>
            Returns the X-value variate from the implementing CDF that corresponds to the value of 'linear'.
            </summary>
            <param name="linear">A double in the range of (0.0-1.0].</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Linear">
            <summary>
            Implements a linear CDF with an X-range of (0.0-1.0]
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Linear.GetVariate(System.Double)">
            <summary>
            Returns the X-value variate from a Linear CDF that corresponds to the value of 'linear'.
            </summary>
            <param name="linear">A double in the range of (0.0-1.0].</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.ExponentialCDF">
            <summary>
            Implements an exponential CDF mapped across a table with a specified number of entries or bins.
            Y values will range from (0.0-1.0], and the x-values at the given Y value will be stored in the
            corresponding bin.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.EmpiricalCDF">
            <summary>
            Implements an empirical CDF. The xValues passed in will be in the interval of [0.0,1.0), and
            the yValues passed in will be empirically-determined data points.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalCDF.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates an empirical, table-driven CDF from a histogram containing 'n' bins (where n > 1) with low and high bounds,
            and a count of instances (column height, in effect) in each bin. For example, with binBounds being a double[]
            with values {3.0, 5.0, 6.0, 7.0}, and heights being a double[] with values {10.0, 30.0, 20.0}, and a linear
            double interpolator, the empirical CDF will produce values evenly spaced from 3 to 5 1/6th of the time, values
            evenly spaced from 5 to 6 half the time, and values evenly spaced from 6 to 7 one third of the time.
            <p></p>This form of the constructor defaults to a linear interpolation.
            </summary>
            <param name="binBounds">An array of 'n+1' doubles in ascending order denoting the boundaries of the bins of the histogram.</param>
            <param name="heights">An array of 'n' doubles denoting the height of the bins.</param>
            <returns>An empirical CDF that returns the same distribution as represented in the histogram.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.EmpiricalCDF.#ctor(System.Double[],System.Double[],Highpoint.Sage.Mathematics.IDoubleInterpolator)">
            <summary>
            Creates an empirical, table-driven CDF from a histogram containing 'n' bins (where n > 1) with low and high bounds,
            and a count of instances (column height, in effect) in each bin. For example, with binBounds being a double[]
            with values {3.0, 5.0, 6.0, 7.0}, and heights being a double[] with values {10.0, 30.0, 20.0}, and a linear
            double interpolator, the empirical CDF will produce values evenly spaced from 3 to 5 1/6th of the time, values
            evenly spaced from 5 to 6 half the time, and values evenly spaced from 6 to 7 one third of the time.
            </summary>
            <param name="binBounds">An array of 'n+1' doubles in ascending order denoting the boundaries of the bins of the histogram.</param>
            <param name="heights">An array of 'n' doubles denoting the height of the bins.</param>
            <param name="idi">A doubleInterpolator.</param>
            <returns>An empirical CDF that returns the same distribution as represented in the histogram.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.DistributionCatalog">
            <summary>
            The DistributionCatalog provides a catalog of known distributions, enabling the caller to enumerate all known
            distributions, or all known distributions that implement a specific interface. It reads from a section in the
            app config file so that it can import all distributions, or just specific distributions, from any assemblies
            the user desires to have included in the catalog.
            <p></p>
            The general config section impact is as follows:<p></p>
            	&lt;configSections&gt; <p></p>   
            		&lt;section name="Distributions" type="Highpoint.Sage.Mathematics.DistributionSectionHandler, VR_Sim" /&gt;<p></p>
            	&lt;/configSections&gt;<p></p>
            	&lt;Distributions&gt;<p></p>
            		&lt;Library libName="VR_Sim"&gt;<p></p>
            			&lt;InterfaceType typeName="Highpoint.Sage.Mathematics.IDoubleDistribution" autoImportAllImplementers="true"/&gt;<p></p>
            			&lt;InterfaceType typeName="Highpoint.Sage.Mathematics.ITimeSpanDistribution" autoImportAllImplementers="true"/&gt;<p></p>
            		&lt;/Library&gt;<p></p>
            	&lt;/Distributions&gt;<p></p>
            	If there is no config section in the config file, it initializes with all of the Sage® distributions and interfaces.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.DistributionCatalog.Instance">
            <summary>
            Retrieves the singleton instance of this catalog.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.DistributionCatalog.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the whole collection of Distributions.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.DistributionCatalog.KnownInterfaces">
            <summary>
            Gets a collection of all of the known interfaces.
            </summary>
            <value>The known interfaces.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.DistributionCatalog.GetDistributionsForInterface(System.Type)">
            <summary>
            Gets the distributions that implement a given interface such as ITimeSpanDistribution.
            </summary>
            <param name="iEnumeratorType">Type of the enumerator.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.SupportsDistributionsAttribute">
            <summary>
            An attribute that decorates any class that can have a distribution as a member.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SupportsDistributionsAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:SupportsDistributionsAttribute"/> class.
            </summary>
            <param name="distributionInterface">The distribution interface that is implemented by the member in the decorated class.</param>
            <param name="memberNameOfDistribution">The member name  in the decorated class, of the distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SupportsDistributionsAttribute.GetCandidateTypes">
            <summary>
            Gets a list of Distribution types that are candidates for the declared member of the class that is decorated by this attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SupportsDistributionsAttribute.SetDistribution(System.Object,System.Object)">
            <summary>
            Sets the value of the declared member of the target object (which is an instance of the decorated class) to a provided distribution.
            </summary>
            <param name="target">The target object.</param>
            <param name="distro">The distribution.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Extensions.GetValueAtPercentile``1(System.Collections.Generic.List{``0},System.Double,System.Func{``0,System.Double},System.Boolean)">
            <summary>
            Given a list of source items, and a function that returns a double value for each, this
            method ascertains the double value that represents the given percentile in that population.
            For example, given a list of students, and a function that returns their grades, this method
            will return the grade that represents the 50th percentile across that population of students.
            </summary>
            <typeparam name="T">The type of items in the list of source items.</typeparam>
            <param name="srcItems">The source items for which we want to know the percentile.</param>
            <param name="percentile">The percentile on the interval [0.0, 100.0] at which we seek the value from the source items.</param>
            <param name="valueGetter">The function that ascertains the value of each source item.</param>
            <param name="interpolate">if set to <c>true</c>, we interpolate between located items' values.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Extensions.GetPercentileForItem``1(System.Collections.Generic.List{``0},``0,System.Func{``0,System.Double})">
            <summary>
            Given a list of source items, a target item of the same type as source items, and a 
            lambda expression that returns a double value (a score) from those items, this function
            will return a double that is the percentile into which that target value falls for the
            population represented by the list of source items.
            <para>Note1: Percentile is the percent of observed values in the srcItems that fall at
            <b>or below</b> the value of the targetItem.</para>
            <para>Note2: If this operation will be performed repeatedly on the same list, use the other form instead.</para>
            </summary>
            <typeparam name="T">The type of items in the list of source items.</typeparam>
            <param name="srcItems">The source items defining the percentile population.</param>
            <param name="targetItem">The item for whose score we want to know its percentile in the srcItems population.</param>
            <param name="valueGetter">The function that ascertains the value of each source item.</param>
            <returns>The percentile at which the target item falls.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Extensions.GetPercentileForItem``1(System.Collections.Generic.List{``0},``0,System.Func{``0,System.Double},System.Object@)">
            <summary>
            Gets the percentile for item. Note: with [0,1,2,3,3,3], 3 will be in the 50th percentile.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="srcItems">The _SRC items.</param>
            <param name="targetItem">The target item.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="pd">The object that will hold state for repeated calls to this method on the same list.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Histogram1D_Base">
            <summary>
            A Base class for a 1-dimensional histogram. Since this derives from a base-level interface
            that is intended for all histograms, indices are specified as an array of integers. So for
            a 1-D histogram, bin #3 would be referred to as having index int[]{3}. For a 2-D histogram,
            bin 4,2 would be referred to as having index int[]{4,2}. In addition, bins are separated into
            three categories, None, OffScaleLow, InRange, OffScaleHigh, and All. These are flags that can
            be and'ed together. Most queries can be applied to a range of bins, or to a full category or
            set of categories.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.m_rawData">
            <summary>
            The raw data array that provides the underlying histogram data.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.m_bins">
            <summary>
            The bins that contain the count of points in each bin.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.LowBin">
            <summary>
            The count of data points whose values were less than the low bound.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.HighBin">
            <summary>
            The count of data points whose values were greater than the high bound.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.NumBins">
            <summary>
            The number of bins in this Histogram.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.m_lowBound">
            <summary>
            The value of the low boundary. All data points that are less than this value are tallied into the m_lowBin bin.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.Histogram1D_Base.m_highBound">
            <summary>
            The value of the high boundary. All data points that are greater than this value are tallied into the m_highBin bin.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.#ctor(System.Array,System.Object,System.Object,System.Int32,System.String,System.Guid)">
            <summary>
            Creates a 1D histogram.
            </summary>
            <param name="rawData">An array of 1D data that contains the data to be binned.</param>
            <param name="lowBound">The data that represents the low bound of the histogram.</param>
            <param name="highBound">The data that represents the high bound of the histogram.</param>
            <param name="nBins">The number of bins that the data will pe placed in, between lo-bound and hi-bound.</param>
            <param name="name">The name of the histogram.</param>
            <param name="guid">The guid of the histogram.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.CountEntries(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Counts the number of entries in a given range (low bin, in-band bins or high bin.)
            </summary>
            <param name="hbc">An enumerator that describes whether the count is for low, in-band, or high bins.</param>
            <returns>The number of entries that fall in the specified range.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.CountEntries(System.Int32[],System.Int32[])">
            <summary>
            Counts the number of entries in a given range of bins.
            </summary>
            <param name="lowBounds">The index of the lowest bin to count.</param>
            <param name="highbounds">The index of the highest bin to count.</param>
            <returns>The number of entries that fall in the specified range.</returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.LowBound">
            <summary>
            The data that represents the low bound of the in-band range.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.HighBound">
            <summary>
            The data that represents the high bound of the in-band range.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.BiggestBin(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the index of the bin that contains the most entries, selected from
            a specified set of bins.
            </summary>
            <param name="hbc">The <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/> that specifies the bins of interest.</param>
            <returns>The index of the bin that contains the most entries.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.BiggestBin(System.Int32[],System.Int32[])">
            <summary>
            Returns the index of the bin that contains the most entries, selected from
            the bins between the requested low and high index bins.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The highbounds.</param>
            <returns>
            The indexes of the bin that contains the most entries.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.SmallestBin(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the index of the bin that contains the most entries, selected from
            a specified set of bins.
            </summary>
            <param name="hbc">The <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/> that specifies the bins of interest.</param>
            <returns>The indexes of the bin that contains the fewest entries.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.SmallestBin(System.Int32[],System.Int32[])">
            <summary>
            Returns the index of the bin that contains the fewest entries, selected from
            the bins between the requested low and high index bins.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The highbounds.</param>
            <returns>
            The indexes of the bin that contains the fewest entries.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.LabelProvider">
            <summary>
            Gets and sets the object that provides the name of a specified bin.
            </summary>
            <value>The label provider.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.GetLabel(System.Int32[])">
            <summary>
            Gets the label for the bin at the specified coordiantes.
            </summary>
            <param name="coords">The coordinates of the desired bin.</param>
            <returns>The label for the bin at the specified coordiantes.</returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.RawData">
            <summary>
            Gets or sets the raw data that comprises this Histogram.
            </summary>
            <value>The raw data.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.Bins">
            <summary>
            Gets the bins that are a part of this Histogram.
            </summary>
            <value>The bins.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.Dimension">
            <summary>
            Gets the number of dimensions in this Histogram (a linear histogram is 1-dimensional).
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.Clear">
            <summary>
            Clears this Histogram.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.SumEntries(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the sum of values in all of the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.SumEntries(System.Int32[],System.Int32[])">
            <summary>
            Returns the sum of values in all of the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The high bounds.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.Error(System.Int32[])">
            <summary>
            This returns a value that indicates how far a specified bin's count
            deviates from the 'expected' count - note that it is only relevant if
            the histogram was expected to have been uniform.
            </summary>
            <param name="coordinates">An integer array that specifies the coordinates of
            the bin of interest. Histogram analysis of a Histogram1D_&lt;anything&gt; must be
            on a 1 dimensional array, therefore, this array must be of rank 1.</param>
            <returns>
            a value that indicates how far a specified bin's count
            deviates from the 'expected' count.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.Recalculate">
            <summary>
            Recalculates this Histogram, resulting in new bins and counts.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.Recalculate(System.Array,System.Array,System.Int32)">
            <summary>
            Recalculates the Histogram with new high &amp; low bounds, resulting in new bins and counts.
            </summary>
            <param name="lowBounds">The low bounds of the Histogram.</param>
            <param name="highBounds">The high bounds of the Histogram.</param>
            <param name="nBins">The number of bins.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Base.DefaultLabelProvider(System.Int32[])">
            <summary>
            Provides the default label provider for the specified coordinates.
            </summary>
            <param name="coords">The specified coordinates.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.Name">
            <summary>
            The name for this object. Not typically required to be unique.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.Description">
            <summary>
            A description of this Histogram1D_Base.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Histogram1D_Base.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value>The object's Guid</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Histogram1D_DateTime">
            <summary>
            Histogram1D_DateTime is not yet implemented. Histogram1D_DateTime creates a one dimensional histogram from an array of DateTime data.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.#ctor(System.DateTime[],System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Histogram1D_DateTime"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="lowBound">The low bound.</param>
            <param name="highBound">The high bound.</param>
            <param name="nBins">The number of bins.</param>
            <param name="name">The name of the Histogram.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.#ctor(System.DateTime[],System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Histogram1D_DateTime"/> class.
            </summary>
            <param name="rawData">The raw data.</param>
            <param name="lowBound">The low bound.</param>
            <param name="highBound">The high bound.</param>
            <param name="nBins">The number of bins.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.#ctor(System.Double,System.Double,System.Int32,System.String,System.Guid)">
            <summary>
            Creates a new instance of the <see cref="T:Histogram1D_DateTime"/> class.
            </summary>
            <param name="lowBound">The low bound.</param>
            <param name="highBound">The high bound.</param>
            <param name="nBins">The number of bins.</param>
            <param name="name">The name of the Histogram.</param>
            <param name="guid">The GUID of the Histogram.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.#ctor(System.Double,System.Double,System.Int32,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Histogram1D_DateTime"/> class.
            </summary>
            <param name="lowBound">The low bound.</param>
            <param name="highBound">The high bound.</param>
            <param name="nBins">The number of bins.</param>
            <param name="name">The name of the Histogram.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Histogram1D_DateTime"/> class.
            </summary>
            <param name="lowBound">The low bound.</param>
            <param name="highBound">The high bound.</param>
            <param name="nBins">The number of bins.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.SumEntries(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the sum of values in all of the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.SumEntries(System.Int32[],System.Int32[])">
            <summary>
            Returns the sum of values in all of the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The high bounds.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.Error(System.Int32[])">
            <summary>
            This returns a value that indicates how far a specified bin's count
            deviates from the 'expected' count - note that it is only relevant if
            the histogram was expected to have been uniform.
            </summary>
            <param name="coordinates">An integer array that specifies the coordinates of
            the bin of interest. Histogram analysis of a Histogram1D_&lt;anything&gt; must be
            on a 1 dimensional array, therefore, this array must be of rank 1.</param>
            <returns>
            a value that indicates how far a specified bin's count
            deviates from the 'expected' count.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.Recalculate">
            <summary>
            Recalculates this Histogram, resulting in new bins and counts.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.Recalculate(System.Array,System.Array,System.Int32)">
            <summary>
            Recalculates the Histogram with new high &amp; low bounds, resulting in new bins and counts.
            </summary>
            <param name="lowBounds">The low bounds of the Histogram.</param>
            <param name="highBounds">The high bounds of the Histogram.</param>
            <param name="nBins">The number of bins.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_DateTime.DefaultLabelProvider(System.Int32[])">
            <summary>
            Provides the default label provider for the specified coordinates.
            </summary>
            <param name="coords">The specified coordinates.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Histogram1D_Double">
            <summary>
            Summary description for Histogram1D.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Histogram1D_Double.Error(System.Int32[])">
            <summary>
            This returns a double that indicates how far a specified bin's count
            deviates from the 'expected' count - note that it is only relevant if
            the histogram was expected to have been uniform.
            </summary>
            <param name="coordinates">An integer array that specifies the coordinates of
            the bin of interest. Histogram analysis of a Histogram1D_&lt;anything&gt; must be
            on a 1 dimensional array, therefore, this array must be of rank 1.
            </param>
            <returns> a double that indicates how far a specified bin's count
            deviates from the 'expected' count.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Histogram1D_TimeSpan">
            <summary>
            Summary description for Histogram1D.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.HistogramDataFilter">
            <summary>
            Returns true if the data in a certain Histogram bin meet a certain criteria.
            </summary>
            <param name="data">The histogram data.</param>
            <param name="coordinates">The coordinates of the bin in the data.</param>
            <returns>True if the data in a certain Histogram bin meet a certain criteria.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.LabelProvider">
            <summary>
            Returns a string that characterizes a bin in a Histogram located at the given dimensional coordinates.
            </summary>
            <param name="coordinates">The coordinates of the bin whose label is desired.</param>
            <returns>A string that characterizes a bin in a Histogram located at the given dimensional coordinates.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.HistogramBinCategory">
            <summary>
            A flag enumerator that specifies which bins in a histogram the caller is referring to.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.HistogramBinCategory.None">
            <summary>
            No bins are to be, or were, included in the operation.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.HistogramBinCategory.OffScaleLow">
            <summary>
            Only the off-scale-low bin is to be, or was, included in the operation.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.HistogramBinCategory.InRange">
            <summary>
            All in-range bins are to be, or were, included in the operation.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.HistogramBinCategory.OffScaleHigh">
            <summary>
            Only the off-scale-high bin is to be, or was, included in the operation.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Mathematics.HistogramBinCategory.All">
            <summary>
            All bins are to be, or were, included in the operation.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.IHistogram">
            <summary>
            Implemented by an object that processes raw data items into bins and presents some
            basic statistics on those bins.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.RawData">
            <summary>
            Gets or sets the raw data that comprises this Histogram.
            </summary>
            <value>The raw data.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.Bins">
            <summary>
            Gets the bins that are a part of this Histogram.
            </summary>
            <value>The bins.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.Dimension">
            <summary>
            Gets the number of dimensions in this Histogram (a linear histogram is 1-dimensional.
            </summary>
            <value>The dimension.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.Clear">
            <summary>
            Clears this Histogram.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.Recalculate">
            <summary>
            Recalculates this Histogram, resulting in new bins and counts.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.Recalculate(System.Array,System.Array,System.Int32)">
            <summary>
            Recalculates the Histogram with new high &amp; low bounds, resulting in new bins and counts.
            </summary>
            <param name="lowBounds">The low bounds of the Histogram.</param>
            <param name="highBounds">The high bounds of the Histogram.</param>
            <param name="nBins">The number of bins.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.CountEntries(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Counts the entries in the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>The number of entries in the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.CountEntries(System.Int32[],System.Int32[])">
            <summary>
            Counts the entries in the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The highbounds.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.BiggestBin(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the index of the biggest bin in each dimension, among the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>. 
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>he index of the biggest bin in each dimension, among the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.BiggestBin(System.Int32[],System.Int32[])">
            <summary>
            Returns the index of the biggest bin in each dimension, among the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The highbounds.</param>
            <returns>Tthe index of the biggest bin in each dimension, among the bins identified by the given low and high bounds.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.SmallestBin(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the index of the smallest bin in each dimension, among the bins identified  the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>. 
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>The index of the smallest bin in each dimension, among the bins identified  the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.SmallestBin(System.Int32[],System.Int32[])">
            <summary>
            Returns the index of the smallest bin in each dimension, among the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The highbounds.</param>
            <returns>Tthe index of the smallest bin in each dimension, among the bins identified by the given low and high bounds.</returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.LowBound">
            <summary>
            Gets the low bound of the Histogram.
            </summary>
            <value>The low bound.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.HighBound">
            <summary>
            Gets the high bound of the Histogram..
            </summary>
            <value>The high bound.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IHistogram.LabelProvider">
            <summary>
            Gets or sets the label provider.
            </summary>
            <value>The label provider.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.GetLabel(System.Int32[])">
            <summary>
            Gets the label for the bin at the specified coordiantes.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>
            The label for the bin at the specified coordiantes.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.Error(System.Int32[])">
            <summary>
            This returns a value that indicates how far a specified bin's count
            deviates from the 'expected' count - note that it is only relevant if
            the histogram was expected to have been uniform.
            </summary>
            <param name="coordinates">An integer array that specifies the coordinates of
            the bin of interest. Histogram analysis of a Histogram1D_&lt;anything&gt; must be
            on a 1 dimensional array, therefore, this array must be of rank 1.
            </param>
            <returns> a value that indicates how far a specified bin's count
            deviates from the 'expected' count.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.SumEntries(Highpoint.Sage.Mathematics.HistogramBinCategory)">
            <summary>
            Returns the sum of values in all of the bins identified by the given <see cref="T:Highpoint.Sage.Mathematics.HistogramBinCategory"/>.
            </summary>
            <param name="hbc">The HistogramBinCategory.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IHistogram.SumEntries(System.Int32[],System.Int32[])">
            <summary>
            Returns the sum of values in all of the bins identified by the given low and high bounds.
            </summary>
            <param name="lowBounds">The low bounds.</param>
            <param name="highbounds">The high bounds.</param>
            <returns>The sum of values.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.IInterpolable">
            <summary>
            Implemented by an object that provides an interpolatable Y value for some set of X values, where the specific requested x may not be known to the object.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IInterpolable.GetYValue(System.Double)">
            <summary>
            Gets the Y value that corresponds to the specified x value.
            </summary>
            <param name="xValue">The x value.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.IWriteableInterpolable">
            <summary>
            Implemented by an object that provides an interpolatable Y value for some set of X values, where the specific requested x may not be known to the object - in addition, at run time, additional known (x,y) values can be provided.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IWriteableInterpolable.SetYValue(System.Double,System.Double)">
            <summary>
            Sets the y value for the specified known x value.
            </summary>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.IDoubleInterpolator">
            <summary>
            Implemented by an object that performs interpolations on two arrays of doubles (an x and a y array).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IDoubleInterpolator.SetData(System.Double[],System.Double[])">
            <summary>
            Sets the data used by this interpolator.
            </summary>
            <param name="xvals">The xvals.</param>
            <param name="yvals">The yvals.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.IDoubleInterpolator.HasData">
            <summary>
            Gets a value indicating whether this instance has data.
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.IDoubleInterpolator.GetYValue(System.Double)">
            <summary>
            Gets the Y value for the specified x value.
            </summary>
            <param name="xValue">The X value.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.LinearDoubleInterpolator">
            <summary>
            Implemented by an object that performs linear interpolations on two arrays of doubles (an x and a y array).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LinearDoubleInterpolator.SetData(System.Double[],System.Double[])">
            <summary>
            Sets the data used by this interpolator.
            </summary>
            <param name="xvals">The xvals.</param>
            <param name="yvals">The yvals.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.LinearDoubleInterpolator.HasData">
            <summary>
            Gets a value indicating whether this instance has data.
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LinearDoubleInterpolator.GetYValue(System.Double)">
            <summary>
            Gets the Y value for the specified x value.
            </summary>
            <param name="xValue">The X value.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.CosineDoubleInterpolator">
            <summary>
            Implemented by an object that performs cosine interpolations on two arrays of doubles (an x and a y array).
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CosineDoubleInterpolator.SetData(System.Double[],System.Double[])">
            <summary>
            Sets the data used by this interpolator.
            </summary>
            <param name="xvals">The xvals.</param>
            <param name="yvals">The yvals.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.CosineDoubleInterpolator.HasData">
            <summary>
            Gets a value indicating whether this instance has data.
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.CosineDoubleInterpolator.GetYValue(System.Double)">
            <summary>
            Gets the Y value for the specified x value.
            </summary>
            <param name="xValue">The X value.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.SmallDoubleInterpolable">
            <summary>
            This class provides an interpolable data set that uses a linear interpolation
            with slope discontinuities at each data point, if the preceding and following
            line segments are differently-sloped.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.#ctor">
            <summary>
            Constructor for an uninitialized SmallDoubleInterpolable, for persistence operations.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:SmallDoubleInterpolable"/> class which will contain a specified number of data points.
            </summary>
            <param name="nPoints">The number of data points.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.#ctor(System.Int32,Highpoint.Sage.Mathematics.IDoubleInterpolator)">
            <summary>
            Creates a new instance of the <see cref="T:SmallDoubleInterpolable"/> class with a specified number of points and a provided interpolator.
            </summary>
            <param name="nPoints">The n points.</param>
            <param name="idi">The doubleInterpolator that this <see cref="T:SmallDoubleInterpolable"/> will use.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates and initializes a SmallDoubleInterpolable from two arrays of correlated
            X and Y values.
            </summary>
            <param name="xVals"></param>
            <param name="yVals"></param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.#ctor(System.Double[],System.Double[],Highpoint.Sage.Mathematics.IDoubleInterpolator)">
            <summary>
            Creates and initializes a SmallDoubleInterpolablefrom two arrays of correlated
            X and Y values.
            </summary>
            <param name="xVals">The correlated x values.</param>
            <param name="yVals">The correlated y values.</param>
            <param name="idi">The IDoubleInterpolator to be used to discern Y values between known x values.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.GetYValue(System.Double)">
            <summary>
            Gets the Y value that corresponds to the specified x value.
            </summary>
            <param name="xValue">The x value.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.SetYValue(System.Double,System.Double)">
            <summary>
            Sets the y value for the specified known x value.
            </summary>
            <param name="xValue">The x value.</param>
            <param name="yValue">The y value.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Serializes this object to the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext into which this object is to be stored.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.SmallDoubleInterpolable.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Deserializes this object from the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext from which this object is to be reconstituted.</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.LinearRegression">
            <summary>
            Not originally written by Highpoint Software Systems, LLC. Written by Walt Fair, obtained
            from the CodeProject site below on 5/17/2009, and used per the Code Project Open License 
            at the site below. Several .NET / C# semantic improvements added.
            http://www.codeproject.com/KB/recipes/LinReg.aspx ( Walt's excellent article. )
            http://www.codeproject.com/info/cpol10.aspx       ( CodeProject Open License 1.02 )
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LinearRegression.Regress(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Performs a linear regression on the data in Y (independent), X (dependent) and W (weights).
            </summary>
            <param name="y">The dependent values in the data series.</param>
            <param name="x">The independent values in the data series.</param>
            <param name="w">The weights assigned to the corresponding X,Y pairs.</param>
            <param name="order">The order of solution desired (1=average, 2=line, 3=parabola, etc.)</param>
            <returns>True if the regression was successful.</returns>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.LinearRegression.Regress(System.Double[],System.Double[],System.Int32)">
            <summary>
            Performs a linear regression on the data in Y (independent), X (dependent.) All data points are given equal weighting.
            </summary>
            <param name="y">The dependent values in the data series.</param>
            <param name="x">The independent values in the data series.</param>
            <param name="order">The order of solution desired (1=average, 2=line, 3=parabola, etc.)</param>
            <returns>True if the regression was successful.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Rationalizer">
            <summary>
            This class returns the &quot;correct&quot; representation of a number from a set of fractions,
            identified by the first N digits in the mantissa. So, if this class is instantiated with fractions
            up to ninths (halves to ninths), and five digits, 5.333382 will return 5.333382, but 5.3333382 will
            return 5.333333333333333. 5.999996 will return 6.0, and 7.000001 will return 7.0. This is useful for
            performing corrections when values are arrived at through computation where it is possible that the
            value could be a low-order rational number such as 5 1/3, or 6, but the computation results in
            5.3333391 or 6.000000215, or 5.99999938.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Rationalizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Mathematics.Rationalizer"/> class to a set of fractions and a
            mantissa sensitivity.
            </summary>
            <param name="denominatorRange">The range of fractions that will be examined for.</param>
            <param name="numPlaces">The number of places that will be examined in the mantissa.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Rationalizer.Rationalize(System.Double)">
            <summary>
            Returns the rationalized value corresponding to the number that was supplied.
            </summary>
            <param name="valArg">The number to be examined.</param>
            <returns>The rationalized value</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.IScalable">
            <summary>
            This interface is implemented by any object that can be scaled.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.IScalable.Rescale(System.Double)">
            <summary>
            Called to command a rescaling operation where the scalable object is
            rescaled directly to a given scale. +1.0 sets the scale to it's original
            value. +2.0 sets the scale to twice its original value, +0.5 sets the
            scale to half of its original value.
            </summary>
            <param name="newScale">The new scale for the IScalable.</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.IScalingEngine">
            <summary>
            An object that is able to apply scaling to another object. It can
            also subsequently remove that scaling from the same object. 
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.IScalingEngine.AggregateScale">
            <summary>
            The combined, aggregate scale of all of the subjects of this scaling engine
            compared to their original scale.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.IScalingEngine.Rescale(System.Double)">
            <summary>
            Rescales the implementer by the provided factor.
            </summary>
            <param name="byFactor">The factor.</param>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.ScalingEngine">
            <summary>
            An engine that is capable of performing groupwise rescaling of a set of <see cref="T:Highpoint.Sage.Mathematics.Scaling.IScalable"/>s.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.ScalingEngine.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:ScalingEngine" /> class.
            </summary>
            <param name="scalables">The scalables.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.ScalingEngine.Rescale(System.Double)">
            <summary>
            The scale to be applied to the target object. Cannot scale by a factor of zero.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.ScalingEngine.AggregateScale">
            <summary>
            The combined, aggregate scale of all of the subjects of this scaling engine
            compared to their original scale.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.IDoubleScalingAdapter">
            <summary>
            Implemented by an object that has a double value that can be scaled.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.IDoubleScalingAdapter.CurrentValue">
            <summary>
            Gets the current value of the data that is scaled by this adapter.
            </summary>
            <value>The current value of the data that is scaled by this adapter.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.IDoubleScalingAdapter.FullScaleValue">
            <summary>
            Gets the value of the data that is scaled by this adapter when scale is 1.0.
            </summary>
            <value>The full scale value.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.IDoubleScalingAdapter.Clone">
            <summary>
            Clones this IDoubleScalingAdapter.
            </summary>
            <returns>The closed instance.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.ITimeSpanScalingAdapter">
            <summary>
            Implemented by an object that has a TimeSpan value that can be scaled.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.ITimeSpanScalingAdapter.CurrentValue">
            <summary>
            Gets the current value of the data that is scaled by this adapter.
            </summary>
            <value>The current value of the data that is scaled by this adapter.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.ITimeSpanScalingAdapter.FullScaleValue">
            <summary>
            Gets the value of the data that is scaled by this adapter when scale is 1.0.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.ITimeSpanScalingAdapter.Clone">
            <summary>
            Clones this ITimeSpanScalingAdapter.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter">
            <summary>
            A class that manages linear scaling of a double. If linearity is 2.0, for example, 
            a rescaling of 2.0 quadruples the underlying value, and a rescaling of 0.5 quarters
            the underlying value.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:DoubleLinearScalingAdapter"/> class.
            </summary>
            <param name="originalValue">The original value of the underlying data.</param>
            <param name="linearity">The linearity.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.Rescale(System.Double)">
            <summary>
            Rescales the underlying data by the specified aggregate scale, taking this DoubleLinearScalingAdapter's linearity into account.
            </summary>
            <param name="aggregateScale">The aggregate scale.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.CurrentValue">
            <summary>
            Gets the current value of the data that is scaled by this adapter.
            </summary>
            <value>The current value of the data that is scaled by this adapter.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.FullScaleValue">
            <summary>
            Gets the value of the data that is scaled by this adapter when scale is 1.0.
            </summary>
            <value>The full scale value.</value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.Clone">
            <summary>
            Clones this IDoubleScalingAdapter.
            </summary>
            <returns>The closed instance.</returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.OriginalValue">
            <summary>
            Gets the original value of the underlying data.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.DoubleLinearScalingAdapter.Linearity">
            <summary>
            Gets the linearity of this DoubleLinearScalingAdapter.
            </summary>
            <value>The linearity.</value>
        </member>
        <member name="T:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter">
            <summary>
            A class that manages linear scaling of a TimeSpan. If linearity is 2.0, for example, 
            a rescaling of 2.0 quadruples the underlying value, and a rescaling of 0.5 quarters
            the underlying value. Slope of the scaling line.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.#ctor(System.TimeSpan,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:TimeSpanLinearScalingAdapter"/> class.
            </summary>
            <param name="originalValue">The original value of this TimeSpanLinearScalingAdapter's underlying data.</param>
            <param name="linearity">The linearity.</param>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.Rescale(System.Double)">
            <summary>
            Rescales the underlying data by the specified aggregate scale, taking this TimeSpanLinearScalingAdapter's linearity into account.
            </summary>
            <param name="aggregateScale">The aggregate scale.</param>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.CurrentValue">
            <summary>
            Gets the current value of the data that is scaled by this adapter.
            </summary>
            <value>The current value of the data that is scaled by this adapter.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.FullScaleValue">
            <summary>
            Gets the value of the data that is scaled by this adapter when scale is 1.0.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.Clone">
            <summary>
            Clones this TimeSpanLinearScalingAdapter.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.OriginalValue">
            <summary>
            Gets the original value of the data that is scaled by this adapter.
            </summary>
            <value>The original value of the data that is scaled by this adapter.</value>
        </member>
        <member name="P:Highpoint.Sage.Mathematics.Scaling.TimeSpanLinearScalingAdapter.Linearity">
            <summary>
            Gets the linearity of this TimeSpanLinearScalingAdapter.
            </summary>
            <value>The linearity.</value>
        </member>
        <member name="T:Highpoint.Sage.Persistence.IXElementSerializable">
            <summary>
            This interface is implemented by objects that will be serialized and deserialized via LINQ to XML.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.IXElementSerializable.LoadFromXElement(System.Xml.Linq.XElement,Highpoint.Sage.Persistence.DeserializationContext)">
            <summary>
            Loads and reconstitutes an object's internal state from the element 'self', according to the deserialization context.
            </summary>
            <param name="self">The self.</param>
            <param name="deserializationContext">The deserialization context.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.IXElementSerializable.AsXElement(System.String)">
            <summary>
            Represents an object's internal state as an XElement with the provided Name..
            </summary>
            <param name="name">The name.</param>
            <returns>XElement.</returns>
        </member>
        <member name="T:Highpoint.Sage.Persistence.DeserializationContext">
            <summary>
            Class DeserializationContext tracks objects that have been deserialized from an Xml document, and performs
            GUID translation so that there are no Guid uniqueness constraints violated. This is useful if objects are 
            being deserialized into a model multiple times (such as in a copy/paste operation.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.DeserializationContext.#ctor(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Persistence.DeserializationContext"/> class for managing deserialization from/into the specified model.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Highpoint.Sage.Persistence.DeserializationContext.Model">
            <summary>
            Gets the model in which the serialization and deserialization is being done.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Persistence.DeserializationContext.SetNewGuidForOldGuid(System.Guid,System.Guid)">
            <summary>
            Sets a new unique identifier to be used for a copy of the object that exists under the old unique identifier.
            </summary>
            <param name="oldGuid">The old unique identifier.</param>
            <param name="newGuid">The new unique identifier.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.DeserializationContext.GetNewGuidForOldGuid(System.Guid)">
            <summary>
            Gets the unique identifier to be used for a copy of the object that exists under the old unique identifier.
            </summary>
            <param name="oldGuid">The old unique identifier.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Highpoint.Sage.Persistence.DeserializationContext.GetModelObjectThatHad(System.Guid)">
            <summary>
            Gets the model object that had the old unique identifier.
            </summary>
            <param name="oldGuid">The old unique identifier.</param>
            <returns>IModelObject.</returns>
        </member>
        <member name="T:Highpoint.Sage.Persistence.ISerializer">
            <summary>
            An object that implements ISerializer knows how to store one or more types of objects
            into an archive, and subsequently, to take tham out of the archive. The object that
            implements this interface might be thought of as an archive.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.ISerializer.StoreObject(System.Object,System.Object)">
            <summary>
            Stores the object 'obj' under the key 'key'.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.ISerializer.LoadObject(System.Object)">
            <summary>
            Loads the object stored under the key, 'key'.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Persistence.ISerializer.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Persistence.ISerializer.ContextEntities">
            <summary>
            Gets the context entities.
            </summary>
            <value>The context entities.</value>
        </member>
        <member name="T:Highpoint.Sage.Persistence.IXmlPersistable">
            <summary>
            This interface is implemented by any object that can be serialized to a custom XML
            stream. (It does not mean that, necessarily, the XmlSerializationContext has been
            provisioned with serializers suffient to perform that serialization, but just that
            the object implementing it, knows how to break down and stream, and subsequently to
            reclaim from the stream, its constituent parts.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.IXmlPersistable.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.IXmlPersistable.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Persistence.XmlSerializationContext">
            <summary>
            An ISerializer that knows how to store a wide range of objects into, and retrieve them
            from, an XML document.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Persistence.XmlSerializationContext"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.ContainsSerializer(System.Type)">
            <summary>
            Determines whether the XmlSerializationContext contains a serializer for the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if the XmlSerializationContext contains a serializer for the specified target type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.AddSerializer(System.Type,Highpoint.Sage.Persistence.ISerializer)">
            <summary>
            Adds a serializer to the XmlSerializationContext for the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.RemoveSerializer(System.Type)">
            <summary>
            Removes the serializer from the XmlSerializationContext for the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.PushNode(System.Xml.XmlNode)">
            <summary>
            Pushes the XmlNode into the serializer.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.PopNode">
            <summary>
            Pops an XmlNode off the serializer.
            </summary>
            <returns>XmlNode.</returns>
        </member>
        <member name="P:Highpoint.Sage.Persistence.XmlSerializationContext.CurrentNode">
            <summary>
            Gets the current node.
            </summary>
            <value>The current node.</value>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.StoreObject(System.Object,System.Object)">
            <summary>
            Persists the object 'obj' to an XmlNode, and appends that node under
            the XmlSerializationContext's CurrentNode node.
            </summary>
            <param name="key">In it's ToString() form, this will be the name of the new node.</param>
            <param name="obj">This is the object that will be serialized to the new node.</param>
            <returns>The XmlNode that was created.</returns>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.LoadObject(System.Object)">
            <summary>
            Loads (reconstitutes) an object from an archive object, and returns
            the object. If the object has already been reconstituted (i.e. the
            reference being deserialized is the second or later reference to an
            object, the original object is located and a reference to it is returned.
            </summary>
            <param name="key">The key whose node under 'archive' is to be deserialized.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.Reset">
            <summary>
            Resets this context. Clears the document, object cache, node stack and hashtables.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Persistence.XmlSerializationContext.UseCatalog">
            <summary>
            Gets or sets a value indicating whether this context is using a type catalog. Using a type
            catalog makes for better compression of an XML file, at the cost of minimally slower performance.
            </summary>
            <value><c>true</c> if [use catalog]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.Load(System.String)">
            <summary>
            Populates a new XmlSerializationContext from a specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.Save(System.String)">
            <summary>
            Saves the XmlSerializationContext from a specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Highpoint.Sage.Persistence.XmlSerializationContext.GetTypeFromNode(System.Xml.XmlNode)">
            <summary>
            Retrieves an object's type from that object's node. Goes through the
            type catalog if we're using one, or reads the node's type information
            directly, if we're not.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Randoms.MersenneTwisterFast">
            <summary>
            This is a port of Takuji Nishimura and Makoto Matsumoto's famous
            Mersenne Twister Pseudorandom number generator. It was ported to C#
            by Peter Bosch for Highpoint Software Systems, LLC's Sage®
            product. See the following, but be aware that the RandomServer
            architecture is independent of the PRNG being used, and is the property
            of, and copyrighted by, Highpoint Software Systems, LLC.
            <p></p>
            	Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
            	All rights reserved.                          
            <p></p>
            	Redistribution and use in source and binary forms, with or without
            	modification, are permitted provided that the following conditions
            	are met:
            <p></p>
            	1. Redistributions of source code must retain the above copyright
            	notice, this list of conditions and the following disclaimer.
            <p></p>
            	2. Redistributions in binary form must reproduce the above copyright
            	notice, this list of conditions and the following disclaimer in the
            	documentation and/or other materials provided with the distribution.
            <p></p>
            	3. The names of its contributors may not be used to endorse or promote 
            	products derived from this software without specific prior written 
            	permission.
            <p></p>
            	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
            	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
            	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
            	A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
            	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
            	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
            	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
            	PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
            	LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
            	NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
            	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            <p></p>
            <p></p>
            	Any feedback is very welcome.<p></p>
            	http://www.math.keio.ac.jp/matumoto/emt.html<p></p>
            	email: matumoto@math.keio.ac.jp<p></p>
                Updated as of 20160915 : 
                http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html<p></p>
                email: m-mat@math.sci.hiroshima-u.ac.jp<p></p>
            
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.Initialize(System.UInt64)">
            <summary>
            Initializes this Mersenne Twister with the specified seed.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.Initialize(System.UInt64[])">
            <summary>
            Initializes the Mersenne Twister with the specified init_key.
            </summary>
            <param name="initKey">The initialization key.</param>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_int32">
            <summary>
            generates a random number on the [0,0xffffffff] interval
            </summary>
            <returns>A random number on the [0,0xffffffff] interval.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_int31">
            <summary>
            Generates a random number on the [0,0x7fffffff] interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_real1">
            <summary>
            Generates a random number on the [0,1] real interval.
            </summary>
            <returns>A random number on the [0,1] real interval.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_real2">
            <summary>
            Generates a random number on the [0,1) real interval.
            </summary>
            <returns>A random number on the [0,1) real interval.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_real3">
            <summary>
            Generates a random number on the (0,1) real interval.
            </summary>
            <returns>A random number on the (0,1) real interval.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.MersenneTwisterFast.genrand_res53">
            <summary>
            Generates a random number on [0,1) with 53-bit resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Randoms.GlobalRandomServer">
            <summary>
            Class GlobalRandomServer is a singleton RandomServer that exists and can be obtained from anywhere in a process space. See 
            RandomServer for details.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Randoms.GlobalRandomServer.SetSeed(System.UInt64)">
            <summary>
            Sets the random seed for the global random server. This is a super-seed 
            which is used to seed any channels not otherwise explicitly seeded that 
            are obtained from the Global Random Server.
            </summary>
            <param name="seed">The seed.</param>
            <exception cref="T:System.ApplicationException">Calls to GlobalRandomServer.SetSeed(long newSeed) must be performed before any call to GlobalRandomServer.Instance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Randoms.GlobalRandomServer.SetBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer for each of the double-buffer sides. 
            Generation is done into one buffer on a worker thread while 
            service is taken from the other.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <exception cref="T:System.ApplicationException">Calls to GlobalRandomServer.SetBufferSize(int bufferSize) must be performed before any call to GlobalRandomServer.Instance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Randoms.GlobalRandomServer.SetGlobalRandomChannelSeed(System.UInt64)">
            <summary>
            Sets the seed for the GlobalRandomChannel. The seed must be set before the first call to use the GlobalRandomChannel.
            </summary>
            <param name="seed">the GlobalRandomChannel seed</param>
            <exception cref="T:System.ApplicationException">Calls to GlobalRandomServer.SetBufferSize(int bufferSize) must be performed before any call to GlobalRandomServer.Instance.</exception>
        </member>
        <member name="M:Highpoint.Sage.Randoms.GlobalRandomServer.SetGlobalRandomChannelBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer for each of the double-buffer 
            sides of the GlobalRandomChannel. Generation is done into 
            one buffer on a worker thread while service is taken from 
            the other.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <exception cref="T:System.ApplicationException">Calls to GlobalRandomServer.SetGlobalRandomChannelBufferSize(int bufferSize) must be performed before any call to GlobalRandomServer.SetGlobalRandomChannelBufferSize.</exception>
        </member>
        <member name="P:Highpoint.Sage.Randoms.GlobalRandomServer.GlobalRandomChannel">
            <summary>
            Gets the global random channel.
            </summary>
            <value>The global random channel.</value>
        </member>
        <member name="P:Highpoint.Sage.Randoms.GlobalRandomServer.Instance">
            <summary>
            Gets the singleton instance of the global random server.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Highpoint.Sage.Randoms.RandomServer">
            <summary>
            The random server serves channels from which fixed sequences of pseudo-random
            numbers can be drawn. Each channel is serviced by a Mersenne Twister Random
            Number Generator. The server can be created with or without a default buffer
            size, and thereafter, each channel can be created with or without a specified
            buffer size. If a channel's buffer size is not specified, it utilizes a buffer
            of the default size.
            <p></p>
            <b>Buffering Scheme:</b><p></p>
            Each channel, if it has a non-zero buffer size, utilizes a double buffering
            scheme where the PRNG is filling the back buffer in a producer thread while
            the model is using the front buffer in its consumer thread. Due to the Windows
            threading model, this results in better PRNG performance even when the consumer
            thread is processor-bound, at least over the longer-haul (more than a few tens
            of consumptions.) It will really shine when there is more than one processor
             in the system. You can play around with buffer size, and the effect probably
             varies somewhat with RNG consumption rate, but you might start with a number
             somewhere around 100. This will be the subject of study, some day...<p></p>
             <b>Note: </b>If using buffering, the model/consumer must call Dispose() on
             the Random Channel once it is finished with that Random Channel.
            <p></p>If there is a zero buffer size specified, the consumer always goes
            straight to the PRNG to get its next value. This option may be slightly faster
            in cases where the machine is running threads that are higher than user priority,
            and usually starving the system, but in our tests, it ran at about half the speed.
            In this case, there is no explicit need to call Dispose() on the Random Channel.<p></p>
            <b>Coming Enhancements:</b><p></p>
            Two, mainly. First, using a single thread per RandomServer, rather than per RandomChannel.
            And second, making it so that you don't have to call Dispose() any more.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomServer.#ctor(System.UInt64,System.Int32)">
            <summary>
            Creates a RandomServer with a specified hyperSeed and default buffer size.
            </summary>
            <param name="hyperSeed">This is the seed that will initialize the PRNG that
            provides seeds for RandomChannels that do not have a specified seed. This is
            a way of having an entire model's sequence be repeatable without having to
            hard code all of the RC's seed values.</param>
            <param name="defaultBufferSize">The buffer size that will be applied to channels
            that do not have an explicit buffer zsize specified. This provides a good way
            to switch the entire model's buffering scheme on or off at one location.</param>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomServer.#ctor">
            <summary>
            Creates a RandomServer with a zero buffer size (and therefore single-threaded
            RandomChannels), and a hyperSeed that is based on the time of day.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomServer.GetRandomChannel(System.UInt64,System.Int32)">
            <summary>
            Gets a RandomChannel with a specified seed and buffer size.
            </summary>
            <param name="seed">The seed value for the PRNG behind this channel.</param>
            <param name="bufferSize">The buffer size for this channel. Non-zero enables double-buffering.</param>
            <returns>The random channel from which random numbers may be obtained in a repeatable sequence.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomServer.GetRandomChannel(System.UInt64[],System.Int32)">
            <summary>
            Gets a RandomChannel with a specified seed and buffer size.
            </summary>
            <param name="initArray">An array of unsigned longs that will be used to initialize the PRNG behind this channel.</param>
            <param name="bufferSize">The buffer size for this channel. Non-zero enables double-buffering.</param>
            <returns>The random channel from which random numbers may be obtained in a repeatable sequence.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomServer.GetRandomChannel">
            <summary>
            Gets a RandomChannel with a seed and buffer size provided by the RandomServer.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Randoms.IRandomChannel">
            <summary>
            Implemented by an object that can serve random numbers, similarly to the Math.Random() PRNG.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.Next">
            <summary>
            Produces the next pseudo random integer. Ranges from int.MinValue to int.MaxValue.
            </summary>
            <returns>The next pseudo random integer.</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.Next(System.Int32)">
            <summary>
            Produces the next pseudo random integer. Ranges from int.MinValue to the argument maxValue.
            </summary>
            <param name="maxValue">The maximum value served by the PRNG, exclusive.</param>
            <returns>The next pseudo random integer in the range [minValue,maxValue).</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.Next(System.Int32,System.Int32)">
            <summary>
            Produces the next pseudo random integer. Ranges from the argument minValue to the argument maxValue.
            </summary>
            <param name="minValue">The minimum value served by the PRNG, inclusive.</param>
            <param name="maxValue">The maximum value served by the PRNG, exclusive.</param>
            <returns>The next pseudo random integer in the range [minValue,maxValue).</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.NextDouble">
            <summary>
            Returns a random double between 0 (inclusive) and 1 (exclusive).
            </summary>
            <returns>The next random double in the range [0,1).</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random double on the range [min,max), unless min == max,
            in which case it returns min.
            </summary>
            <returns>The next random double in the range [min,max).</returns>
        </member>
        <member name="M:Highpoint.Sage.Randoms.IRandomChannel.NextBytes(System.Byte[])">
            <summary>
            Fills an array with random bytes.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Highpoint.Sage.Randoms.RandomChannel.NextDouble">
            <summary>
            [0,1)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.IAccessRegulator">
            <summary>
            An object that can be used by a ResourceManager to permit or deny individual
            resource aquisition reqests.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IAccessRegulator.CanAcquire(System.Object,System.Object)">
            <summary>
            Returns true if the given subject can be acquired using the presented key.
            </summary>
            <param name="subject">The resource whose acquisition is being queried.</param>
            <param name="usingKey">The key that is to be presented by the prospective acquirer.</param>
            <returns>True if the acquire will be allowed, false if not.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.IAccessManager">
            <summary>
            An object that manages multiple access regulators. They are managed in stacks,
            with one stack for each specific resource under management, and one stack for
            any requests for resources that do not have specific regulators assigned to them.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IAccessManager.PushAccessRegulator(Highpoint.Sage.Resources.IAccessRegulator,Highpoint.Sage.Resources.IResource)">
            <summary>
            Pushes an access regulator onto the stack that is associated with a particular resource, or
            the default stack, if no resource is specified.
            </summary>
            <param name="accReg">Access Regulator to be pushed.</param>
            <param name="subject">The resource to which this regulator is to apply, or null, if it applies to all of them.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.IAccessManager.PopAccessRegulator(Highpoint.Sage.Resources.IResource)">
            <summary>
            Pops the top access regulator from the stack associated with the specified resource, or from the
            default stack if subject is set as null.
            </summary>
            <param name="subject">The resource to be regulated, or null if all are to be regulated.</param>
            <returns>The AccessRegulator being popped, or null, if the stack was empty.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.SimpleAccessManager">
            <summary>
            A SimpleAccessManager is made a part of the resource acquisition protocol that is
            embodied in all resource managers. When a resource manager is aware of an access
            manager, it asks that access manager if any resource request is grantable
            before it even allows the resource request to score the available resources. Therefore,
            an access manager uses Access Regulators to prevent resource requests from being granted
            in certain cases.
            <para></para>
            A SimpleAccessManager manages a single AccessRegulator that it applies across all
            resources that are presented to it, or it manages a stack of AccessRegulators that
            are applied to specified resources.
            <para></para>
            NOTE: If an AccessManager has a default regulator as well as resource-specific ones, the
            resource-specific ones take precedence.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleAccessManager.#ctor">
            <summary>
            Creates an access manager that removes resource-specific stacks of regulators once they
            are empty.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleAccessManager.#ctor(System.Boolean)">
            <summary>
            See the default ctor - this ctor allows the developer to decide if they want to remove any
            stack that is assigned to a specific resource once it is empty. One might set this arg to
            false if there will be many adds &amp; removes of regulators, and it is expected that the stack
            will empty and refill often.
            </summary>
            <param name="autoDeleteEmptyStacks">True if you want the SimpleAccessManager to perform clean up.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleAccessManager.PushAccessRegulator(Highpoint.Sage.Resources.IAccessRegulator,Highpoint.Sage.Resources.IResource)">
            <summary>
            Pushes an access regulator onto the stack that is associated with a particular resource, or
            the default stack, if no resource is specified.
            </summary>
            <param name="accReg">Access Regulator to be pushed.</param>
            <param name="subject">The resource to which this regulator is to apply, or null, if it applies to all of them.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleAccessManager.PopAccessRegulator(Highpoint.Sage.Resources.IResource)">
            <summary>
            Pops the top access regulator from the stack associated with the specified resource, or from the
            default stack if subject is set as null.
            </summary>
            <param name="subject">The resource to be regulated, or null if all are to be regulated.</param>
            <returns>The AccessRegulator being popped, or null, if the stack was empty.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleAccessManager.CanAcquire(System.Object,System.Object)">
            <summary>
            Returns true if the given subject can be acquired using the presented key.
            </summary>
            <param name="subject">The resource whose acquisition is being queried.</param>
            <param name="usingKey">The key that is to be presented by the prospective acquirer.</param>
            <returns>True if the acquire will be allowed, false if not.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.SingleKeyAccessRegulator">
            <summary>
            Grants access to the requestor if the subject is null or matches
            the requested subject, and the stored key matches the provided key
            via the .Equals(...) operator.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SingleKeyAccessRegulator.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:SingleKeyAccessRegulator"/> class.
            </summary>
            <param name="subject">The subject.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SingleKeyAccessRegulator.CanAcquire(System.Object,System.Object)">
            <summary>
            Returns true if the given subject can be acquired using the presented key.
            </summary>
            <param name="subject">The resource whose acquisition is being queried.</param>
            <param name="usingKey">The key that is to be presented by the prospective acquirer.</param>
            <returns>
            True if the acquire will be allowed, false if not.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.MultiKeyAccessRegulator">
            <summary>
            An access regulator that maintains a list of keys, the presentation
            of an object with a .Equals(...) match to any one of which will result
            in an allowed acquisition.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiKeyAccessRegulator.#ctor(System.Object,System.Collections.ArrayList)">
            <summary>
            Creates a new instance of the <see cref="T:MultiKeyAccessRegulator"/> class.
            </summary>
            <param name="subject">The subject that the caller wiches to acquire.</param>
            <param name="keys">The keys that the caller is presenting, in hopes of an acquisition.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiKeyAccessRegulator.CanAcquire(System.Object,System.Object)">
            <summary>
            Returns true if the given subject can be acquired using the presented key.
            </summary>
            <param name="subject">The resource whose acquisition is being queried.</param>
            <param name="usingKey">The key that is to be presented by the prospective acquirer.</param>
            <returns>
            True if the acquire will be allowed, false if not.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEvent">
            <summary>
            A delegate implemented by an event that is fired by a resource.
            </summary>
            <param name="resource">The resource, typically, to whom the event is taking place.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceStatusEvent">
            <summary>
            A delegate implemented by an event that is fired by a resource, but related to a resource request.
            </summary>
            <param name="irr">The resource request within whose scope the event is taking place.</param>
            <param name="resource">The resource, typically, to whom the event is taking place.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceManagerEvent">
            <summary>
            A delegate implemented by an event that is fired, usually, by a resource manager.
            </summary>
            <param name="irm">The resource manager within whose scope the event is taking place.</param>
            <param name="resource">The resource, typically, to whom the event is taking place.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceRequestSource">
            <summary>
            Implemented by a method that can generate or return a Resource Request.
            </summary>
            <returns>a Resource Request.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.IHasCapacity">
            <summary>
            Implemented by a class (usually a resource) that has a quantity that can be considered
            capacity.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasCapacity.InitialCapacity">
            <summary>
            The capacity of this resource that will be in effect if the resource experiences a reset.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasCapacity.Capacity">
            <summary>
            The current capacity of this resource - how much 'Available' can be, at its highest value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasCapacity.PermissibleOverbook">
            <summary>
            The amount of a resource that can be acquired over and above the amount that is actually there.
            It is illegal to set PermissibleOverbook quantity on an atomic resource, since atomicity implies
            that all or none are granted anyway.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasCapacity.InitialAvailable">
            <summary>
            The quantity of this resource that will be available if the resource experiences a reset.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasCapacity.Available">
            <summary>
            How much of this resource is currently available to service requests.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IHasControllableCapacity">
            <summary>
            Implemented by a class (usually a resource) that has a quantity that can be considered
            capacity. In the case of IHasControllableCapacity, though, the current capacity (Available)
            and maximum capacity (Capacity) can be overridden.
            and 
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasControllableCapacity.Capacity">
            <summary>
            The current capacity of this resource - how much 'Available' can be at its highest value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasControllableCapacity.PermissibleOverbook">
            <summary>
            The amount of a resource that can be acquired over and above the amount that is actually there.
            It is illegal to set PermissibleOverbook quantity on an atomic resource, since atomicity implies
            that all or none are granted anyway.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IHasControllableCapacity.Available">
            <summary>
            How much of this resource is currently available to service requests.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IResource">
            <summary>
            An implementer of IResource is an object that can act as a resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResource.Manager">
            <summary>
            Gets or sets the manager of the resource.
            </summary>
            <value>The manager.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResource.IsDiscrete">
            <summary>
            Gets a value indicating whether this instance is discrete. A discrete resource is allocated in integral amounts, such as cartons or drums.
            </summary>
            <value><c>true</c> if this instance is discrete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResource.IsPersistent">
            <summary>
            Gets a value indicating whether this instance is persistent. A persistent resource is returned to the pool after it is used.
            </summary>
            <value><c>true</c> if this instance is persistent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResource.IsAtomic">
            <summary>
            Gets a value indicating whether this instance is atomic. And atomic resource is allocated all-or-none, such as a vehicle.
            </summary>
            <value><c>true</c> if this instance is atomic; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResource.Reset">
            <summary>
            Resets this instance, returning it to its initial capacity and availability.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResource.Reserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Reserves the specified request. Removes it from availability, but not from the pool. This is typically an intermediate state held during resource negotiation.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if the resource was successfully reserved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResource.Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves the specified request. Returns it to availability.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResource.Acquire(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Acquires the specified request. Removes it from availability and from the resource pool.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if if the resource was successfully acquired, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResource.Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the specified request. Returns it to availability and the resource pool.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResource.RequestEvent">
            <summary>
            Occurs when this resource has been requested.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResource.ReservedEvent">
            <summary>
            Occurs when this resource has been reserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResource.UnreservedEvent">
            <summary>
            Occurs when this resource has been unreserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResource.AcquiredEvent">
            <summary>
            Occurs when this resource has been acquired.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResource.ReleasedEvent">
            <summary>
            Occurs when this resource has been released.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IModelWithResources">
            <summary>
            Implemented by a model that manages resources.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IModelWithResources.OnNewResourceCreated(Highpoint.Sage.Resources.IResource)">
            <summary>
            Must be called by the creator when a new resource is created.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="E:Highpoint.Sage.Resources.IModelWithResources.ResourceCreatedEvent">
            <summary>
            Event that is fired when a new resource has been created.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IResourceManager">
            <summary>
            Interface IResourceManager is implemented by an object that manages the 
            granting and recovery of resources. It executes a protocol for finding 
            the best resource for a given resource request.
            </summary>
            <seealso cref="T:Highpoint.Sage.SimCore.IModelObject" />
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManager.Reserve(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Tries to reserve a resource that satisfies the specified resource request.
            </summary>
            <param name="resourceRequest">The resource request.</param>
            <param name="blockAwaitingAcquisition">if set to <c>true</c> the event thread will block awaiting reservation of a resource.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManager.Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves the resource attached to the specified resource request.
            </summary>
            <param name="resourceRequest">The resource request.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManager.Acquire(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Tries to acquire a resource that satisfies the specified resource request.
            </summary>
            <param name="resourceRequest">The resource request.</param>
            <param name="blockAwaitingAcquisition">if set to <c>true</c> the event thread will block awaiting acquisition of a resource.</param>
            <returns><c>true</c> if a satisfactory resource was acquired, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManager.Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the resource attached (by previous acqusition) to the specified resource request.
            </summary>
            <param name="resourceRequest">The resource request.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceManager.Resources">
            <summary>
            Gets the resources owned by this Resource Manager.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceManager.SupportsPrioritizedRequests">
            <summary>
            Gets a value indicating whether this resource manager supports prioritized requests.
            </summary>
            <value><c>true</c> if [supports prioritized requests]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManager.ResourceRequested">
            <summary>
            Fired when a resource request is received.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManager.ResourceAcquired">
            <summary>
            Fired when a resource is acquired and thereby removed from the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManager.ResourceReleased">
            <summary>
            Fired when a resource is released back into the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManager.ResourceAdded">
            <summary>
            Fired when a resource is added to the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManager.ResourceRemoved">
            <summary>
            Fired when a resource is removed from the pool.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceManager.AccessRegulator">
            <summary>
            Gets or sets the access regulator, which is an object that can allow or deny
            individual ResourceRequests access to specified resources.
            </summary>
            <value>The access regulator.</value>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceSelectionStrategy">
            <summary>
            This is a method that, given a list of objects implementing IResource,
            chooses the 'best' one. 
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceRequestAbortEvent">
            <summary>
            This is the signature of the event that is fired when a Resource request is aborted.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.RequestPriorityChangeEvent">
            <summary>
            This is the signature of the event that is fired when a Resource request changes its priority.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceRequestCallback">
            <summary>
            This is the signature of the callback that is invoked when a resource request, executed without a block and
            initially refused, is eventually deemed grantable, and as well, later, to notify the requester that its request
            has been granted.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IResourceRequest">
            <summary>
            IResourceRequest is an interface implemented by a class that is able
            to request a resource. This is typically an agent employed by the
            resource user itself. A resource request is submitted to a resource
            manager, whose job it is to mediate a process whereby the resource
            request selects, and is granted (or not) access to that resource. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceRequest.GetScore(Highpoint.Sage.Resources.IResource)">
            <summary>
            Gets the score that describes the suitability of the resource to fulfill this resource request.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The score</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.QuantityDesired">
            <summary>
            This property represents the quantity this request is to remove from the resource's
            'Available' capacity.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.Key">
            <summary>
            This is a key that will be used to see if the resource manager is allowed to
            grant a given resource to the requester. It is used in conjunction with resource earmarking.
            (See IAccessRegulator) 
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.Priority">
            <summary>
            An indication of the priority of this request. A larger number indicates a higher priority.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceRequest.PriorityChangeEvent">
            <summary>
            An event that is fired if the priority of this request is changed.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.RequiredResource">
            <summary>
            If non-null, this infers a specific, needed resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.QuantityObtained">
            <summary>
            This property represents the quantity this request actually removed from the resource's
            'Available' capacity. It is filled in by the granting authority.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.ResourceObtained">
            <summary>
            This is a reference to the actual resource that was obtained.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.Status">
            <summary>
            Gets the status of this resource request.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.ResourceObtainedFrom">
            <summary>
            This is a reference to the resource manager that granted access to the resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.Requester">
            <summary>
            This is a reference to the object requesting the resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.ResourceSelectionStrategy">
            <summary>
            This is the resource selection strategy that is to be used by the resource
            manager to select the resource to be granted from the pool of available
            resources.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceRequest.Reserve(Highpoint.Sage.Resources.IResourceManager,System.Boolean)">
            <summary>
            Reserves a resource from the specified resource manager, or the provided default manager, if none is provided in this call.
            </summary>
            <param name="resourceManager">The resource manager from which the resource is desired. Can be null, if a default manager has been provided.</param>
            <param name="blockAwaitingReservation">If true, this call blocks until the resource is available.</param>
            <returns>true if the reservation was successful, false otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceRequest.Unreserve">
            <summary>
            Releases the resource previously obtained by this ResourceRequest.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceRequest.Acquire(Highpoint.Sage.Resources.IResourceManager,System.Boolean)">
            <summary>
            Acquires a resource from the specified resource manager, or the provided default manager,
            if none is provided in this call. If the request has already successfully reserved a resource,
            then the reservation is revoked and the acquisition is honored in one atomic operation.
            </summary>
            <param name="resourceManager">The resource manager from which the resource is desired. Can be null, if a default manager has been provided.</param>
            <param name="blockAwaitingAcquisition">If true, this call blocks until the resource is available.</param>
            <returns>true if the acquisition was successful, false otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceRequest.Release">
            <summary>
            Releases the resource previously obtained by this ResourceRequest.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.AbortHandler">
            <summary>
            This method is called if the resource request is pending, and gets aborted, for
            example due to resource deadlocking. It can be null, in which case no deadlock
            detection is provided for the implementing type of ResourceRequest.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceRequest.ResourceRequestAborting">
            <summary>
            Typically fires as a result of the RequestAbortHandler being called. In that method,
            it picks up the IResourceRequest identity, and is passed on through this event, which
            includes the IResourceRequest.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.Replicate">
            <summary>
            Creates a fresh replica of this resource request, without any of the in-progress data. This replica can
            be used to generate another, similar resource request that can acquire its own resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.DefaultResourceManager">
            <summary>
            This is the resource manager from which a resource is obtained if none is provided in the reserve or
            acquire API calls.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.AsyncGrantConfirmationCallback">
            <summary>
            This callback is called when a request, made with a do-not-block specification, that was initially
            refused, is finally deemed grantable, and provides the callee (presumably the original requester) 
            with an opportunity to say, "No, I don't want that any more", or perhaps to get ready for receipt
            of the resource in question.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.AsyncGrantNotificationCallback">
            <summary>
            Called after a resource request is granted asynchronously.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceRequest.UserData">
            <summary>
            Data maintained by this resource request on behalf of the requester.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning">
            <summary>
            A class that implements IModelWarning, and is intended to contain data on a resource request that
            was aborted due to deadlock or starvation, at the end of a model run.
            The creator of this class must add the instance into the Model's Warnings collection.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.#ctor(Highpoint.Sage.SimCore.IExecutive,Highpoint.Sage.Resources.IResourceManager,Highpoint.Sage.Resources.IResourceRequest,Highpoint.Sage.SimCore.IDetachableEventController)">
            <summary>
            Creates a new instance of the <see cref="T:TerminalResourceRequestAbortedWarning"/> class.
            </summary>
            <param name="exec">The executive under whose control this warning occurred.</param>
            <param name="mgr">The Resource Manager from which the resource was obtained.</param>
            <param name="req">The request through which the resource was obtained.</param>
            <param name="idec">The <see cref="T:Highpoint.Sage.SimCore.IDetachableEventController"/> that controls the thread in which the resource was last manipulated.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.Target">
            <summary>
            Returns the IResourceManager that was unable to satisfy the request.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.Subject">
            <summary>
            Returns the IResourceRequest that was unsatisfied.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.Priority">
            <summary>
            Gets or sets the priority of the notification.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.ResourceManager">
            <summary>
            Returns the IResourceManager that was unable to satisfy the request.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.ResourceRequest">
            <summary>
            Returns the IResourceRequest that was unsatisfied.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.TerminalResourceRequestAbortedWarning.GetNarrative">
            <summary>
            Gets the narrative of this warning.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.MultiRequestProcessor">
            <summary>
            MultiRequestProcessor provides ways to manipulate multiple resource requests at the same time.
            All requests must have a default resource manager specified, unless otherwise indicated in the
            specific API.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiRequestProcessor.Replicate(Highpoint.Sage.Resources.IResourceRequest[]@)">
            <summary>
            Replicates the specified requests.
            </summary>
            <param name="requests">The requests.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiRequestProcessor.AcquireAll(Highpoint.Sage.Resources.IResourceRequest[]@,System.Boolean)">
            <summary>
            Acquires all of the resources referred to in the array of requests,
            or if it cannot, it acquires none of them. If the blocking parameter is
            true, it keeps trying until it is successful. Otherwise, it tries once,
            and returns immediately, indicating success or failure.
            </summary>
            <param name="requests">The resource requests on which this processor is to operate.</param>
            <param name="blockAwaitingAcquisition">If true, this call blocks until the resource is available.</param>
            <returns>true if the acquisition was successful, false otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiRequestProcessor.ReserveAll(Highpoint.Sage.Resources.IResourceRequest[]@,System.Boolean)">
            <summary>
            Reserves all of the resources referred to in the array of requests,
            or if it cannot, it acquires none of them. If the blocking parameter is
            true, it keeps trying until it is successful. Otherwise, it tries once,
            and returns immediately, indicating success or failure.
            </summary>
            <param name="requests">The resource requests on which this processor is to operate.</param>
            <param name="blockAwaitingAcquisition">If true, this call blocks until the resource is available.</param>
            <returns>true if the reservation was successful, false otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiRequestProcessor.ReleaseAll(Highpoint.Sage.Resources.IResourceRequest[]@)">
            <summary>
            Releases all of the resources in the provided ResourceRequests.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiRequestProcessor.UnreserveAll(Highpoint.Sage.Resources.IResourceRequest[]@)">
            <summary>
            Unreserves all of the resources in the provided ResourceRequests.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.Resource">
            <summary>
            A resource represents something that is used by other objects in the completion of their tasks. It can be steam pressure,
            with real numbers of capacity used and returned, it can be a vehicle in a motor pool which is used in toto and returned,
            it can be the stock of syringes in an emergency room that are used one at a time and discarded, and separately replenished,
            and so on.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Resource. A resource is created with a capacity, and initial quantity available, and is
            granted in portions of that capacity, or if atomic, all-or-nothing. The IResourceRequest will specify
            a desired amount. If the IResourceRequest specifies a desired quantity less than the resource's capacity,
            and the resource is atomic, the IResourceRequest will be granted the full capacity of the resource.
            A self-managing resource is a resource that is responsible for granting access to itself.<p>This constructor
            allows the initial capacities and quantities available to be different from each other.</p>
            </summary>
            <param name="model">The model to which the Resource will belong.</param>
            <param name="name">The name of the Resource.</param>
            <param name="guid">The guid by which this resource will be known.</param>
            <param name="capacity">The capacity of the Resource. How much there is to be granted.</param>
            <param name="availability">The amount of this resource that is initially available.</param>
            <param name="isAtomic">True if the Resource is atomic. Atomicity infers that the resource is granted all-or-nothing.</param>
            <param name="isDiscrete">True if the Resource is discrete. Discreteness infers that the resource is granted in unitary amounts.</param>
            <param name="isPersistent">True if the Resource is persistent. Atomicity infers that the resource, once granted, must be returned to the pool.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,Highpoint.Sage.Resources.IResource)">
            <summary>
            Creates a new Resource, wrapped by an implementer of IResource. This constructor is used if the
            resource being created is serving as a delegated-to token which represents some other resource.
            A resource is created with a capacity, and is granted in portions of that capacity, or if atomic,
            all-or-nothing. The IResourceRequest will specify a desired amount. If the IResourceRequest
            specifies a desired quantity less than the resource's capacity, and the resource is atomic, the
            IResourceRequest will be granted the full capacity of the resource. A self-managing resource
            is a resource that is responsible for granting access to itself.
            </summary>
            <param name="model">The model to which the Resource will belong.</param>
            <param name="name">The name of the Resource.</param>
            <param name="guid">The guid of the Resource.</param>
            <param name="capacity">The capacity of the Resource. How much there is to be granted.</param>
            <param name="availability">The initial available quantity of the resource.</param>
            <param name="isAtomic">True if the Resource is atomic. Atomicity infers that the resource is granted all-or-nothing.</param>
            <param name="isDiscrete">True if the Resource is discrete. Discreteness infers that the resource is granted in unitary amounts.</param>
            <param name="isPersistent">True if the Resource is persistent. Atomicity infers that the resource, once granted, must be returned to the pool.</param>
            <param name="wrappedByWhom">A reference to the outer object which this instance exists to represent.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.IsDiscrete">
            <summary>
            Gets a value indicating whether this instance is discrete.
            </summary>
            <value>
            	<c>true</c> if this instance is discrete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.IsPersistent">
            <summary>
            Gets a value indicating whether this instance is persistent.
            </summary>
            <value>
            	<c>true</c> if this instance is persistent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.IsAtomic">
            <summary>
            Gets a value indicating whether this instance is atomic.
            </summary>
            <value><c>true</c> if this instance is atomic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.InitialCapacity">
            <summary>
            The capacity of this resource that will be in effect if the resource experiences a reset.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.InitialAvailable">
            <summary>
            The quantity of this resource that will be available if the resource experiences a reset.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.PermissibleOverbook">
            <summary>
            The amount by which it is permissible to overbook this resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.Description">
            <summary>
            A description of this Resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.Resource.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Highpoint.Sage.Resources.Resource"/> class - for deserialization only.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Stores this object to the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.Resource.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Reconstitutes this object from the specified XmlSerializationContext.
            </summary>
            <param name="xmlsc">The specified XmlSerializationContext.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceException">
            <summary>
            ResourceException is the base class for other resource exceptions - it simply contains the message, the manager, the request, and the resource involved.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceException.#ctor(System.String,Highpoint.Sage.Resources.IResourceRequest,Highpoint.Sage.Resources.IResource,Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourceException"/> class.
            </summary>
            <param name="msg">The message to be reported with the exception.</param>
            <param name="resourceRequest">The resource request.</param>
            <param name="resource">The resource.</param>
            <param name="resourceManager">The resource manager.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceException.ResourceManager">
            <summary>
            Gets the resource manager.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceException.ResourceRequest">
            <summary>
            Gets the resource request.
            </summary>
            <value>The resource request.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceException.Resource">
            <summary>
            Gets the resource.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourcePoolInsufficientException">
            <summary>
            Class ResourcePoolInsufficientException is fired when there are insufficient resources available to a resource manager to ever satisfy the request.
            </summary>
            <seealso cref="T:Highpoint.Sage.Resources.ResourceException" />
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourcePoolInsufficientException.#ctor(Highpoint.Sage.Resources.IResourceManager,Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourcePoolInsufficientException"/> class.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceMismatchException">
            <summary>
            Class ResourceMismatchException is fired when code tries to release or unreserve a resource with a ResourceRequest that doesn't own it.
            </summary>
            <seealso cref="T:Highpoint.Sage.Resources.ResourceException" />
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceMismatchException.#ctor(Highpoint.Sage.Resources.IResourceRequest,Highpoint.Sage.Resources.IResource,Highpoint.Sage.Resources.ResourceMismatchException.MismatchType)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourceMismatchException"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="resource">The resource.</param>
            <param name="type">The type (release or unreserve).</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceMismatchException.Operation">
            <summary>
            Gets the operation.
            </summary>
            <value>The operation.</value>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceManager">
            <summary>
            Resource Manager is a class that provides reservation, acquisition and
            release services on instances that implement IResource. All operations
            are accomplished synchronously, meaning that a call to acquire a resource
            will either throw an exception indicating that the resource request can
            never be fulfilled from this pool, or else (1) the call is blocked until
            the resource can be obtained from the pool, or (2) the request will return,
            unfulfilled. (1) or (2) happen based on the value of the blockAwaitingAcquisition
            parameter in the reserve or acquire APIs.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManager.ResourceRequested">
            <summary>
            This event is fired when a resource is requested from this pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManager.ResourceAcquired">
            <summary>
            This event is fired when a resource is acquired from this pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManager.ResourceReleased">
            <summary>
            This event is fired when a resource is released back into this pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManager.ResourceAdded">
            <summary>
            This event is fired when a resource is added to the available resources in this pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManager.ResourceRemoved">
            <summary>
            This event is fired when a resource is removed from the available resources in this pool.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a new resource manager.
            </summary>
            <param name="model">The model to which this resource manager belongs. It can be null.</param>
            <param name="name">The name of this resource manager.</param>
            <param name="guid">The guid by which this resource manager will be known.</param>
            <param name="priorityEnabled">If true, this resource manager will handle prioritized resource requests.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.SupportsPrioritizedRequests">
            <summary>
            Gets a value indicating whether this resource manager supports prioritized requests.
            </summary>
            <value><c>true</c> if this resource manager supports prioritized requests; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Add(Highpoint.Sage.Resources.IResource)">
            <summary>
            Adds a resource to this resource manager.
            </summary>
            <param name="resource">The resource to be added.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Remove(Highpoint.Sage.Resources.IResource)">
            <summary>
            Removes a resource from this resource manager.
            </summary>
            <param name="resource">The resource to remove from this pool.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Clear">
            <summary>
            Clears out the resources in this manager's pool.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.GetEnumerator">
            <summary>
            Retrieves an enumerator across all of the resources in this pool.
            </summary>
            <returns>An enumerator across all of the resources in this pool.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Item(System.Guid)">
            <summary>
            Indexer that retrieves a resource from this pool by its Guid.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Resources">
            <summary>
            Returns a read-only list of the resources in this pool.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Reserve(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Attempts to reserve a proscribed quantity of a particular resource in this resource pool. This
            removes the resource quantity from availability for further reservation &amp; acquisition.
            </summary>
            <param name="resourceRequest">The resource request under which the reservation is to take place.</param>
            <param name="blockAwaitingAcquisition">If true, blocks until resource is reserved.</param>
            <returns>true if the reservation was successful.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves a quantity of resource from this pool that was previously reserved under the provided
            resource request.
            </summary>
            <param name="resourceRequest">The resource request under which some resource was previously reserved.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Acquire(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Attempts to acquire a proscribed quantity of a resource in this resource pool. If the
            resource has already been reserved under this resourceRequest, it simply acquires that
            resource. If no resource has been reserved, then the best available resource will be
            reserved, and then acquired.
            </summary>
            <param name="resourceRequest">The resource request under which the reservation is to take 
            place, and describing the resources desired.</param>
            <param name="blockAwaitingAcquisition">If true, blocks until resource is acquired.</param>
            <returns>true if the acquisition was successful.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the resource held under this resource request back into the resource pool.
            </summary>
            <param name="resourceRequest">The resource request under which the resource has previously 
            been acquired.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.AccessRegulator">
            <summary>
            The access regulator that governs which requestors may acquire which resources.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.ReserveWithWait(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Reserves the resource and quantity specifed by the resource request, blocking
            until it can return successfully.
            </summary>
            <param name="request">The resource request that describes the desired resource and quantity.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.AcquireWithWait(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Acquires the resource and quantity specifed by the resource request, blocking
            until it can return successfully.
            </summary>
            <param name="request">The resource request that describes the desired resource and quantity.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.ReserveBestResource(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Determines and reserves the 'best' resource in the pool for the specified resource request. The
            determination is based on the access regulator agreeing that the requestor may request it, and the
            scoring algorithm in the resourceRequest providing the best score for the resource.
            </summary>
            <param name="resourceRequest">The resource request that contains the description of the resource
            desired, and with the algorithm to apparaise the 'goodness' of each resource.</param>
            <returns>true if a resource was successfully reserved.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Name">
            <summary>
            The user-friendly name for this object.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Description">
            <summary>
            A description of this Resource Manager.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceManager.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.#ctor">
            <summary>
            A default constructor, to be used for creating an empty object prior to reconstitution from a serializer.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.SerializeTo(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Serializes this object to the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext into which this object is to be stored.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManager.DeserializeFrom(Highpoint.Sage.Persistence.XmlSerializationContext)">
            <summary>
            Deserializes this object from the specified XmlSerializatonContext.
            </summary>
            <param name="xmlsc">The XmlSerializatonContext from which this object is to be reconstituted.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceManagerChangeListener">
            <summary>
            A delegate with which an event involving a SOMUnit is broadcast. Examples are ResourceManagerAdded and ResourceManagerRemoved. 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManagerCollection.Add(Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Adds a resource manager to the model. Fires the ResourceManagerAdded event. A resource manager is any
            implementer of IResourceManager, including a self-managing resource.
            </summary>
            <param name="manager">The manager to be added.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManagerCollection.Remove(Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Removes a resource manager from the model. Fires the ResourceManagerRemoved event.
            </summary>
            <param name="manager">The manager to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManagerCollection.GetResourceManager(System.Guid)">
            <summary>
            Retrieves a resource manager that is known to the SOMModel, by its guid.
            </summary>
            <param name="guid">The guid for which the resource manager is requested.</param>
            <returns>The resource manager for the quid that was requested.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceManagerCollection.GetResourceManagers">
            <summary>
            Returns a collection of all resource managers known to this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManagerCollection.ResourceManagerAdded">
            <summary>
            Fired when a resource manager is added to the model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.IResourceManagerCollection.ResourceManagerRemoved">
            <summary>
            Fired when a resource manager is removed from the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourceManagerCollection"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.#ctor(Highpoint.Sage.Resources.IResourceManagerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourceManagerCollection"/> class.
            </summary>
            <param name="whoDelegatesToMe">The who delegates to me.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.Add(Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Adds a resource manager to the model. Fires the ResourceManagerAdded event. A resource manager is any
            implementer of IResourceManager, including a self-managing resource.
            </summary>
            <param name="manager">The manager to be added.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.Remove(Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Removes a resource manager from the model. Fires the ResourceManagerRemoved event.
            </summary>
            <param name="manager">The manager to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.GetResourceManager(System.Guid)">
            <summary>
            Retrieves a resource manager that is known to this collection, by its guid.
            </summary>
            <param name="guid">The guid for which the resource manager is requested.</param>
            <returns>The resource manager for the quid that was requested.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceManagerCollection.GetResourceManagers">
            <summary>
            Returns a collection of all resource managers known to this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManagerCollection.ResourceManagerAdded">
            <summary>
            Fired when a resource manager is added to the model.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceManagerCollection.ResourceManagerRemoved">
            <summary>
            Fired when a resource manager is removed from the model.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.ResourceRequest"/> class.
            </summary>
            <param name="quantityDesired">The quantity of resource desired.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.GetScore(Highpoint.Sage.Resources.IResource)">
            <summary>
            Gets the score that describes the suitability of the resource to fulfill this resource request.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The score</returns>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceRequest.PriorityChangeEvent">
            <summary>
            An event that is fired if the priority of this request is changed.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.Priority">
            <summary>
            An indication of the priority of this request. A larger number indicates a higher priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.Reserve(Highpoint.Sage.Resources.IResourceManager,System.Boolean)">
            <summary>
            Reserves the specified resource manager.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <param name="blockAwaitingAcquisition">if set to <c>true</c> [block awaiting acquisition].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ApplicationException">Acquire API on resource request was called with neither an explicit nor a default resource manager.</exception>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.Acquire(Highpoint.Sage.Resources.IResourceManager,System.Boolean)">
            <summary>
            Acquires a resource from the specified resource manager, or the provided default manager,
            if none is provided in this call. If the request has already successfully reserved a resource,
            then the reservation is revoked and the acquisition is honored in one atomic operation.
            </summary>
            <param name="resourceManager">The resource manager from which the resource is desired. Can be null, if a default manager has been provided.</param>
            <param name="blockAwaitingAcquisition">If true, this call blocks until the resource is available.</param>
            <returns>true if the acquisition was successful, false otherwise.</returns>
            <exception cref="T:System.ApplicationException">Acquire API on resource request was called with neither an explicit nor a default resource manager.</exception>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.Key">
            <summary>
            This is a key that will be used to see if the resource manager is allowed to
            grant a given resource to the requester. It is used in conjunction with resource earmarking.
            (See IAccessRegulator)
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.ResourceObtainedFrom">
            <summary>
            This is a reference to the resource manager that granted access to the resource.
            </summary>
            <value>The resource obtained from.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.Unreserve">
            <summary>
            Releases the resource previously obtained by this ResourceRequest.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.Release">
            <summary>
            Releases the resource previously obtained by this ResourceRequest.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.Choose(System.Collections.IList)">
            <summary>
            Chooses a resource from the specified candidates.
            </summary>
            <param name="candidates">The candidates.</param>
            <returns>IResource.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.QuantityDesired">
            <summary>
            This property represents the quantity this request is to remove from the resource's
            'Available' capacity.
            </summary>
            <value>The quantity desired.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.QuantityObtained">
            <summary>
            This property represents the quantity this request actually removed from the resource's
            'Available' capacity. It is filled in by the granting authority.
            </summary>
            <value>The quantity obtained.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.RequiredResource">
            <summary>
            If non-null, this infers a specific, needed resource.
            </summary>
            <value>The required resource.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.Requester">
            <summary>
            This is a reference to the object requesting the resource.
            </summary>
            <value>The requester.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.ResourceObtained">
            <summary>
            This is a reference to the actual resource that was obtained.
            </summary>
            <value>The resource obtained.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.Status">
            <summary>
            Gets the status of this resource request.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.ResourceSelectionStrategy">
            <summary>
            This is the resource selection strategy that is to be used by the resource
            manager to select the resource to be granted from the pool of available
            resources.
            </summary>
            <value>The resource selection strategy.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.AbortHandler">
            <summary>
            This method is called if the resource request is pending, and gets aborted, for
            example due to resource deadlocking. It can be null, in which case no deadlock
            detection is provided for the implementing type of ResourceRequest.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.ResourceRequest.ResourceRequestAborting">
            <summary>
            Typically fires as a result of the RequestAbortHandler being called. In that method,
            it picks up the IResourceRequest identity, and is passed on through this event, which
            includes the IResourceRequest.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.Replicate">
            <summary>
            Creates a fresh replica of this resource request, without any of the in-progress data. This replica can
            be used to generate another, similar resource request that can acquire its own resource.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.GetDefaultReplicator">
            <summary>
            Gets the default replicator to be used in creating a copy of this resource request. Might look, for example,
            like this: 
            <code>protected override ResourceRequestSource GetDefaultReplicator()
                  {
                       return () => new VehicleRequest(m_seatsNeeded) { DefaultResourceManager = DefaultResourceManager };
            }
            </code>
            </summary>
            <returns>ResourceRequestSource.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.DefaultResourceManager">
            <summary>
            This is the resource manager from which a resource is obtained if none is provided in the reserve or
            acquire API calls.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.AsyncGrantConfirmationCallback">
            <summary>
            This callback is called when a request, made with a do-not-block specification, that was initially
            refused, is finally deemed grantable, and provides the callee (presumably the original requester) 
            with an opportunity to say, "No, I don't want that any more", or perhaps to get ready for receipt
            of the resource in question.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.AsyncGrantNotificationCallback">
            <summary>
            Called after a resource request is granted asynchronously.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceRequest.UserData">
            <summary>
            Data maintained by this resource request on behalf of the requester.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceRequest.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.SimpleResourceRequest">
            <summary>
            A SimpleResourceRequest requests a specified quantity of whatever is in a
            resource manager. It assumes the resources to be homogenenous (i.e. any
            offered resource is immediately accepted.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleResourceRequest.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.SimpleResourceRequest"/> class.
            </summary>
            <param name="howMuch">The how much.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleResourceRequest.#ctor(System.Double,Highpoint.Sage.Resources.IResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.SimpleResourceRequest"/> class.
            </summary>
            <param name="howMuch">The how much.</param>
            <param name="fromWhere">From where.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SimpleResourceRequest.GetScore(Highpoint.Sage.Resources.IResource)">
            <summary>
            Gets the score that describes the suitability of the resource to fulfill this resource request.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The score</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.GuidSelectiveResourceRequest">
            <summary>
            A GuidSelectiveResourceRequest requests a specified quantity of a guid-specified
            resource from its manager. It assumes the resources to be unique to the given Guid.
            </summary>
            <seealso cref="T:Highpoint.Sage.Resources.ResourceRequest" />
        </member>
        <member name="M:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.#ctor(System.Guid,System.Double,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Resources.GuidSelectiveResourceRequest"/> class.
            </summary>
            <param name="whichResource">Guid which indicates which resource is desired.</param>
            <param name="howMuch">How much of the resource is desired.</param>
            <param name="key">The key that will be used to see if the resource manager is allowed to
            grant a given resource to the requester.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.GetScore(Highpoint.Sage.Resources.IResource)">
            <summary>
            Gets the score that describes the suitability of the resource to fulfill this resource request.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The score</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.WhichResource">
            <summary>
            Gets a Guid which indicates which resource is desired.
            </summary>
            <value>The which resource.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.RequiredRscGuid">
            <summary>
            Gets or sets the required resource unique identifier.
            </summary>
            <value>The required resource unique identifier.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.GuidSelectiveResourceRequest.GetDefaultReplicator">
            <summary>
            Gets the default replicator.
            </summary>
            <returns>ResourceRequestSource.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.SelfManagingResource">
            <summary>
            Summary description for Resource.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new SelfManagingResource. A resource is created with a capacity, and is granted in portions
            of that capacity, or if atomic, all-or-nothing. The IResourceRequest will specify a desired
            amount. If the IResourceRequest specifies a desired quantity less than the resource's capacity,
            and the resource is atomic, the IResourceRequest will be granted the full capacity of the
            resource. A self-managing resource is a resource that is responsible for granting access to itself.
            </summary>
            <param name="model">The model to which the Resource will belong.</param>
            <param name="name">The name of the Resource.</param>
            <param name="guid">The guid of the Resource.</param>
            <param name="capacity">The capacity of the Resource. How much there is to be granted. This API infers that the resource,
            at creation has its full capacity available.</param>
            <param name="isAtomic">True if the Resource is atomic. Atomicity infers that the resource is granted all-or-nothing.</param>
            <param name="isDiscrete">True if the Resource is discrete. Discreteness infers that the resource is granted in unitary amounts.</param>
            <param name="isPersistent">True if the Resource is persistent. Atomicity infers that the resource, once granted, must be returned to the pool.</param>
            <param name="supportsPriorities">True if this resource is able to treat resource requests in a prioritized order.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.Guid,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new SelfManagingResource. A resource is created with a capacity, and is granted in portions
            of that capacity, or if atomic, all-or-nothing. The IResourceRequest will specify a desired
            amount. If the IResourceRequest specifies a desired quantity less than the resource's capacity,
            and the resource is atomic, the IResourceRequest will be granted the full capacity of the
            resource. A self-managing resource is a resource that is responsible for granting access to itself.
            </summary>
            <param name="model">The model to which the Resource will belong.</param>
            <param name="name">The name of the Resource.</param>
            <param name="guid">The guid of the Resource.</param>
            <param name="capacity">The capacity of the Resource. How much there <b>can be</b> to be granted.</param>
            <param name="available">The availability of the Resource. How much there <b>is, at start,</b> to be granted.</param>
            <param name="isAtomic">True if the Resource is atomic. Atomicity infers that the resource is granted all-or-nothing.</param>
            <param name="isDiscrete">True if the Resource is discrete. Discreteness infers that the resource is granted in unitary amounts.</param>
            <param name="isPersistent">True if the Resource is persistent. Atomicity infers that the resource, once granted, must be returned to the pool.</param>
            <param name="supportsPriorities">True if this resource is able ot treat resource requests in a prioritized order.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initialize the identity of this model object, once.
            </summary>
            <param name="model">The model this component runs in.</param>
            <param name="name">The name of this component.</param>
            <param name="description">The description for this component.</param>
            <param name="guid">The GUID of this component.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Equals(System.Object)">
            <summary>
            We override the Equals operator so that a self-managing resource can declare
            equivalency to its underlying resource.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Name">
            <summary>
            The user-friendly name for this object.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Description">
            <summary>
            A description of this Resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Guid">
            <summary>
            The Guid for this object. Typically required to be unique.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Model">
            <summary>
            The model that owns this object, or from which this object gets time, etc. data.
            </summary>
            <value>The model.</value>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ResourceAdded">
            <summary>
            Fired when a resource is added to the pool.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ResourceRemoved">
            <summary>
            Fired when a resource is removed from the pool.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.IsDiscrete">
            <summary>
            Gets a value indicating whether this instance is discrete. A discrete resource is allocated in integral amounts, such as cartons or drums.
            </summary>
            <value><c>true</c> if this instance is discrete; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.IsPersistent">
            <summary>
            Gets a value indicating whether this instance is persistent. A persistent resource is returned to the pool after it is used.
            </summary>
            <value><c>true</c> if this instance is persistent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.IsAtomic">
            <summary>
            Gets a value indicating whether this instance is atomic. And atomic resource is allocated all-or-none, such as a vehicle.
            </summary>
            <value><c>true</c> if this instance is atomic; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Highpoint#Sage#Resources#IResource#Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves the specified request. Returns it to availability.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Highpoint#Sage#Resources#IResource#Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the specified request. Returns it to availability and the resource pool.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Highpoint#Sage#Resources#IResource#Reserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Reserves the specified request. Removes it from availability, but not from the pool. This is typically an intermediate state held during resource negotiation.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if the resource was successfully reserved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Highpoint#Sage#Resources#IResource#Acquire(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Acquires the specified request. Removes it from availability and from the resource pool.
            </summary>
            <param name="request">The request.</param>
            <returns><c>true</c> if if the resource was successfully acquired, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Reset">
            <summary>
            Resets this instance, returning it to its initial capacity and availability.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ReleasedEvent">
            <summary>
            Occurs when this resource has been released.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.AcquiredEvent">
            <summary>
            Occurs when this resource has been acquired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.InitialAvailable">
            <summary>
            The quantity of this resource that will be available if the resource experiences a reset.
            </summary>
            <value>The initial available.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Available">
            <summary>
            How much of this resource is currently available to service requests.
            </summary>
            <value>The available.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Manager">
            <summary>
            Gets or sets the manager of the resource.
            </summary>
            <value>The manager.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.InitialCapacity">
            <summary>
            The capacity of this resource that will be in effect if the resource experiences a reset.
            </summary>
            <value>The initial capacity.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Capacity">
            <summary>
            The current capacity of this resource - how much 'Available' can be, at its highest value.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.PermissibleOverbook">
            <summary>
            The amount by which it is permissible to overbook this resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Resources">
            <summary>
            Gets the resources owned by this Resource Manager.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ResourceRequested">
            <summary>
            Fired when a resource request is received.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Reserve(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Attempts to reserve this resource using the provided IResourceRequest.
            </summary>
            <param name="resourceRequest">The IResourceRequest that wants this resource.</param>
            <param name="blockAwaitingAcquisition">If true, this call will not return until the resource has been acquired.</param>
            <returns>True if this resource was granted as a reservation to the IResourceRequest.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Acquire(Highpoint.Sage.Resources.IResourceRequest,System.Boolean)">
            <summary>
            Attempts to acquire this resource using the provided IResourceRequest.
            </summary>
            <param name="resourceRequest">The IResourceRequest that wants this resource.</param>
            <param name="blockAwaitingAcquisition">If true, this call will not return until the resource has been acquired.</param>
            <returns>True if this resource was granted to the IResourceRequest.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Unreserve(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Unreserves the resource through the provided resource request.
            </summary>
            <param name="request">The IResourceRequest through the reservation was originally obtained.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.SelfManagingResource.Release(Highpoint.Sage.Resources.IResourceRequest)">
            <summary>
            Releases the resource through the provided resource request.
            </summary>
            <param name="request">The IResourceRequest through the reservation was originally obtained.</param> 
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.AccessRegulator">
            <summary>
            Gets or sets the access regulator, which is an object that can allow or deny
            individual ResourceRequests access to specified resources.
            </summary>
            <value>The access regulator.</value>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.RequestEvent">
            <summary>
            This event is fired when any acq/rls/rsv/unr request is issued to this equipment.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ReservedEvent">
            <summary>
            This event is fired when this equipment is reserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.UnreservedEvent">
            <summary>
            This event is fired when this equipment is unreserved.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ResourceAcquired">
            <summary>
            This event is fired when this resource is acquired.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Resources.SelfManagingResource.ResourceReleased">
            <summary>
            This event is fired when this resource is released.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.SupportsPrioritizedRequests">
            <summary>
            Gets a value indicating whether this resource manager supports prioritized requests.
            </summary>
            <value><c>true</c> if [supports prioritized requests]; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Highpoint.Sage.Resources.SelfManagingResource.Tag">
            <summary>
            An Object that contains data about this self-managing resource. The default is a 
            null reference (Nothing in Visual Basic).
            Any Object derived type can be assigned to this property.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceAction">
            <summary>
            An enumeration of the types of transactions that can take place, involving a resource.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Resources.ResourceAction.Request">
            <summary>
            The resource was requested. This does not infer success.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Resources.ResourceAction.Reserved">
            <summary>
            The resource was reserved. This indicates that the resource was taken out of general availability, but not granted.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Resources.ResourceAction.Unreserved">
            <summary>
            The resource was unreserved. This indicates that the resource was placed back into general availability after having been reserved.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Resources.ResourceAction.Acquired">
            <summary>
            The resource was acquired. This indicates that all or part of the resource's capacity was removed from general availability.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Resources.ResourceAction.Released">
            <summary>
            The resource was released. This means that all or part of its capacity was placed back into general availability.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.IResourceTracker">
            <summary>
            Implemented by anything that gathers ResourceEventRecords on a specific resource or resources.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.IResourceTracker.Clear">
            <summary>
            Clears all ResourceEventRecords.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceTracker.Enabled">
            <summary>
            Turns on tracking for this ResourceTracker. This defaults to 'true', and
            allEnabled must also be true, in order for a ResourceTracker to track.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceTracker.Filter">
            <summary>
            Allows for the setting of the active filter on the records
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceTracker.EventRecords">
            <summary>
            Returns all records that have been collected
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.IResourceTracker.InitialAvailable">
            <summary>
            The initial value(s) of all resources that are being tracked
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceTracker">
            <summary>
            This class is the baseline implementation of <see cref="T:Highpoint.Sage.Resources.IResourceTracker"/>. It watches
            a specified resource over a model run, and creates &amp; collects <see cref="T:Highpoint.Sage.Resources.ResourceEventRecord"/>s on the activities of that resource.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTracker.#ctor(Highpoint.Sage.SimCore.IModel,Highpoint.Sage.Resources.IResource)">
            <summary>
            Tracks utilization of a particular resource.
            </summary>
            <param name="model">The parent model to which the resource, and this tracker, will belong.</param>
            <param name="target">The resource that this tracker will track.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.Resource">
            <summary>
            The resource that this tracker is tracking.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTracker.GetEnumerator">
            <summary>
            Returns an enumerator across all ResourceEventRecords.
            </summary>
            <returns>An enumerator across all ResourceEventRecords.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.EventRecords">
            <summary>
            Returns all event records that have been collected
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.InitialAvailable">
            <summary>
            The InitialAvailable(s) of all resources that are being tracked
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTracker.Clear">
            <summary>
            Clears all ResourceEventRecords.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.Enabled">
            <summary>
            Turns on tracking for this ResourceTracker. This defaults to 'true', and
            allEnabled must also be true, in order for a ResourceTracker to track.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.GlobalEnabled">
            <summary>
            If false, all Trackers will be disabled. If true, then the individual tracker's setting governs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTracker.Filter">
            <summary>
            The filter is given a look at each prospective Record, and allowed to decide whether it is to
            be logged or not. In conjunction with simply not adding a resource to the tracker, you can achieve
            fine-grained control of the contents of a resource activity log.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecordFilters">
            <summary>
            A static holder for some static and stateless <see cref="T:Highpoint.Sage.Resources.ResourceEventRecordFilter"/>s.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecordFilters.FilterOutRequests">
            <summary>
            A filter that filters out requests, allowing the actual Acquire &amp; Release events to pass.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecordFilters.AcquireAndReleaseOnly">
            <summary>
            A filter that gets the acquire and release events only.
            </summary>
            <value>The acquire and release events only.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecordFilters.AllEvents">
            <summary>
            Gets all events.
            </summary>
            <value>All events.</value>
        </member>
        <member name="T:Highpoint.Sage.Resources.MultiResourceTracker">
            <summary>
            A MultiResourceTracker is a resource tracker (gathers copies of resource event records) that
            can monitor multiple resources during a simulation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.#ctor(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Tracks utilization of a particular resource.
            </summary>
            <param name="model">The parent model to which the resource, and this tracker, will belong.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.#ctor(Highpoint.Sage.Resources.IResourceTracker[])">
            <summary>
            Creates a new instance of the <see cref="T:MultiResourceTracker"/> class.
            </summary>
            <param name="trackers">The trackers that are aggregated by this <see cref="T:MultiResourceTracker"/>.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.AddTargets(Highpoint.Sage.Resources.IResource[])">
            <summary>
            Adds the specified resources to those being monitored by this tracker.
            </summary>
            <param name="targets">The IResource entities that are to be tracked.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.AddTarget(Highpoint.Sage.Resources.IResource)">
            <summary>
            Adds the specified resource to those being monitored by this tracker.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.GetEnumerator">
            <summary>
            Returns an enumerator across all ResourceEventRecords.
            </summary>
            <returns>An enumerator across all ResourceEventRecords.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.MultiResourceTracker.EventRecords">
            <summary>
            Returns all event records that have been collected
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.MultiResourceTracker.InitialAvailable">
            <summary>
            The sum of the InitialAvailable(s) of all resources that are being tracked
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.Clear">
            <summary>
            Clears all ResourceEventRecords.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.MultiResourceTracker.Enabled">
            <summary>
            Turns on tracking for this ResourceTracker. This defaults to 'true', and
            allEnabled must also be true, in order for a ResourceTracker to track.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.MultiResourceTracker.GlobalEnabled">
            <summary>
            If false, all Trackers will be disabled. If true, then the individual tracker's setting governs.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.MultiResourceTracker.Filter">
            <summary>
            The filter is given a look at each prospective Record, and allowed to decide whether it is to
            be logged or not. In conjunction with simply not adding a resource to the tracker, you can achieve
            fine-grained control of the contents of a resource activity log.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.BulkLoad(System.Collections.ICollection,System.Boolean,System.Collections.IComparer)">
            <summary>
            Loads a collection of resource event records, and then sorts them using the provided comparer.
            </summary>
            <param name="bulkRecords">The collection of resource records to be added to this collection.</param>
            <param name="clearAllFirst">If true, this tracker's ResourceEventRecord internal collection is cleared out before the new records are added.</param>
            <param name="sortCriteria">An IComparer that can compare ResourceEventRecord objects. See ResourceEventRecord.By...() methods.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.BulkLoad(System.Collections.ICollection,System.Boolean)">
            <summary>
            Loads a collection of resource event records, and then sorts them by serial number in ascending order.
            </summary>
            <param name="bulkRecords">The collection of resource records to be added to this collection.</param>
            <param name="clearAllFirst">If true, this tracker's ResourceEventRecord internal collection is cleared out before the new records are added.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.MultiResourceTracker.BulkLoad(System.Collections.ICollection)">
            <summary>
            Loads a collection of resource event records, and then sorts them by serial number in ascending order.
            </summary>
            <param name="bulkRecords">The collection of resource records to be added to this collection.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceTrackerAggregator">
            <summary>
            Class that consolidates a collection of IResourceTrackers
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTrackerAggregator.#ctor(System.Collections.IEnumerable)">
            <summary>
            Standard constructor
            </summary>
            <param name="trackers">The trackers to consolidate</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTrackerAggregator.Clear">
            <summary>
            Clears all ResourceEventRecords.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTrackerAggregator.Enabled">
            <summary>
            Turns on tracking for this ResourceTracker. This defaults to 'true', and
            allEnabled must also be true, in order for a ResourceTracker to track.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTrackerAggregator.Filter">
            <summary>
            Allows for the setting of the active filter on the records
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTrackerAggregator.EventRecords">
            <summary>
            Returns all event records that have been collected
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceTrackerAggregator.InitialAvailable">
            <summary>
            The InitialAvailable(s) of all resources that are being tracked
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceTrackerAggregator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecordFilter">
            <summary>
            Implemented by anything that can filter ResourceEventRecords.
            </summary>
            <param name="candidate">The ResourceEventRecord for consideration.</param>
            <returns>true if the ResourceEventRecord is to be passed through the filter, false if it is to be filtered out.</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord">
            <summary>
            A record that represents the details of a transaction involving a resource. These include the various <see cref="T:Highpoint.Sage.Resources.ResourceAction"/>s.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.#ctor(System.DateTime,Highpoint.Sage.Resources.IResource,Highpoint.Sage.Resources.IResourceRequest,Highpoint.Sage.Resources.ResourceAction)">
            <summary>
            Constructs a record of a resource transaction.
            </summary>
            <param name="when">The time (model time) that the transaction took place.</param>
            <param name="resource">The resource against which this transaction took place.</param>
            <param name="irr">The resource request that initiated this transaction.</param>
            <param name="action">The type of <see cref="T:Highpoint.Sage.Resources.ResourceAction"/> that took place.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.#ctor(System.DateTime,System.Guid,System.Double,System.Double,System.Double,System.Double,System.Guid,Highpoint.Sage.Resources.ResourceAction)">
            <summary>
            Constructs a record of a resource transaction.
            </summary>
            <param name="when">The time (model time) that the transaction took place.</param>
            <param name="resourceGuid">The GUID of the resource against which this transaction took place.</param>
            <param name="desired">The quantity that was desired of the specified resource.</param>
            <param name="obtained">The quantity that was obtained of the specified resource.</param>
            <param name="capacity">The capacity of the specified resource after this transaction took place.</param>
            <param name="available">The amount available of the specified resource after this transaction took place.</param>
            <param name="requesterGuid">The GUID of the requester.</param>
            <param name="action">The type of <see cref="T:Highpoint.Sage.Resources.ResourceAction"/> that took place.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.#ctor(Highpoint.Sage.Resources.ResourceEventRecord,Highpoint.Sage.Resources.IResource)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">Source RER to use as as a base</param>
            <param name="replacementResource">The resource that replaces the resource from the source RER in the newly constructed ResourceEventRecord.</param>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.TagGuid">
            <summary>
            Ancillary data for consumption by client code.
            </summary>
            <value>The tag GUID.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Tag">
            <summary>
            Ancillary data for consumption by client code.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Resource">
            <summary>
            The resource against which this event transpired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.ResourceGuid">
            <summary>
            The guid of the resource against which this event transpired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.When">
            <summary>
            The time that the event transpired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.QuantityDesired">
            <summary>
            The quantity of resource that was desired by the resource request.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.QuantityObtained">
            <summary>
            The amount of resource granted to the requester.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Capacity">
            <summary>
            The capacity of the resource at the time of the request.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Available">
            <summary>
            The amount of the resource that was available AFTER the request was handled.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Requester">
            <summary>
            The identity of the entity that requested the resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.ByWhom">
            <summary>
            The identity of the entity that requested the resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.RequesterGuid">
            <summary>
            The identity of the entity that requested the resource.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Action">
            <summary>
            The type of resource action that took place (Request, Reserved, Unreserved, Acquired, Released).
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.SerialNumber">
            <summary>
            The serial number of this Resource Event Record.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.ToString">
            <summary>
            Returns a string representation of this transaction.
            </summary>
            <returns>A string representation of this transaction.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.Detail">
            <summary>
            Returns a detailed string representation of this transaction.
            </summary>
            <returns>A detailed string representation of this transaction.</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.ToStringHeader">
            <summary>
            Returns a string representation of a header for a table of ResourceEventRecords, identifying the columns.
            </summary>
            <returns>A string representation of a header for a table of ResourceEventRecords, identifying the columns.</returns>
        </member>
        <member name="P:Highpoint.Sage.Resources.ResourceEventRecord.Editor">
            <summary>
            Gets the object that provides editing capability into this RER.
            </summary>
            <value>The editor.</value>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.ByResourceName(System.Boolean)">
            <summary>
            Returns a comparer that can be used, for example, to sort ResourceEventRecords by their Resource Names.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order sort.</param>
            <returns>The comparer</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.ByTime(System.Boolean)">
            <summary>
            Returns a comparer that can be used, for example, to sort ResourceEventRecords by their times of occurrence.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order sort.</param>
            <returns>The comparer</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.ByAction(System.Boolean)">
            <summary>
            Returns a comparer that can be used, for example, to sort ResourceEventRecords by their Action types.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order sort.</param>
            <returns>The comparer</returns>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.BySerialNumber(System.Boolean)">
            <summary>
            Returns a comparer that can be used, for example, to sort ResourceEventRecords by their serial numbers.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order sort.</param>
            <returns>The comparer</returns>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.RerComparer">
            <summary>
            An abstract class from which all Resource Event Record Comparers inherit.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerComparer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:RERComparer"/> class.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.SortByResourceName">
            <summary>
            A comparer that can be used, for example, to sort ResourceEventRecords by their Resource Names.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByResourceName.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:_SortByResourceName"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByResourceName.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:_SortByResourceName"/> class.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByResourceName.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.SortByTime">
            <summary>
            A comparer that can be used, for example, to sort ResourceEventRecords by their times of occurrence.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByTime.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:_SortByTime"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByTime.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:_SortByTime"/> class.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByTime.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.SortBySerialNumber">
            <summary>
            A comparer that can be used, for example, to sort ResourceEventRecords by their serial numbers.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortBySerialNumber.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:_SortBySerialNumber"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortBySerialNumber.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:_SortBySerialNumber"/> class.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortBySerialNumber.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.SortByAction">
            <summary>
            A comparer that can be used, for example, to sort ResourceEventRecords by their Action types.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByAction.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:_SortByAction"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByAction.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:_SortByAction"/> class.
            </summary>
            <param name="reverse">if set to <c>true</c>, will result in a reverse-order comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.SortByAction.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.IEditor">
            <summary>
            Implemented by an object that can set the values of a ResourceEventRecord. Typically granted by the ResourceEventRecord itself, so that the RER can control who is able to modify it.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.IEditor.SetAvailable(System.Double)">
            <summary>
            Sets the available quantity of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.IEditor.SetCapacity(System.Double)">
            <summary>
            Sets the capacity of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.IEditor.SetQuantityDesired(System.Double)">
            <summary>
            Sets the quantity desired of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.IEditor.SetQuantityObtained(System.Double)">
            <summary>
            Sets the quantity obtained of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor">
            <summary>
            This ResourceEventRecord implementation's internal implementation of IEditor.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor.#ctor(Highpoint.Sage.Resources.ResourceEventRecord)">
            <summary>
            Creates a new instance of the <see cref="T:RerEditor"/> class.
            </summary>
            <param name="rer">The rer.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor.SetAvailable(System.Double)">
            <summary>
            Sets the available quantity of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor.SetCapacity(System.Double)">
            <summary>
            Sets the capacity of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor.SetQuantityDesired(System.Double)">
            <summary>
            Sets the quantity desired of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Highpoint.Sage.Resources.ResourceEventRecord.RerEditor.SetQuantityObtained(System.Double)">
            <summary>
            Sets the quantity obtained of the desired resource, as recorded in the ResourceEventRecord.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.Cost.CostCategory`1">
            <summary>
            Cost Categories are, e.g. Personnel, Equipment, and Materials. The same instances can be shared among many Cost elements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Cost.CostCategory`1.Clear">
            <summary>
            Zeros all costs.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Cost.CostCategory`1.Reset">
            <summary>
            Zeros all derived (i.e. non-direct) costs.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.ObservableChangeHandler">
            <summary>
            Implemented in a method that is to be called after an observable.
            Do not respond to this notification by changing the whoChanged object, and be aware that
            it is not legal to update U/I elements on any but the thread on which they were created.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.IObservable">
            <summary>
            IObservable is implemented by an object that is capable of notifying others of its changes.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Scheduling.IObservable.ChangeEvent">
            <summary>
            ObservableChangeHandler is an event that is fired after an object changes.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriodBase.StartTime">
            <summary>
            Reads and writes the Start Time. Modification of other parameters is according to
            the AdjustmentMode (which defaults to FixedDuration.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriodBase.EndTime">
            <summary>
            Reads and writes the End Time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriodBase.Duration">
            <summary>
            Reads and writes the Duration.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.ITimePeriod">
            <summary>
            Implemented by any object that embodies a time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.Subject">
            <summary>
            Gets the subject of this time period - for example, the task for which this time period represents the start, duration and end times.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.Modifier">
            <summary>
            Gets the modifier for the subject - the context for which the time period 
            relates to the subject. This might be an iteration count, a key indicating plan
            or actual, or some other similar value.
            </summary>
            <value>The modifier.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.ClearStartTime">
            <summary>
            Sets the start time to an indeterminate value.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.ClearEndTime">
            <summary>
            Sets the end time to an indeterminate time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.ClearDuration">
            <summary>
            Sets the duration to an indeterminate time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.AdjustmentMode">
            <summary>
            Determines what inferences are to be made about the other two settings when one
            of the settings (start, duration, finish times) is changed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.PushAdjustmentMode(Highpoint.Sage.Scheduling.TimeAdjustmentMode)">
            <summary>
            Pushes the current time period adjustment mode onto a stack, substituting a provided mode. This
            must be paired with a corresponding Pop operation.
            </summary>
            <param name="tam">The time period adjustment mode that is to temporarily take the place of the current one.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.PopAdjustmentMode">
            <summary>
            Pops the previous time period adjustment mode off a stack, and sets this Time Period's adjustment mode to that value.
            </summary>
            <returns>The newly-popped time period adjustment mode.</returns>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.StartMilestone">
            <summary>
            The milestone that represents the starting of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.EndMilestone">
            <summary>
            The milestone that represents the ending point of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.HasStartTime">
            <summary>
            True if the time period has a determinate start time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.HasEndTime">
            <summary>
            True if the time period has a determinate end time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.ITimePeriod.HasDuration">
            <summary>
            True if the time period has a determinate duration.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.AddRelationship(Highpoint.Sage.Scheduling.TimePeriod.Relationship,Highpoint.Sage.Scheduling.ITimePeriod)">
            <summary>
            Adds a relationship between this time period and some other time period. Shorthand for actually creating the
            relationship and its reciprocal, setting each as the other's reciprocal, and adding them to the appropriate
            milestones.
            </summary>
            <param name="relationship">The dependent relationship.</param>
            <param name="otherTimePeriod">Describes the nature of the relationship.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.ITimePeriod.RemoveRelationship(Highpoint.Sage.Scheduling.TimePeriod.Relationship,Highpoint.Sage.Scheduling.ITimePeriod)">
            <summary>
            Adds a relationship between this time period and some other time period. Shorthand for actually creating the
            relationship and its reciprocal, setting each as the other's reciprocal, and adding them to the appropriate
            milestones.
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="otherTimePeriod">The other time period.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.IMilestone.AddRelationship(Highpoint.Sage.Scheduling.MilestoneRelationship)">
            <summary>
            Adds one to the set of relationships that this milestone has with other milestones.
            </summary>
            <param name="relationship">The new relationship that involves this milestone.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.IMilestone.RemoveRelationship(Highpoint.Sage.Scheduling.MilestoneRelationship)">
            <summary>
            Removes one from the set of relationships that this milestone has with other milestones..
            </summary>
            <param name="relationship">The relationship to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.IMilestone.MoveTo(System.DateTime)">
            <summary>
            Moves the time of this milestone to the specified new DateTime.
            </summary>
            <param name="newDateTime">The new date time.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.IMilestone.MoveBy(System.TimeSpan)">
            <summary>
            Moves the time of this milestone by the amount of time specified.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.IMilestone.DateTime">
            <summary>
            Gets the date &amp; time of this milestone.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.IMilestone.Relationships">
            <summary>
            Gets the relationships that involve this milestone.
            </summary>
            <value>The relationships.</value>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.Milestone">
            <summary>
            Summary description for Milestone.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Milestone.#ctor(System.DateTime)">
            <summary>
            Creates and initializes a new simple instance of the <see cref="T:Highpoint.Sage.Scheduling.Milestone"/> class set to a specific date &amp; time.
            </summary>
            <param name="dateTime">The date &amp; time.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Milestone.#ctor(System.String,System.Guid,System.DateTime)">
            <summary>
            Creates and initializes a new simple instance of the <see cref="T:Highpoint.Sage.Scheduling.Milestone"/> class set to a specific date &amp; time, and
            with a specified name and guid.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Milestone.#ctor(System.String,System.Guid,System.DateTime,System.Boolean)">
            <summary>
            Creates and initializes a new simple instance of the <see cref="T:Highpoint.Sage.Scheduling.Milestone"/> class set to a specific date &amp; time, and
            with a specified name and guid. This constructor also allows the newly created milestone to be initially active.
            </summary>
            <param name="name">The name.</param>
            <param name="guid">The GUID.</param>
            <param name="dateTime">The date time.</param>
            <param name="active">if set to <c>true</c> this milestone is initially active.</param>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.Milestone.Relationships">
            <summary>
            Gets the relationships that involve this milestone.
            </summary>
            <value>The relationships.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Milestone.MoveTo(System.DateTime)">
            <summary>
            Moves the time of this milestone to the specified new DateTime.
            </summary>
            <param name="newDateTime">The new date time.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.Milestone.MoveBy(System.TimeSpan)">
            <summary>
            Moves the time of this milestone by the amount of time specified.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.Milestone.DateTime">
            <summary>
            Gets the date &amp; time of this milestone.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.Milestone._MilestoneMovementManager">
            <summary>
            The MilestoneMovementManager class is responsible for moving a requested milestone, and performing all inferred resultant movements.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.RelationshipType">
            <summary>
            Describes the relationship between two milestones, a dependent and an independent.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.RelationshipType.LTE">
            <summary>
            
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.MilestoneRelationship">
            <summary>
            This is an abstract class from which all MilestoneRelationships are derived.<b></b>
            A MilestoneRelationship represents a relationship between a dependent milestone
            such as "Oven Heatup Finishes" and an independent one such as "Bake Cookies."
            In this case, the relationship would be a MilestoneRelationship_GTE(heatupDone,startBaking);<b></b>
            meaning that if the heatupDone milestone is changed, then the startBaking milestone will
            also be adjusted, if the change resulted in startBaking occurring before heatupDone.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.MilestoneRelationship.m_dependent">
            <summary>
            The dependent milestone affected by this milestone.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.MilestoneRelationship.m_independent">
            <summary>
            The independent milestone monitored by this milestone.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.MilestoneRelationship.m_reciprocals">
            <summary>
            A list of the reciprocal relationships to this relationship.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.#ctor(Highpoint.Sage.Scheduling.IMilestone,Highpoint.Sage.Scheduling.IMilestone)">
            <summary>
            Imposes changes on the dependent milestone, if the independent one changes.
            </summary>
            <param name="independent">The one that might be changed to kick off this rule.</param>
            <param name="dependent">The one upon which a resulting change is imposed by this rule.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.Detach">
            <summary>
            Detaches this relationship from the two milestones.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship.Dependent">
            <summary>
            Gets the dependent milestone.
            </summary>
            <value>The dependent milestone.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship.Independent">
            <summary>
            Gets the independent milestone.
            </summary>
            <value>The independent milestone.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Highpoint.Sage.Scheduling.MilestoneRelationship"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.Reaction(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            Models a reaction to a movement of the independent milestone, and provides minimum and maximum acceptable
            DateTime values for the dependent milestone.
            </summary>
            <param name="independentNewValue">The independent new value.</param>
            <param name="minDateTime">The minimum acceptable DateTime value for the dependent milestone.</param>
            <param name="maxDateTime">The maximum acceptable DateTime value for the dependent milestone.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.PushEnabled(System.Boolean)">
            <summary>
            Pushes the enabled state of this relationship.
            </summary>
            <param name="newValue">if set to <c>true</c> [new value].</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.PopEnabled">
            <summary>
            Pops the enabled state of this relationship.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship.Reciprocal">
            <summary>
            Gets a relationship that is the reciprocal, if applicable, of this one. If there is no reciprocal,
            then this returns null.
            </summary>
            <value>The reciprocal.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.AddReciprocal(Highpoint.Sage.Scheduling.MilestoneRelationship)">
            <summary>
            A reciprocal is a secondary relationship that should not fire if this one fired.
            A good example is a strut where one strut pins A to 5 mins after B, and another pins B to
            5 mins before A.
            </summary>
            <param name="reciprocal">The reciprocal relationship.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.RemoveReciprocal(Highpoint.Sage.Scheduling.MilestoneRelationship)">
            <summary>
            Removes the specified reciprocal relationship from this relationship.
            </summary>
            <param name="reciprocal">The reciprocal.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.ClearReciprocal">
            <summary>
            Clears the reciprocal relationships.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship.Reciprocals">
            <summary>
            Gets the reciprocal relationships.
            </summary>
            <value>The reciprocals.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.AssessInitialCorrectnessForCtor">
            <summary>
            Assesses the initial satisfaction of this relationship for ctor.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.IsSatisfied">
            <summary>
            Determines whether this relationship is currently satisfied.
            </summary>
            <returns>
            	<c>true</c> if this instance is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut">
            <summary>
            Ensures that the dependent is always at the same offset to the independent as when it was initially established.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.Reciprocal">
            <summary>
            Gets a relationship that is the reciprocal, if applicable, of this one. If there is no reciprocal,
            then this returns null.
            </summary>
            <value>The reciprocal.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.IsSatisfied">
            <summary>
            Determines whether this relationship is currently satisfied.
            </summary>
            <returns>
            	<c>true</c> if this instance is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.Reaction(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            Models a reaction to a movement of the independent milestone, and provides minimum and maximum acceptable
            DateTime values for the dependent milestone.
            </summary>
            <param name="independentNewValue">The independent new value.</param>
            <param name="minDateTime">The minimum acceptable DateTime value for the dependent milestone.</param>
            <param name="maxDateTime">The maximum acceptable DateTime value for the dependent milestone.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Strut.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE">
            <summary>
            Ensures that the dependent is always at a less-than-or-equal time to the independent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.Reaction(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            Models a reaction to a movement of the independent milestone, and provides minimum and maximum acceptable
            DateTime values for the dependent milestone.
            </summary>
            <param name="independentNewValue">The independent new value.</param>
            <param name="minDateTime">The minimum acceptable DateTime value for the dependent milestone.</param>
            <param name="maxDateTime">The maximum acceptable DateTime value for the dependent milestone.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.IsSatisfied">
            <summary>
            Determines whether this relationship is currently satisfied.
            </summary>
            <returns>
            	<c>true</c> if this instance is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.Reciprocal">
            <summary>
            Gets a relationship that is the reciprocal, if applicable, of this one. If there is no reciprocal,
            then this returns null.
            </summary>
            <value>The reciprocal.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_LTE.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE">
            <summary>
            Ensures that the dependent is always at a greater-than-or-equal time to the independent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.Reaction(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            Models a reaction to a movement of the independent milestone, and provides minimum and maximum acceptable
            DateTime values for the dependent milestone.
            </summary>
            <param name="independentNewValue">The independent new value.</param>
            <param name="minDateTime">The minimum acceptable DateTime value for the dependent milestone.</param>
            <param name="maxDateTime">The maximum acceptable DateTime value for the dependent milestone.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.IsSatisfied">
            <summary>
            Determines whether this relationship is currently satisfied.
            </summary>
            <returns>
            	<c>true</c> if this instance is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.Reciprocal">
            <summary>
            Gets a relationship that is the reciprocal, if applicable, of this one. If there is no reciprocal,
            then this returns null.
            </summary>
            <value>The reciprocal.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_GTE.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin">
            <summary>
            Ensures that the independent milestone is not permitted to move.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.Reaction(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            Models a reaction to a movement of the independent milestone, and provides minimum and maximum acceptable
            DateTime values for the dependent milestone.
            </summary>
            <param name="independentNewValue">The independent new value.</param>
            <param name="minDateTime">The minimum acceptable DateTime value for the dependent milestone.</param>
            <param name="maxDateTime">The maximum acceptable DateTime value for the dependent milestone.</param>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.Reciprocal">
            <summary>
            Gets a relationship that is the reciprocal, if applicable, of this one. If there is no reciprocal,
            then this returns null.
            </summary>
            <value>The reciprocal.</value>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.IsSatisfied">
            <summary>
            Determines whether this relationship is currently satisfied.
            </summary>
            <returns>
            	<c>true</c> if this instance is satisfied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.MilestoneRelationship_Pin.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.TimeAdjustmentMode">
            <summary>
            Three ways of adjusting start, duration and end parameters on a time
            period. These three parameters are all dependent on each other, so
            when adjusting one of them, this enum tells us which of the other two
            should be held constant.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.None">
            <summary>
            No inferences are made. Responsibility for the coherent management and use
            of the three underlying data points lies with the user.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.FixedStart">
            <summary>
            Fixed start implies that if either the duration or finish time are modified,
            the other of these two will be adjusted to ensure that the three data points
            are consistent, but the start time does not change.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.FixedDuration">
            <summary>
            Fixed duration implies that if either the start or finish time are modified,
            the other of these two will be adjusted to ensure that the three data points
            are consistent, but the duration does not change.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.FixedEnd">
            <summary>
            Fixed end implies that if either the start or duration time are modified,
            the other of these two will be adjusted to ensure that the three data points
            are consistent, but the end time does not change.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.InferStartTime">
            <summary>
            InferStartTime implies that either duration or end time may be set, and the
            start time will be inferred from the duration and end times. Setting of the
            start time while in this mode is not legal. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.InferDuration">
            <summary>
            InferDuration implies that either start time or end time may be set, and the
            duration will be inferred from the start and end times. Setting of the
            duration while in this mode is not legal. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.InferEndTime">
            <summary>
            InferEndTime implies that either start time or duration may be set, and the
            end time will be inferred from the start time and duration. Setting of the
            end time while in this mode is not legal.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimeAdjustmentMode.Locked">
            <summary>
            Prohibits any adjustment of the time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.AdjustmentMode">
            <summary>
            This property determines how the triad of start, duration &amp; finish are kept up-to-date
            as individual properties are set and changed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.TimePeriod.PushAdjustmentMode(Highpoint.Sage.Scheduling.TimeAdjustmentMode)">
            <summary>
            Pushes the current time period adjustment mode onto a stack, substituting a provided mode. This
            must be paired with a corresponding Pop operation.
            </summary>
            <param name="tam">The time period adjustment mode that is to temporarily take the place of the current one.</param>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.TimePeriod.PopAdjustmentMode">
            <summary>
            Pops the previous time period adjustment mode off a stack, and sets this Time Period's adjustment mode to that value.
            </summary>
            <returns>The newly-popped time period adjustment mode.</returns>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.StartMilestone">
            <summary>
            The milestone that represents the starting of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.EndMilestone">
            <summary>
            The milestone that represents the ending point of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.StartTime">
            <summary>
            Reads and writes the Start Time. When writing the start time, leaves the
            end time fixed, and adjusts duration.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.EndTime">
            <summary>
            Reads and writes the End Time. When writing the end time, leaves the
            start time fixed, and adjusts duration.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.Duration">
            <summary>
            Gets the duration of the time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.HasStartTime">
            <summary>
            True if the time period has a determinate start time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.HasEndTime">
            <summary>
            True if the time period has a determinate end time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriod.HasDuration">
            <summary>
            True if the time period has a determinate duration.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.TimePeriod.ClearStartTime">
            <summary>
            Sets the start time to an indeterminate time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.TimePeriod.ClearEndTime">
            <summary>
            Sets the end time to an indeterminate time.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Scheduling.TimePeriod.ClearDuration">
            <summary>
            Sets the duration to an indeterminate timespan.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.StartTime">
            <summary>
            Gets the start time of the time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.EndTime">
            <summary>
            Gets the end time of the time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.Duration">
            <summary>
            Gets the duration of the time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.HasStartTime">
            <summary>
            True if the time period has a determinate start time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.HasEndTime">
            <summary>
            True if the time period has a determinate end time.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.HasDuration">
            <summary>
            True if the time period has a determinate duration.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.StartMilestone">
            <summary>
            The milestone that represents the starting of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.EndMilestone">
            <summary>
            The milestone that represents the ending point of this time period.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.AdjustmentMode">
            <summary>
            Determines what inferences are to be made about the other two settings when one
            of the settings (start, duration, finish times) is changed.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.BreadthFirstEnumerable">
            <summary>
            Returns an iterator that traverses the descendant payloads breadth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.DepthFirstEnumerable">
            <summary>
            Returns an iterator that traverses the descendant payloads depth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="P:Highpoint.Sage.Scheduling.TimePeriodEnvelope.Children">
            <summary>
            Gets the list of children. Do not modify this.
            </summary>
            <value>The children.</value>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.Enumerable`1">
            <summary>
            Class Enumerable provides a wrapper for an IEnumerable of T.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="T:Highpoint.Sage.Scheduling.TimePeriodPart">
            <summary>
            Declares the property that is being changed in a TimePeriodAdjustment. By
            examining the TimeAdjustmentMode of the target time period, the user can
            determine what changed/will change.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimePeriodPart.StartTime">
            <summary>
            The start time is being changed. 
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimePeriodPart.Duration">
            <summary>
            The duration is being changed.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Scheduling.TimePeriodPart.EndTime">
            <summary>
            The end time is being changed.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Scheduling.TimePeriodSorter">
            <summary>
            An implementer of IComparer&lt;TimePeriod&gt; that can be used to sort a collection of
            ITimePeriodReadOnly objects. The 'sortOnWhat' parameter allows the
            user to choose whether to sort on start time, duration or end time.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.CompoundComparer">
            <summary>
            Provided with an array of Comparers, this comparer produces a comarison value
            that allows a list to be sorted on first one key (defined by the first element
            in the array), then by another key (defined by the second element in the array),
            and so on. There is no limit to the number of comparers that may be provided.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.CompoundComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Creates a compound comparer that sorts on the keys whose comparers are
            provided in the array that is passed to the constructor.
            </summary>
            <param name="comparers">A param list of IComparers that will be used, in
            the provided order, to sort the elements passed to this IComparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.CompoundComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects according to the rules embodied in the comparers around
            which this CompoundComparer was created.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.Crypto">
            <summary>
            A class of static Cryptography helper functions.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.EncryptString(System.String,System.String)">
            <summary>
            Triple-DES encrypts the plain text using the provided key.
            </summary>
            <param name="plainText">The plain text to be encrypted.</param>
            <param name="key">The key to use in encrypting the text.</param>
            <returns>The cipher text string resultant from the encryption.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.DecryptString(System.String,System.String)">
            <summary>
            Triple-DES decrypts the cipher text using the provided key.
            </summary>
            <param name="cipherText">The cipher text to be decrypted.</param>
            <param name="key">The key to use in decrypting the text.</param>
            <returns>The plain text resultant from the decryption.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.ComputeHash(System.String,System.String,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            
            </summary>
            <param name="plainText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="plainText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="hashValue">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.GetKeyBlob">
            <summary>
            Gets the key Blob.
            </summary>
            <returns>The key Blob.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.GenerateSignature(System.Byte[],System.Byte[])">
            <summary>
            Generates the signature.
            </summary>
            <param name="hashValue">The hash value.</param>
            <param name="cspKeyBlob">The CSP key Blob of the signer.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.ValidateSignature(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Validates the signature.
            </summary>
            <param name="hashValue">The hash value.</param>
            <param name="signedHashValue">The signed hash value.</param>
            <param name="cspKeyBlob">The CSP key Blob of the asserted signer.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.GenerateFullKeyPair">
            <summary>
            Generates a 1024 bit RSA key pair string.
            </summary>
            <returns>A 1024 bit RSA key pair string.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.GenerateFullKeyPair(System.Int32)">
            <summary>
            Generates a RSA key pair string.
            </summary>
            <param name="keySize">Size of the key.</param>
            <returns>A 1024 bit RSA key pair string.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Crypto.PublicKeyOnly(System.String)">
            <summary>
            Accepts a full keyPair string (as generated by the GenerateKeyPair API) and returns a keyPair string without the private key.
            </summary>
            <param name="fullKeyPair">The full key pair.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.DateTimeOperations">
            <summary>
            A utility class that contains some useful operations pertaining to DateTime objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DateTimeOperations.Max(System.DateTime,System.DateTime)">
            <summary>
            Gets the later of the two DateTime objects.
            </summary>
            <param name="dt1">One DateTime.</param>
            <param name="dt2">The other DateTime.</param>
            <returns>The later of the two DateTime objects.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.DateTimeOperations.Min(System.DateTime,System.DateTime)">
            <summary>
            Gets the earlier of the two DateTime objects.
            </summary>
            <param name="dt1">One DateTime.</param>
            <param name="dt2">The other DateTime.</param>
            <returns>The earlier of the two DateTime objects.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.DateTimeOperations.SecondsSinceTheEpoch">
            <summary>
            Gets the seconds since the epoch (January 1, 1970).
            </summary>
            <value>The seconds since the epoch.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.TimeSpanOperations">
            <summary>
            A utility class that contains some useful operations pertaining to TimeSpan objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TimeSpanOperations.Max(System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the longer of the two TimeSpan objects.
            </summary>
            <param name="ts1">One TimeSpan.</param>
            <param name="ts2">The other TimeSpan.</param>
            <returns>The longer of the two TimeSpan objects.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TimeSpanOperations.Min(System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the shorter of the two TimeSpan objects.
            </summary>
            <param name="ts1">One TimeSpan.</param>
            <param name="ts2">The other TimeSpan.</param>
            <returns>The shorter of the two TimeSpan objects.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TimeSpanOperations.ToInformalString(System.TimeSpan)">
            <summary>
            Returns the timespan as d days, h hours, m minutes and s seconds. Starting at days, any field that's zero is omitted.
            </summary>
            <param name="ts">The timeSpan.</param>
            <returns>The Informal TimeSpan.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.DictionaryOperations">
            <summary>
            A class of helper Operations focused on Dictionaries. This is an old class, kept for backward compatibility.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.DictionaryOperations.DictionaryEntryByKeySorter">
            <summary>
            Comparer that can be used to sort Dictionary Entries by their keys' order using the System.Collections.Comparer.Default comparer.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DictionaryOperations.DictionaryEntryByKeySorter.Compare(System.Object,System.Object)">
            <summary>
            Compares two DictionaryEntry objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">Neither x nor y implements the <see cref="T:System.IComparable"></see> interface.-or- x and y are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.DictionaryOperations.DumpDictionary(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a string containing the contents of a dictionary.
            </summary>
            <param name="name">The name to be given to this dictionary in the output.</param>
            <param name="dict">The dictionary to dump.</param>
            <returns>A string containing the contents of the specified dictionary.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.DirectoryOperations">
            <summary>
            A Utility class for convenience operations pertaining to directories.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DirectoryOperations.GetAppDataDir(System.String)">
            <summary>
            Gets the named destination directory under the app data dir for this application, ensuring that it exists.
            </summary>
            <param name="subDir">The desired subdirectory. If this is null or empty, the argument is ignored.</param>
            <returns>
            The full path name, ending in the DirectorySeparatorChar.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.IDoubleTracker">
            <summary>
            An object implementing this interface tracks the values that a double takes on, 
            registering its initial, minimum, maximum, and final values. This interface is
            just the public face of the bookkeeping. See class DoubleTracker.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IDoubleTracker.InitialValue">
            <summary>
            The first recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IDoubleTracker.FinalValue">
            <summary>
            The last recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IDoubleTracker.MinValue">
            <summary>
            The minimum recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IDoubleTracker.MaxValue">
            <summary>
            The maximum recorded value of the double.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.DoubleTracker">
            <summary>
            An object of this class tracks the values that a double takes on, recording its initial,
            minimum, maximum, and final values. It relies on the user of the object to implement a
            watcher on the double of interest, that registers a new double value with this object
            whenever the double changes.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.#ctor">
            <summary>
            Creates a DoubleTracker.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.Reset">
            <summary>
            Resets a DoubleTracker so that the initial and final values are double.NaN, the maximum
            value is double.MinValue, and the minimum value is double.MaxValue.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Resets a DoubleTracker so that the initial and final values are double.NaN, the maximum
            value is double.MinValue, and the minimum value is double.MaxValue.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.Register(System.Double)">
            <summary>
            Presents a candidate double to this tracker for consideration. Initial, min, max and final
            value records are updated if appropriate, based on existing values, and this value.
            </summary>
            <param name="candidate">The new double value of the underlying field or data.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.DoubleTracker.InitialValue">
            <summary>
            The first recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.DoubleTracker.FinalValue">
            <summary>
            The last recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.DoubleTracker.MinValue">
            <summary>
            The minimum recorded value of the double.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.DoubleTracker.MaxValue">
            <summary>
            The maximum recorded value of the double.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.ToString">
            <summary>
            Provides a string representation of this DoubleTracker, of the form [initial/minimum/maximum/final]
            </summary>
            <returns>A string representation of this DoubleTracker, of the form [initial/minimum/maximum/final]</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.DoubleTracker.FromString(System.String)">
            <summary>
            Initializes this double tracker from a string similar to the one generated by ToString().
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1">
            <summary>
            The EventedList class provides all of the standard List capabilities as well as the ability to
            emit events when the list changes its contents for whatever reason.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.ListEvent">
            <summary>
            Signature of events that pertain only to an EventedList.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.ItemEvent">
            <summary>
            Signature of events that pertain to an EventedList and one of its items.
            </summary>
            <param name="list">The list.</param>
            <param name="item"></param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.ItemsEvent">
            <summary>
            Signature of events that pertain to an EventedList an old item and a new item - preesumably items added to, or removed from, that list.
            </summary>
            <param name="list">The list.</param>
            <param name="oldItem"></param>
            <param name="newItem"></param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.CollectionEvent">
            <summary>
            Signature of events that pertain to an EventedList and a collection of items related to that list.
            </summary>
            <param name="list">The list.</param>
            <param name="collection"></param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.PredicateEvent">
            <summary>
            Signature of events that pertain only to an EventedList and a predicate to be applied to items in that list.
            </summary>
            <param name="list">The list.</param>
            <param name="match"></param>
        </member>
        <member name="T:Highpoint.Sage.Utility.EventedList`1.RangeEvent">
            <summary>
            Signature of events that pertain to an EventedList and a numeric range of entries in that list.
            </summary>
            <param name="list">The list.</param>
            <param name="startIndex">The start index of the range.</param>
            <param name="count">The number of entries in the range.</param>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToAddItem">
            <summary>
            Fired when the list is about to add an item.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AddedItem">
            <summary>
            Fired when the list has just added an item.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToRemoveItem">
            <summary>
            Fired when the list is about to remove an item.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.RemovedItem">
            <summary>
            Fired when the list has just removed an item.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToReplaceItem">
            <summary>
            Fired when the list is about to replace one item with another.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.ReplacedItem">
            <summary>
            Fired when the list has just replaced one item with another.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToAddItems">
            <summary>
            Fired when the list is about to add some items.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AddedItems">
            <summary>
            Fired when the list has just added some items.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToRemoveItems">
            <summary>
            Fired when the list is about to remove some of its items.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.RemovedItems">
            <summary>
            Fired when the list has just had some of its items removed.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToRemoveRange">
            <summary>
            Fired when the list is about to remove a range of elements.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.RemovedRange">
            <summary>
            Fired when the list has just had a range of elements removed.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.AboutToClear">
            <summary>
            Fired when the list is about to be cleared of all of its members.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.Cleared">
            <summary>
            Fired when the list has just been cleared.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.EventedList`1.ContentsChanged">
            <summary>
            Fired when the list has just had its contents changed.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.#ctor">
            <summary>
                Initializes a new instance of the System.Collections.Generic.List&lt;T&gt; class
                that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.#ctor(System.Int32)">
             Summary:
                 Initializes a new instance of the System.Collections.Generic.List&lt;T&gt; class
                 that is empty and has the specified initial capacity.
            
             Parameters:
               capacity:
                 The number of elements that the new list can initially store.
            
             <summary>
             Exceptions:
               System.ArgumentOutOfRangeException:
                 capacity is less than 0.
             </summary>
             <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.EventedList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1"></see>. The value can be null for reference types.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1"></see>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all.
            </summary>
            <param name="match">The match.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count"></see>.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
            <exception cref="T:System.ArgumentException">index and count do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1"></see>.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.Generic.List`1"></see>.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.EventedList`1.Item(System.Int32)">
             <summary>
             Gets or sets the &lt;T&gt; at the specified index.
             Parameters:
               index:
                 The zero-based index of the element to get or set.
            
             Returns:
                 The element at the specified index.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-index is equal to or greater than System.Collections.Generic.List&lt;T&gt;.Count.
             </summary>
             <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.Generic.List`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than <see cref="P:System.Collections.Generic.List`1.Count"></see>.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1"></see>. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is greater than <see cref="P:System.Collections.Generic.List`1.Count"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">collection is null.</exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.EventedList`1.Capacity">
             Summary:
                 Gets or sets the total number of elements the internal data structure can
                 hold without resizing.
            
             Returns:
                 The number of elements that the System.Collections.Generic.List&lt;T&gt; can contain
                 before resizing is required.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 System.Collections.Generic.List&lt;T&gt;.Capacity is set to a value that is less
                 than System.Collections.Generic.List&lt;T&gt;.Count.
        </member>
        <member name="P:Highpoint.Sage.Utility.EventedList`1.Count">
            
             Summary:
                 Gets the number of elements actually contained in the System.Collections.Generic.List&lt;T&gt;.
            
             Returns:
                 The number of elements actually contained in the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.AsReadOnly">
            
             Summary:
                 Returns a read-only System.Collections.Generic.IList&lt;T&gt; wrapper for the current
                 collection.
            
             Returns:
                 A System.Collections.Generic.ReadOnlyCollection`1 that acts as a read-only
                 wrapper around the current System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.BinarySearch(`0)">
            
             Summary:
                 Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element
                 using the default comparer and returns the zero-based index of the element.
            
             Parameters:
               item:
                 The object to locate. The value can be null for reference types.
            
             Returns:
                 The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,
                 if item is found; otherwise, a negative number that is the bitwise complement
                 of the index of the next element that is larger than item or, if there is
                 no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            
             Exceptions:
               System.InvalidOperationException:
                 The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot
                 find an implementation of the System.IComparable&lt;T&gt; generic interface or
                 the System.IComparable interface for type T.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Searches the entire sorted System.Collections.Generic.List&lt;T&gt; for an element
                 using the specified comparer and returns the zero-based index of the element.
            
             Parameters:
               item:
                 The object to locate. The value can be null for reference types.
            
               comparer:
                 The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing
                 elements.-or-null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
            
             Returns:
                 The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,
                 if item is found; otherwise, a negative number that is the bitwise complement
                 of the index of the next element that is larger than item or, if there is
                 no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            
             Exceptions:
               System.InvalidOperationException:
                 comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default
                 cannot find an implementation of the System.IComparable&lt;T&gt; generic interface
                 or the System.IComparable interface for type T.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Searches a range of elements in the sorted System.Collections.Generic.List&lt;T&gt;
                 for an element using the specified comparer and returns the zero-based index
                 of the element.
            
             Parameters:
               count:
                 The length of the range to search.
            
               item:
                 The object to locate. The value can be null for reference types.
            
               index:
                 The zero-based starting index of the range to search.
            
               comparer:
                 The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing
                 elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
            
             Returns:
                 The zero-based index of item in the sorted System.Collections.Generic.List&lt;T&gt;,
                 if item is found; otherwise, a negative number that is the bitwise complement
                 of the index of the next element that is larger than item or, if there is
                 no larger element, the bitwise complement of System.Collections.Generic.List&lt;T&gt;.Count.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-count is less than 0.
            
               System.InvalidOperationException:
                 comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default
                 cannot find an implementation of the System.IComparable&lt;T&gt; generic interface
                 or the System.IComparable interface for type T.
            
               System.ArgumentException:
                 index and count do not denote a valid range in the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Contains(`0)">
            
             Summary:
                 Determines whether an element is in the System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
             Returns:
                 true if item is found in the System.Collections.Generic.List&lt;T&gt;; otherwise,
                 false.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.ConvertAll``1(System.Converter{`0,``0})">
            
             Summary:
                 Converts the elements in the current System.Collections.Generic.List&lt;T&gt; to
                 another type, and returns a list containing the converted elements.
            
             Parameters:
               converter:
                 A System.Converter&lt;TInput,TOutput&gt; delegate that converts each element from
                 one type to another type.
            
             Returns:
                 A System.Collections.Generic.List&lt;T&gt; of the target type containing the converted
                 elements from the current System.Collections.Generic.List&lt;T&gt;.
            
             Exceptions:
               System.ArgumentNullException:
                 converter is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.CopyTo(`0[])">
            
             Summary:
                 Copies the entire System.Collections.Generic.List&lt;T&gt; to a compatible one-dimensional
                 array, starting at the beginning of the target array.
            
             Parameters:
               array:
                 The one-dimensional System.Array that is the destination of the elements
                 copied from System.Collections.Generic.List&lt;T&gt;. The System.Array must have
                 zero-based indexing.
            
             Exceptions:
               System.ArgumentException:
                 The number of elements in the source System.Collections.Generic.List&lt;T&gt; is
                 greater than the number of elements that the destination array can contain.
            
               System.ArgumentNullException:
                 array is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.CopyTo(`0[],System.Int32)">
            
             Summary:
                 Copies the entire System.Collections.Generic.List&lt;T&gt; to a compatible one-dimensional
                 array, starting at the specified index of the target array.
            
             Parameters:
               array:
                 The one-dimensional System.Array that is the destination of the elements
                 copied from System.Collections.Generic.List&lt;T&gt;. The System.Array must have
                 zero-based indexing.
            
               arrayIndex:
                 The zero-based index in array at which copying begins.
            
             Exceptions:
               System.ArgumentException:
                 arrayIndex is equal to or greater than the length of array.-or-The number
                 of elements in the source System.Collections.Generic.List&lt;T&gt; is greater than
                 the available space from arrayIndex to the end of the destination array.
            
               System.ArgumentOutOfRangeException:
                 arrayIndex is less than 0.
            
               System.ArgumentNullException:
                 array is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            
             Summary:
                 Copies a range of elements from the System.Collections.Generic.List&lt;T&gt; to
                 a compatible one-dimensional array, starting at the specified index of the
                 target array.
            
             Parameters:
               array:
                 The one-dimensional System.Array that is the destination of the elements
                 copied from System.Collections.Generic.List&lt;T&gt;. The System.Array must have
                 zero-based indexing.
            
               count:
                 The number of elements to copy.
            
               arrayIndex:
                 The zero-based index in array at which copying begins.
            
               index:
                 The zero-based index in the source System.Collections.Generic.List&lt;T&gt; at
                 which copying begins.
            
             Exceptions:
               System.ArgumentNullException:
                 array is null.
            
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-arrayIndex is less than 0.-or-count is less than
                 0.
            
               System.ArgumentException:
                 index is equal to or greater than the System.Collections.Generic.List&lt;T&gt;.Count
                 of the source System.Collections.Generic.List&lt;T&gt;.-or-arrayIndex is equal
                 to or greater than the length of array.-or-The number of elements from index
                 to the end of the source System.Collections.Generic.List&lt;T&gt; is greater than
                 the available space from arrayIndex to the end of the destination array.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Exists(System.Predicate{`0})">
            
             Summary:
                 Determines whether the System.Collections.Generic.List&lt;T&gt; contains elements
                 that match the conditions defined by the specified predicate.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements
                 to search for.
            
             Returns:
                 true if the System.Collections.Generic.List&lt;T&gt; contains one or more elements
                 that match the conditions defined by the specified predicate; otherwise,
                 false.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Find(System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the first occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The first element that matches the conditions defined by the specified predicate,
                 if found; otherwise, the default value for type T.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindAll(System.Predicate{`0})">
            
             Summary:
                 Retrieves the all the elements that match the conditions defined by the specified
                 predicate.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the elements
                 to search for.
            
             Returns:
                 A System.Collections.Generic.List&lt;T&gt; containing all the elements that match
                 the conditions defined by the specified predicate, if found; otherwise, an
                 empty System.Collections.Generic.List&lt;T&gt;.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindIndex(System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the first occurrence within
                 the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the first occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindIndex(System.Int32,System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the first occurrence within
                 the range of elements in the System.Collections.Generic.List&lt;T&gt; that extends
                 from the specified index to the last element.
            
             Parameters:
               startIndex:
                 The zero-based starting index of the search.
            
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the first occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 startIndex is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.
            
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the first occurrence within
                 the range of elements in the System.Collections.Generic.List&lt;T&gt; that starts
                 at the specified index and contains the specified number of elements.
            
             Parameters:
               count:
                 The number of elements in the section to search.
            
               startIndex:
                 The zero-based starting index of the search.
            
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the first occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 startIndex is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.-or-count
                 is less than 0.-or-startIndex and count do not specify a valid section in
                 the System.Collections.Generic.List&lt;T&gt;.
            
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindLast(System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the last occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The last element that matches the conditions defined by the specified predicate,
                 if found; otherwise, the default value for type T.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindLastIndex(System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the last occurrence within
                 the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the last occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the last occurrence within
                 the range of elements in the System.Collections.Generic.List&lt;T&gt; that extends
                 from the first element to the specified index.
            
             Parameters:
               startIndex:
                 The zero-based starting index of the backward search.
            
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the last occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 startIndex is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.
            
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            
             Summary:
                 Searches for an element that matches the conditions defined by the specified
                 predicate, and returns the zero-based index of the last occurrence within
                 the range of elements in the System.Collections.Generic.List&lt;T&gt; that contains
                 the specified number of elements and ends at the specified index.
            
             Parameters:
               count:
                 The number of elements in the section to search.
            
               startIndex:
                 The zero-based starting index of the backward search.
            
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
                 to search for.
            
             Returns:
                 The zero-based index of the last occurrence of an element that matches the
                 conditions defined by match, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 startIndex is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.-or-count
                 is less than 0.-or-startIndex and count do not specify a valid section in
                 the System.Collections.Generic.List&lt;T&gt;.
            
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.ForEach(System.Action{`0})">
            
             Summary:
                 Performs the specified action on each element of the System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               action:
                 The System.Action&lt;T&gt; delegate to perform on each element of the System.Collections.Generic.List&lt;T&gt;.
            
             Exceptions:
               System.ArgumentNullException:
                 action is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            
             Summary:
                 Returns an enumerator that iterates through the System.Collections.Generic.List&lt;T&gt;.
            
             Returns:
                 A System.Collections.Generic.List&lt;T&gt;.Enumerator for the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.GetRange(System.Int32,System.Int32)">
            
             Summary:
                 Creates a shallow copy of a range of elements in the source System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               count:
                 The number of elements in the range.
            
               index:
                 The zero-based System.Collections.Generic.List&lt;T&gt; index at which the range
                 starts.
            
             Returns:
                 A shallow copy of a range of elements in the source System.Collections.Generic.List&lt;T&gt;.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-count is less than 0.
            
               System.ArgumentException:
                 index and count do not denote a valid range of elements in the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.IndexOf(`0)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 first occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
             Returns:
                 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List&lt;T&gt;,
                 if found; otherwise, –1.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.IndexOf(`0,System.Int32)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 first occurrence within the range of elements in the System.Collections.Generic.List&lt;T&gt;
                 that extends from the specified index to the last element.
            
             Parameters:
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
               index:
                 The zero-based starting index of the search.
            
             Returns:
                 The zero-based index of the first occurrence of item within the range of
                 elements in the System.Collections.Generic.List&lt;T&gt; that extends from index
                 to the last element, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.IndexOf(`0,System.Int32,System.Int32)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 first occurrence within the range of elements in the System.Collections.Generic.List&lt;T&gt;
                 that starts at the specified index and contains the specified number of elements.
            
             Parameters:
               count:
                 The number of elements in the section to search.
            
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
               index:
                 The zero-based starting index of the search.
            
             Returns:
                 The zero-based index of the first occurrence of item within the range of
                 elements in the System.Collections.Generic.List&lt;T&gt; that starts at index and
                 contains count number of elements, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.-or-count
                 is less than 0.-or-index and count do not specify a valid section in the
                 System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.LastIndexOf(`0)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 last occurrence within the entire System.Collections.Generic.List&lt;T&gt;.
            
             Parameters:
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
             Returns:
                 The zero-based index of the last occurrence of item within the entire the
                 System.Collections.Generic.List&lt;T&gt;, if found; otherwise, –1.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.LastIndexOf(`0,System.Int32)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 last occurrence within the range of elements in the System.Collections.Generic.List&lt;T&gt;
                 that extends from the first element to the specified index.
            
             Parameters:
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
               index:
                 The zero-based starting index of the backward search.
            
             Returns:
                 The zero-based index of the last occurrence of item within the range of elements
                 in the System.Collections.Generic.List&lt;T&gt; that extends from the first element
                 to index, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            
             Summary:
                 Searches for the specified object and returns the zero-based index of the
                 last occurrence within the range of elements in the System.Collections.Generic.List&lt;T&gt;
                 that contains the specified number of elements and ends at the specified
                 index.
            
             Parameters:
               count:
                 The number of elements in the section to search.
            
               item:
                 The object to locate in the System.Collections.Generic.List&lt;T&gt;. The value
                 can be null for reference types.
            
               index:
                 The zero-based starting index of the backward search.
            
             Returns:
                 The zero-based index of the last occurrence of item within the range of elements
                 in the System.Collections.Generic.List&lt;T&gt; that contains count number of elements
                 and ends at index, if found; otherwise, –1.
            
             Exceptions:
               System.ArgumentOutOfRangeException:
                 index is outside the range of valid indexes for the System.Collections.Generic.List&lt;T&gt;.-or-count
                 is less than 0.-or-index and count do not specify a valid section in the
                 System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Reverse">
            
             Summary:
                 Reverses the order of the elements in the entire System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Reverse(System.Int32,System.Int32)">
            
             Summary:
                 Reverses the order of the elements in the specified range.
            
             Parameters:
               count:
                 The number of elements in the range to reverse.
            
               index:
                 The zero-based starting index of the range to reverse.
            
             Exceptions:
               System.ArgumentException:
                 index and count do not denote a valid range of elements in the System.Collections.Generic.List&lt;T&gt;.
            
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-count is less than 0.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Sort">
            
             Summary:
                 Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using
                 the default comparer.
            
             Exceptions:
               System.InvalidOperationException:
                 The default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default cannot
                 find an implementation of the System.IComparable&lt;T&gt; generic interface or
                 the System.IComparable interface for type T.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Sort(System.Comparison{`0})">
            
             Summary:
                 Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using
                 the specified System.Comparison&lt;T&gt;.
            
             Parameters:
               comparison:
                 The System.Comparison&lt;T&gt; to use when comparing elements.
            
             Exceptions:
               System.ArgumentException:
                 The implementation of comparison caused an error during the sort. For example,
                 comparison might not return 0 when comparing an item with itself.
            
               System.ArgumentNullException:
                 comparison is null.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Sort(System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using
                 the specified comparer.
            
             Parameters:
               comparer:
                 The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing
                 elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
            
             Exceptions:
               System.ArgumentException:
                 The implementation of comparer caused an error during the sort. For example,
                 comparer might not return 0 when comparing an item with itself.
            
               System.InvalidOperationException:
                 comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default
                 cannot find implementation of the System.IComparable&lt;T&gt; generic interface
                 or the System.IComparable interface for type T.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            
             Summary:
                 Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt;
                 using the specified comparer.
            
             Parameters:
               count:
                 The length of the range to sort.
            
               index:
                 The zero-based starting index of the range to sort.
            
               comparer:
                 The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing
                 elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.
            
             Exceptions:
               System.ArgumentException:
                 index and count do not specify a valid range in the System.Collections.Generic.List&lt;T&gt;.-or-The
                 implementation of comparer caused an error during the sort. For example,
                 comparer might not return 0 when comparing an item with itself.
            
               System.ArgumentOutOfRangeException:
                 index is less than 0.-or-count is less than 0.
            
               System.InvalidOperationException:
                 comparer is null, and the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default
                 cannot find implementation of the System.IComparable&lt;T&gt; generic interface
                 or the System.IComparable interface for type T.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.ToArray">
            
             Summary:
                 Copies the elements of the System.Collections.Generic.List&lt;T&gt; to a new array.
            
             Returns:
                 An array containing copies of the elements of the System.Collections.Generic.List&lt;T&gt;.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.TrimExcess">
            
             Summary:
                 Sets the capacity to the actual number of elements in the System.Collections.Generic.List&lt;T&gt;,
                 if that number is less than a threshold value.
        </member>
        <member name="M:Highpoint.Sage.Utility.EventedList`1.TrueForAll(System.Predicate{`0})">
            
             Summary:
                 Determines whether every element in the System.Collections.Generic.List&lt;T&gt;
                 matches the conditions defined by the specified predicate.
            
             Parameters:
               match:
                 The System.Predicate&lt;T&gt; delegate that defines the conditions to check against
                 the elements.
            
             Returns:
                 true if every element in the System.Collections.Generic.List&lt;T&gt; matches the
                 conditions defined by the specified predicate; otherwise, false. If the list
                 has no elements, the return value is true.
            
             Exceptions:
               System.ArgumentNullException:
                 match is null.
        </member>
        <member name="T:Highpoint.Sage.Utility.EventTimeHistorian">
            <summary>
            An EventTimeHistorian keeps track of the times at which the last 'N' events that were submitted to it
            occurred, and provides the average inter-event duration for those events. Historians with specific
            event-type-related data needs (other than simply the time of occurrence) can inherit from this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventTimeHistorian.#ctor(Highpoint.Sage.SimCore.IExecutive,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.EventTimeHistorian"/> class, tracking the last m events, where
            m is the lowest (2^n)+1 that is greater than numPastEventsTracked. (n is any whole nonnegative number.)
            </summary>
            <param name="exec">The executive that is to be tracked.</param>
            <param name="numPastEventsTracked">The number of past events that will be tracked.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventTimeHistorian.LogEvent">
            <summary>
            Logs the fact that an event was just fired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.EventTimeHistorian.PastEventCapacity">
            <summary>
            Gets the max number of past events that can be tracked.
            </summary>
            <value>The past event capacity.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.EventTimeHistorian.PastEventsReceived">
            <summary>
            Gets the number of past events received.
            </summary>
            <value>The past events received.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.EventTimeHistorian.GetAverageIntraEventDuration(System.Int32)">
            <summary>
            Gets the average intra event duration for the past n events. If n is -1, .
            </summary>
            <param name="numPastEvents">The number of past events to be considered. If -1, then the entire set of tracked events (numPastEventsTracked) is considered.</param>
            <returns>TimeSpan.</returns>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="T:Highpoint.Sage.Utility.Exchange">
            <summary>
            An exchange is a place where objects can post, read and or take tokens, either with a blocking
            or non-blocking call.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.#ctor(Highpoint.Sage.SimCore.IExecutive)">
            <summary>
            Creates a new instance of the <see cref="T:Highpoint.Sage.Utility.Exchange"/> class.
            </summary>
            <param name="exec">The exec.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.Exchange.PermitsDuplicateKeys">
            <summary>
            Gets a value indicating whether this TupleSpace permits multiple Tuples to be posted under the same key. Currently, this will be false.
            </summary>
            <value>
            	<c>true</c> if this TupleSpace permits multiple Tuples to be posted under the same key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.Post(Highpoint.Sage.Utility.ITuple,System.Boolean)">
            <summary>
            Posts the specified tuple. If blocking is true, this call blocks
            the caller's thread until the Tuple is taken from the space by another caller.
            </summary>
            <param name="tuple">The tuple.</param>
            <param name="blocking">if set to <c>true</c> this call blocks
            the caller's thread until the Tuple is taken from the space by another caller..</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.Post(System.Object,System.Object,System.Boolean)">
            <summary>
            Posts a Tuple with the specified key and data. If blocking is true, this call blocks
            the caller's thread until the Tuple is taken from the space by another caller.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <param name="blocking">if set to <c>true</c> [blocking].</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.Read(System.Object,System.Boolean)">
            <summary>
            Reads the specified key, returning null if it is not present in the TupleSpace.
            </summary>
            <param name="key">The key.</param>
            <param name="blocking">if set to <c>true</c> [blocking].</param>
            <returns>The Tuple stored under the specified key</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.Take(System.Object,System.Boolean)">
            <summary>
            Takes the Tuple entered under the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="blocking">if set to <c>true</c> the calling thread will not return until a Tuple has been found with the
            specified key value.</param>
            <returns>The Tuple stored under the specified key</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Exchange.BlockWhilePresent(System.Object)">
            <summary>
            Blocks the calling thread until the specified key is not in the TupleSpace.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.ExchangeManager">
            <summary>
            An ExchangeManager manages a set of ITupleSpace instances (Exchanges) that are used for
            coordination and synchronization between otherwise uncoupled elements of a simulation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExchangeManager.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Highpoint.Sage.Utility.ExchangeManager"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExchangeManager.GetExchange">
            <summary>
            Gets the default exchange for this model.
            </summary>
            <returns>The default exchange for this model.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExchangeManager.GetExchange(System.Guid)">
            <summary>
            Gets the exchange associated with the provided identifier. If the identifier is Guid.Empty, then
            the default exchange is acquired.
            </summary>
            <param name="exchangeIdentifier">The exchange identifier.</param>
            <returns>The exchange associated with the provided identifier.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExchangeManager.InitializeService(Highpoint.Sage.SimCore.IModel)">
            <summary>
            Initializes the service to run in the provided model. This is called by the model 
            immediately after the service is added.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExchangeManager.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance has been initialized yet.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExchangeManager.InlineInitialization">
            <summary>
            Gets a value indicating whether the service is to be automatically initialized inline when
            the service is added to the model, or if the user (i.e. the custom model class) will do so later.
            </summary>
            <value><c>true</c> if initialization is to occur inline, otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.XOR(System.Guid,System.Guid)">
            <summary>
            Performs a bitwise XOR operation of this Guid and the other Guid.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="otherGuid">The other unique identifier.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.Increment(System.Guid)">
            <summary>
            Bytewise increments the specified unique identifier by the amount specified in the second Guid.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.Add(System.Guid,System.Int32)">
            <summary>
            Bytewise adds the two Guids together.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="value">The value.</param>
            <returns>Guid.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.XOR(System.Byte[],System.Byte[])">
            <summary>
            Performs a bitwise XOR operation of this byte array and the other byte array.
            </summary>
            <param name="thisBa">this byte array.</param>
            <param name="thatBa">that byte array.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentException">Cannot XOR two byte arrays of unequal length.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.Rotate(System.Byte,System.Int32)">
            <summary>
            Rotates the specified byte by the rot count of bits. Left rot is positive.
            </summary>
            <param name="thisB">The specified byte.</param>
            <param name="rotCount">The rot count.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Extensions.Rotate(System.Byte[],System.Int64)">
            <summary>
            Rotates the specified byte array by the rot count of bits. Left rot is positive.
            </summary>
            <param name="thisBa">The this BA.</param>
            <param name="rotCount">The rot count.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.GuidGenerator">
            <summary>
            Generates a pseudorandom stream of Guids. Make sure that the maskGuid and
            seedGuids are 'sufficiently chaotic'. This generator is best used for testing.
            It is modeled after a linear feedback shift register. http://en.wikipedia.org/wiki/LFSR
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidGenerator.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GuidGenerator"/> class.
            </summary>
            <param name="seedGuid">The seed GUID - the starting register value.</param>
            <param name="maskGuid">The mask GUID - the polynomial.</param>
            <param name="rotateBits">The number of bits to rotate the register by.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidGenerator.Next">
            <summary>
            Gets the next guid from this Guid Generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidGenerator.Reset">
            <summary>
            Resets this Guid Generator to its initial settings.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.GuidGenerator.Passthrough">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:GuidGenerator"/> is passthrough, meaning
            that if it is passthrough, it will simply generate a new Guid from Guid.NewGuid(); with every call
            to Next();
            </summary>
            <value><c>true</c> if passthrough; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.Subtract(System.Guid,System.Guid)">
            <summary>
            Returns an integer that represents guid a minus guid b.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.GuidOps.GuidComparer">
            <summary>
            A comparer used for sorting on Guids. Note - Guids are sorted by binary order, which is not the same as
            display order for a number of reasons. If you want Guids in &quot;Visually&quot; sorted order, use the
            AsStringGuidComparer.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.GuidComparer.Compare(System.Guid,System.Guid)">
            <summary>
            Compares the specified Guid a with the specified Guid b by binary values.
            </summary>
            <param name="a">One Guid.</param>
            <param name="b">The other Guid.</param>
            <returns>-1, 0 or 1, depending on the relationship between a &amp; b.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.GuidOps.HasIdentityByGuidComparer`1">
            <summary>
            A comparer use for sorting implementers of IHasIdentity on their Guids.
            </summary>
            <typeparam name="T">The actual type of the elements being sorted. Must implement IHasIdentity</typeparam>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.HasIdentityByGuidComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified a with the specified b by binary values.
            </summary>
            <param name="a">One IHasIdentity implementer.</param>
            <param name="b">The other IHasIdentity implementer.</param>
            <returns>-1, 0 or 1, depending on the relationship between a &amp; b.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.GuidOps.AsStringGuidComparer">
            <summary>
            A comparer used for sorting on Guids. Note - Guids are sorted by visual order, which is not the same as
            binary order for a number of reasons. If you want Guids in &quot;Binary&quot; sorted order, use the
            GuidComparer.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.AsStringGuidComparer.Compare(System.Guid,System.Guid)">
            <summary>
            Compares the specified Guid a with the specified Guid b by string representations.
            </summary>
            <param name="a">One Guid.</param>
            <param name="b">The other Guid.</param>
            <returns>-1, 0 or 1, depending on the relationship between a &amp; b.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.CompareAsString(System.Guid,System.Guid)">
            <summary>
            Compares two guids as strings.
            </summary>
            <param name="a">One Guid.</param>
            <param name="b">The other Guid.</param>
            <returns>-1, 0 or 1, depending on the relationship between a &amp; b.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.GuidOps.Rotate(System.Guid,System.Int32)">
            <summary>
            Rotates the specified guid by the number of bits. Negative rotation is right-rotation. Be aware that it is the
            byte-array that is rotated, not the textual representation of the Guid, so the textual look of the rotated guids
            may be in a surprising order.
            </summary>
            <param name="a">The guid to rotate.</param>
            <param name="n">The number of places left to rotate it.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.HashtableOfLists">
            <summary>
            Manages a hashtable of lists. This is useful for maintaining collections
            of keyed entries where the keys are duplicated across multiple entries.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.#ctor">
            <summary>
            Creates a hashtable of lists.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the Hashtable of Lists.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="item">The value of the element to add.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.Remove(System.Object,System.Object)">
            <summary>
            Removes the element with the specified key from the Hashtableof Lists.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="item">The value of the element to remove.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.Clear">
            <summary>
            Removes all elements from the Hashtable of Lists.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.Remove(System.Object)">
            <summary>
            Removes all elements with the specified key from the Hashtable of Lists.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists.Item(System.Object)">
            <summary>
            Retrieves a list of items associated with the provided key.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.ContainsKey(System.Object)">
            <summary>
            Determines whether this hashtable of lists contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if this hashtable of lists contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.GetEnumerator">
            <summary>
            Returns an Enumerator that can iterate through all of the entries in the 
            Hashtable of Lists. The enumerator is an enumerator of values, not
            DictionaryEntries. This method first prunes empty lists from the hashtable.
            </summary>
            <returns>An Enumerator that can iterate through all of the entries in the 
            Hashtable of Lists.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists.PruneEmptyLists">
            <summary>
            Removes any entries in the HTOL that comprise a key and an empty list (which can
            result from removals of entries.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists.Count">
            <summary>
            Returns the number of entries in the Hashtable of Lists.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.HashtableOfLists`2">
            <summary>
            Manages a hashtable of lists of values. The keys are of type TKey, and the lists contain elements of type TValue.
            This is useful for maintaining collections of keyed entries where the keys are duplicated across multiple entries.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <seealso>
                <cref>System.Collections.Generic.IDictionary{TKey, System.Collections.Generic.List{TValue}}</cref>
            </seealso>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso>
              <cref>System.Collections.Generic.IDictionary{TKey, List{TValue}}</cref>
            </seealso>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value into the Hashtable of Lists.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="item">The value of the element to add.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Remove(`0)">
            <summary>
            Removes all of the elements with the specified key from the Hashtableof Lists.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Remove(`0,`1)">
            <summary>
            Removes all elements with the specified key from the Hashtable of Lists.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Clear">
            <summary>
            Removes all elements from the Hashtable of Lists.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.Item(`0)">
            <summary>
            Retrieves a list of items associated with the provided key.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains a list element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains a list element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.GetEnumerator">
            <summary>
            Returns an Enumerator that can iterate through all of the entries in the 
            Hashtable of Lists. The enumerator is an enumerator of values, not
            DictionaryEntries. This method first prunes empty lists from the hashtable.
            </summary>
            <returns>An Enumerator that can iterate through all of the entries in the 
            Hashtable of Lists.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.PruneEmptyLists">
            <summary>
            Removes any entries in the HTOL that comprise a key and an empty list (which can
            result from removals of entries.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.Count">
            <summary>
            Returns the number of entries in the Hashtable of Lists.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Add(`0,System.Collections.Generic.List{`1})">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#List{TValue}}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#List{TValue}}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.TryGetValue(`0,System.Collections.Generic.List{`1}@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#List{TValue}}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The values.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#List{TValue}}}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.HashtableOfLists`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.HashtableOfLists`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,System#Collections#Generic#List{TValue}}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.NameComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether the name of one is less than, equal to, or greater than the name of the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.Heap`1">
            <summary>
            A binary heap can be efficiently implemented as an array, where a node at index i 
            has children at indexes 2i and 2i+1 and a parent at index i/2, with one-based indexing.
            </summary>
            <typeparam name="T">The type of things held in the heap.</typeparam>
        </member>
        <member name="T:Highpoint.Sage.Utility.Heap`1.HEAP_RULE">
            <summary>
            Enum HEAP_RULE - MinValue builds a heap with the 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.#ctor(Highpoint.Sage.Utility.Heap{`0}.HEAP_RULE,System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.Heap`1"/> class.
            </summary>
            <param name="direction">The heap rule to be used for heap maintenance.</param>
            <param name="initialCapacity">The initial capacity.</param>
            <param name="growthFactor">The growth factor.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.#ctor(Highpoint.Sage.Utility.Heap{`0}.HEAP_RULE,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.Heap`1"/> class.
            </summary>
            <param name="direction">The heap rule to be used for heap maintenance.</param>
            <param name="initialCapacity">The initial capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.#ctor(Highpoint.Sage.Utility.Heap{`0}.HEAP_RULE,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.Heap`1"/> class.
            </summary>
            <param name="direction">The heap rule to be used for heap maintenance.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.Enqueue(`0)">
            <summary>
            Enqueues the specified new entry.
            </summary>
            <param name="newEntry">The new entry.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.Heap`1.Count">
            <summary>
            Gets the count of elements in the heap.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.Peek">
            <summary>
            Peeks at the instance at the top of the heap.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.Dequeue">
            <summary>
            Dequeues the instance at the top of the heap.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Heap`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.ExecutionContext">
            <summary>
            An ExecutionContext holds all of the information necessary to track one execution through a process structure. The 
            process structure governs structure, and the ExecutionContext governs process-instance-specific data.
            </summary>
            <seealso cref="T:Highpoint.Sage.Utility.ExecutionContext" />
            <seealso cref="T:Highpoint.Sage.SimCore.IModelObject" />
            <seealso cref="T:System.Collections.IDictionary" />
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.#ctor(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid,Highpoint.Sage.Utility.ExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.ExecutionContext"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="guid">The unique identifier.</param>
            <param name="parent">The parent ExecutionContext.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Model">
            <summary>
            The IModel to which this object belongs.
            </summary>
            <value>The object's Model.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Name">
            <summary>
            The name by which this object is known. Typically not required to be unique in a pan-model context.
            </summary>
            <value>The object's name.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Description">
            <summary>
            The description for this object. Typically used for human-readable representations.
            </summary>
            <value>The object's description.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Guid">
            <summary>
            The Guid for this object. Typically required to be unique in a pan-model context.
            </summary>
            <value>The object's Guid.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.InitializeIdentity(Highpoint.Sage.SimCore.IModel,System.String,System.String,System.Guid)">
            <summary>
            Initializes the fields that feed the properties of this IModelObject identity.
            </summary>
            <param name="model">The IModelObject's new model value.</param>
            <param name="name">The IModelObject's new name value.</param>
            <param name="description">The IModelObject's new description value.</param>
            <param name="guid">The IModelObject's new GUID value.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ExecutionContext.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ExecutionContext.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.IHasSortKeys">
            <summary>
            Implemeted by an object that is sortable, and has SortKeys
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IHasSortKeys.SortKeys">
            <summary>
            Gets the sort keys for this object.
            </summary>
            <value>The sort keys.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.ISortKey">
            <summary>
            A Sort Key is an object that can be used to sort a collection of objects, and can be presented to a user for selection.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ISortKey.Name">
            <summary>
            Gets the human-readable name of this Sort Key.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.ISupportsIndexes">
            <summary>
            This interface is implemented by an object that is required to support index numbers.
            That is, another (perhaps manager) object will want to refer to objects of this type
            by index numbers that it, itself, assigns.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ISupportsIndexes.Index">
            <summary>
            A growable array of index number locations.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ISupportsIndexes.GrowIndex">
            <summary>
            Causes the object to grow its index array.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.IIndexingService">
            <summary>
            Implemented by a class that is capable of allocating &amp; assigning index slots in a population of ISupportsIndexes objects.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.IIndexingService.GetIndexSlot(System.Object[])">
            <summary>
            Acquires a slot in the index number array for the caller's use.
            </summary>
            <param name="tgts">An array of the objects that are to be included in this index - they must all implement the ISupportsIndexes interface.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.IIndexingService.GetIndexSlot(Highpoint.Sage.Utility.ISupportsIndexes[])">
            <summary>
            Acquires a slot in the index number array for the caller's use.
            </summary>
            <param name="tgts">The objects for whom an index slot is desired.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.BasicIndexingService.GetIndexSlot(System.Object[])">
            <summary>
            Acquires a slot in the index number array for the caller's use.
            </summary>
            <param name="tgts">An array of the objects that are to be included in this index - they must all implement the ISupportsIndexes interface.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.BasicIndexingService.GetIndexSlot(Highpoint.Sage.Utility.ISupportsIndexes[])">
            <summary>
            Acquires a slot in the index number array for the caller's use.
            </summary>
            <param name="tgts">The objects for whom an index slot is desired.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:Highpoint.Sage.Utility.IndexingFailedException"></exception>
        </member>
        <member name="T:Highpoint.Sage.Utility.IndexingFailedException">
            <summary>
            Class IndexingFailedException - thrown when indexing has failed.
            </summary>
            <seealso cref="T:System.ApplicationException" />
        </member>
        <member name="M:Highpoint.Sage.Utility.IndexingFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.IndexingFailedException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.InitFailureException">
            <summary>
            Marker class for use as an exception fired on initialization failure.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.InitFailureException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:InitFailureException"/> class.
            </summary>
            <param name="msg">The message to be reported.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.TreeNodeInteractionEvent">
            <summary>
            Delegate TreeNodeInteractionEvent is used for any event on subject treenode, concerning obj treenode.
            </summary>
            <param name="subject">The subject.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.ITreeNode">
            <summary>
            ITreeNode is implemented by something that is a node in a tree - it has zero or one parent and
            zero or more children.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode.IsReadOnly">
            <summary>
            True if the tree cannot be reconfigured through this implementer (no adding/removing parents or children.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode.IsLeaf">
            <summary>
            True if this implementer has no children.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode.IsRoot">
            <summary>
            True if this implementer has no parent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.GetRoot">
            <summary>
            Gets the root node at or above this node.
            </summary>
            <returns>The root node at or above this node.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode.Parent">
            <summary>
            The parent of this object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode.Children">
            <summary>
            The children of this object.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.AddChild(System.Object)">
            <summary>
            Adds a child to this object.
            </summary>
            <param name="child">The child to be added to this parent.</param>
            <returns>The new ITreeNode that represents the child.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.RemoveChild(System.Object)">
            <summary>
            Removes a child from this object.
            </summary>
            <param name="child">The child to be removed from this parent.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.ClearChildren">
            <summary>
            Removes all children.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.ResequenceChildren(System.Collections.IComparer)">
            <summary>
            Sorts children according to the supplied IComparer.
            </summary>
            <param name="sequencer">The supplied IComparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.GetChild(System.Guid)">
            <summary>
            Finds the child of this node that has the specified guid key.
            </summary>
            <param name="key">The key for the child being sought.</param>
            <returns>The child node that has the specified guid key.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode.ToStringDeep">
            <summary>
            Produces a string representation of the entire tree below this node.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnAboutToBeRemoved">
            <summary>
            Fires when this object is about to be removed from a parent's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnWasRemoved">
            <summary>
            Fires after this object has been removed from a parent's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnAboutToGainChild">
            <summary>
            Fires when this object is about to gain a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnGainedChild">
            <summary>
            Fires after this object has gained a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnAboutToLoseChild">
            <summary>
            Fires when this object is about to lose a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode.OnLostChild">
            <summary>
            Fires after this object has lost a new member of it's child list.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.ITreeNodeProxy">
            <summary>
            Implemented by an object that will implement ITreeNode, but act as a proxy
            for another object that actually owns the parent/child relationships.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNodeProxy.Ward">
            <summary>
            The object that owns the parent/child relationships that this object is managing.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNodeProxy.CreateNodeWrapper(System.Object)">
            <summary>
            Creates a wrapper (that implements this kind of ITreeNodeProxy) for the provided object.
            </summary>
            <param name="ward">The object that actually has the parents and children that are
            managed by the ITreeNodeProxy implementer.</param>
            <returns>The ITreeNodeProxy implementer.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.TreeNodeHelper">
            <summary>
            A class that manages parent &amp;child relationships in a tree. Objects that participate in the tree can
            delegate to this class to manage the relationships. This class provides an object with its parent,
            its child list, events on the addition &amp; removal of others and itself from the tree, enables sorting &amp;
            sequencing of the members of the tree, and will, if set up as an auto-indexing TreeNodeHelper, will
            perform indexing of the node's children based on their guids, if they implement IHasIdentity.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates a TreeNodeHelper with the indicated object as its ward. It is read-only or auto-indexed according to the 
            </summary>
            <param name="ward">The object that this TreeNodeHelper is helping. If the ward is derived from TreeNodeHelper, use 'this'.</param>
            <param name="readOnly">True if this TreeNodeHelper cannot change the tree structure.</param>
            <param name="autoIndex">True if all children will be implementers of IHasIdentity, and should be indexed for the GetChild(Guid childID) API.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.Ward">
            <summary>
            A TreeNode's Ward is the object it represents - the object that actually is
            conceptually a part of the tree being managed. If the object in the
            hierarchical tree inherits from TreeNodeHelper, then Ward is 'this'.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.CreateNodeWrapper(System.Object)">
            <summary>
            Creates a wrapper around the provided object that matches this one with respect to read-only and indexing settings.
            </summary>
            <param name="ward">The object whose parent/child relationships the new TreeNodeHelper is to manage.</param>
            <returns>A new instance of TreeNodeHelper.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.SetReadOnly(System.Boolean)">
            <summary>
            Sets this node's ReadOnly property to the new value.
            </summary>
            <param name="toWhat">The new value for the ReadOnly property.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.IsReadOnly">
            <summary>
            True if the tree cannot be reconfigured through this implementer (no adding/removing parents or children.)
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.IsLeaf">
            <summary>
            True if this implementer has no children.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.IsRoot">
            <summary>
            True if this implementer has no parent.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.GetRoot">
            <summary>
            Gets the root node at or above this node.
            </summary>
            <returns>The root node at or above this node.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.Parent">
            <summary>
            The parent of this object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeHelper.Children">
            <summary>
            The children of this object.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.AddChild(System.Object)">
            <summary>
            Adds a child to this object. If the TreeNodeHelper is set to autoIndex, the new child
            must be an implementer of IHasIdentity, and will be indexed into the list of children.
            </summary>
            <param name="newChild">The child to be added to this parent.</param>
            <returns>The TreeNodeHelper that wraps the new child.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.RemoveChild(System.Object)">
            <summary>
            Removes a child from this object.
            </summary>
            <param name="child">The child to be removed from this parent.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.ClearChildren">
            <summary>
            Removes all children.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.ResequenceChildren(System.Collections.IComparer)">
            <summary>
            Sorts children according to the supplied IComparer.
            </summary>
            <param name="sequencer">The supplied IComparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.GetChild(System.Guid)">
            <summary>
            Finds the child of this node that has the specified guid key.
            </summary>
            <param name="key">The key for the child being sought.</param>
            <returns>The child node that has the specified guid key.</returns>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnAboutToBeRemoved">
            <summary>
            Fires when this object is about to be removed from a parent's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnWasRemoved">
            <summary>
            Fires after this object has been removed from a parent's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnAboutToGainChild">
            <summary>
            Fires when this object is about to gain a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnGainedChild">
            <summary>
            Fires after this object has gained a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnAboutToLoseChild">
            <summary>
            Fires when this object is about to lose a new member of it's child list.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.TreeNodeHelper.OnLostChild">
            <summary>
            Fires after this object has lost a new member of it's child list.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.Equals(System.Object)">
            <summary>
            True if this treeNode helper's ward is equal to another object or another ITreeNodeHelper's ward object.
            </summary>
            <param name="obj">The ward object or other ITreeNodeHelper implementer being tested.</param>
            <returns>True if this treeNode helper's ward is equal to another object or another ITreeNodeHelper's ward object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.GetHashCode">
            <summary>
            Returns the hashCode of this TreeNodeHelper's ward object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeHelper.ToStringDeep">
            <summary>
            Produces a string representation of the entire tree below this node.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.IHasLabel">
            <summary>
            Implemented by an object that is capable of managing context-specific labels.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IHasLabel.Label">
            <summary>
            Gets or sets the label in the currently-selected context, or if none has been selected, then according to the default context.
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.IHasLabel.SetLabel(System.String,System.String)">
            <summary>
            Sets the label in the context indicated by the provided context, or if null or String.Empty has been selected, then in the default context.
            </summary>
            <param name="label">The label.</param>
            <param name="context">The context - use null or string.Empty for the default context.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.IHasLabel.GetLabel(System.String)">
            <summary>
            Gets the label from the context indicated by the provided context, or if null or String.Empty has been selected, then from the default context.
            </summary>
            <param name="context">The context - use null or string.Empty for the default context.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.LabelManager">
            <summary>
            A manager to which a class that implements a Label can delegate.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.LabelManager.CONTEXTSLOTNAME">
            <summary>
            The name of the Thread-Local-Storage data slot in which the current context key is stored.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.LabelManager.DEFAULT_CHANNEL">
            <summary>
            The name of the default contents of the Thread-Local-Storage data slot in which the current context key is stored.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LabelManager.#cctor">
            <summary>
            Initializes the <see cref="T:LabelManager"/> class by creating a Thread-Local-Storage data slot for the key.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LabelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LabelManager"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LabelManager.SetContext(System.String)">
            <summary>
            Sets the label context for all unspecified requests in this thread.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.LabelManager.Label">
            <summary>
            Gets or sets the label in the currently-selected context, or if none has been selected, then according to the default context.
            </summary>
            <value>The label.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.LabelManager.SetLabel(System.String,System.String)">
            <summary>
            Sets the label in the context indicated by the provided context, or if null or String.Empty has been selected, then in the default context.
            </summary>
            <param name="label">The label.</param>
            <param name="context">The context - use null or string.Empty for the default context.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.LabelManager.GetLabel(System.String)">
            <summary>
            Gets the label from the context indicated by the provided context, or if null or String.Empty has been selected, then from the default context.
            </summary>
            <param name="context">The context - use null or string.Empty for the default context.</param>
            <returns></returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.LabelManager.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.LocalEventQueue">
            <summary>
            This class represents a manager for events that are all generated and consumed within a
            local object (such as a tool's inner workings). It schedules only the soonest event, and
            ensures that when that soonest event is serviced, the next 'soonest' event will then be
            scheduled.
            <br></br>
            It currently requires that each event fed into it be the furthest-out event. In other words,
            it is a FIFO queue and assumes that its user will ensure temporal sequence in the events
            fed into it.
            <br></br>
            If you do not expect to be able to follow the temporal restrictions, use the LocalEventHeap
            class instead.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.#ctor(Highpoint.Sage.SimCore.IExecutive,System.Int32,Highpoint.Sage.SimCore.ExecEventReceiver)">
            <summary>
            Creates a new instance of the <see cref="T:LocalEventQueue"/> class.
            </summary>
            <param name="exec">The executive that this LocalEventQueue services.</param>
            <param name="capacity">The capacity.</param>
            <param name="eer">The <see cref="T:Highpoint.Sage.SimCore.ExecEventReceiver"/> that this LocalEventQueue manages callbacks into.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.Enqueue(System.Object,System.DateTime)">
            <summary>
            Enqueues a callback to the ExecEventReceiver on the specified object for the specified time.
            </summary>
            <param name="what">The specified object.</param>
            <param name="when">The specified time.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.Dequeue(Highpoint.Sage.SimCore.IExecutive,System.Object)">
            <summary>
            Dequeues the next callback to the ExecEventReceiver on the specified object for the specified time.
            This is called by the Executive, and happens when, and because, the specified time is 'Now'.
            </summary>
            <param name="exec">The exec.</param>
            <param name="userData">The user data provided as a callback from the Executive.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.LocalEventQueue.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.LocalEventQueue.EarliestCompletionTime">
            <summary>
            Gets the earliest completion time - this is the time of the next event in this queue.
            </summary>
            <value>The time of the next event in this queue.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.LocalEventQueue.LatestCompletionTime">
            <summary>
            Gets the latest completion time - this is the time of the last event in this queue.
            </summary>
            <value>The time of the last event in this queue.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.LocalEventQueue.Count">
            <summary>
            Gets the count of events in this queue.
            </summary>
            <value>The count of events in this queue.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.GetCompletionTime(System.Int32)">
            <summary>
            Gets the completion time of the nth event, where zeroth is soonest, 1st is next, and so on.
            If code requests an index off the end of the list, an argument exception is thrown.
            </summary>
            <param name="i">The index, n, of the completion time.</param>
            <returns>the completion time of the nth event</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.LocalEventQueue.Name">
            <summary>
            The user-friendly name for this object. Typically not required to be unique.
            </summary>
            <value></value>
        </member>
        <member name="T:Highpoint.Sage.Utility.LocalEventQueue.EventData">
            <summary>
            A helper class that holds information about a previously requested event.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.EventData.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:EventData"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.EventData.Clear">
            <summary>
            Clears data in this instance so it can be reused.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.EventData.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.LocalEventQueue.EventData.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj.
            </returns>
            <exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception>
        </member>
        <member name="T:Highpoint.Sage.Utility.Mementos.MementoChangeEvent">
            <summary>
            Implemented by a method that will listen for changes in the form or
            contents of a memento.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.Mementos.ISupportsMementos">
            <summary>
            Implemented by an object that supports Mementos.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.ISupportsMementos.Memento">
            <summary>
            Retrieves a memento from the object.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.ISupportsMementos.HasChanged">
            <summary>
            Reports whether the object has changed relative to its memento
            since the last memento was recorded.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.Mementos.ISupportsMementos.MementoChangeEvent">
            <summary>
            Fired when the memento contents will have changed. This does not
            imply that the memento <i>has</i> changed, since the memento is
            recorded, typically, only on request. It <i>does</i> imply that if
            you ask for a memento, it will be in some way different from any
            memento you might have previously acquired.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.ISupportsMementos.ReportsOwnChanges">
            <summary>
            Indicates whether this object can report memento changes to its
            parent. (Mementos can contain other mementos.) 
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.ISupportsMementos.Equals(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Returns true if the two mementos are semantically equal.
            </summary>
            <param name="otherGuy">The other memento implementer.</param>
            <returns>True if the two mementos are semantically equal.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.Mementos.IMemento">
            <summary>
            Implemented by any object that can act as a memento.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.IMemento.CreateTarget">
            <summary>
            Creates an empty copy of whatever object this memento can reconstitute. Some
            mementos are only able to reconstitute into their source objects (they can only
            be used to restore state in the same object), and these mementos will return a
            reference to that object.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.IMemento.Load(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Loads the contents of this Memento into the provided object.
            </summary>
            <param name="ism">The object to receive the contents of the memento.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.IMemento.GetDictionary">
            <summary>
            Emits an IDictionary form of the memento that can be, for example, dumped to
            Trace.
            </summary>
            <returns>An IDictionary form of the memento.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.IMemento.Equals(Highpoint.Sage.Utility.Mementos.IMemento)">
            <summary>
            Returns true if the two mementos are semantically equal.
            </summary>
            <param name="memento">The memento this one should compare itself to.</param>
            <returns>True if the mementos are semantically equal.</returns>
        </member>
        <member name="E:Highpoint.Sage.Utility.Mementos.IMemento.OnLoadCompleted">
            <summary>
            This event is fired once this memento has completed its Load(ISupportsMementos ism) invocation.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.IMemento.Parent">
            <summary>
            This holds a reference to the memento, if any, that contains this memento.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoException.#ctor(System.String,System.Object)">
            <summary>
            Creates a MementoException.
            </summary>
            <param name="msg">Textual message reflecting the reason for this exception.</param>
            <param name="subject">The object into which the memento is being loaded.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.MementoException.Subject">
            <summary>
            The object into which the memento is being loaded.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.Mementos.MementoHelper">
            <summary>
            A class that will perform much of the bookkeeping required to implement
            the ISupportsMementos interface, including child management, change tracking
            and memento generation.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.#ctor(Highpoint.Sage.Utility.Mementos.ISupportsMementos,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.Mementos.MementoHelper"/> class.
            </summary>
            <param name="iss">The memento supporter that wraps this helper.</param>
            <param name="wrappeeReportsOwnChanges">if set to <c>true</c> the memento supporter is able to report its own changes.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.Clear">
            <summary>
            Clears the state of this helper.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.AddChild(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Informs the helper that the memento supporter that wraps this helper has gained a child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.RemoveChild(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Informs the helper that the memento supporter that wraps this helper has lost a child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.MementoHelper.HasChanged">
            <summary>
            Gets or sets a value indicating whether the memento supporter that wraps this helper has changed.
            </summary>
            <value><c>true</c> if the memento supporter that wraps this helper has changed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.ReportChange(Highpoint.Sage.Utility.Mementos.ISupportsMementos)">
            <summary>
            Called by the memento supporter that wraps this helper, to let it know that a change has occurred in its internal state.
            </summary>
            <param name="iss">The memento supporter which has changed.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.ReportChange">
            <summary>
            Called by the memento supporter that wraps this helper, to let it know that a change has occurred in its internal state.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.Mementos.MementoHelper.MementoChangeEvent">
            <summary>
            Occurs when the memento supporter that wraps this helper has reported a change in its internal state.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.Mementos.MementoHelper.ReportSnapshot">
            <summary>
            Called by the memento supporter that wraps this helper, to let it know that a snapsot (a memento) has just been generated.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.Mementos.MementoHelper.ReportsOwnChanges">
            <summary>
            Gets a value indicating whether the memento supporter that wraps this helper reports its own changes.
            </summary>
            <value><c>true</c> if [reports own changes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.MissingParameterException">
            <summary>
            MissingParameterException is thrown when a required parameter is missing. Typically used in a late bound, read-from-name/value pair collection scenario.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.MissingParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of this class with serialized data. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.MissingParameterException.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.MissingParameterException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with a specific message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.MissingParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with a specific message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception inner exception.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.MultiArrayListEnumerator">
            <summary>
            Summary description for MultiArrayListEnumerator.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.NameValuePair">
            <summary>
            Struct NameValuePair contains a string name, and an object value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.NameValuePair.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.NameValuePair.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.NameValuePair.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.NameValuePair"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.NameValuePair`1">
            <summary>
            Struct NameValuePair contains a string name, and a value of type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Highpoint.Sage.Utility.NameValuePair`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.NameValuePair`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.NameValuePair`1"/> struct.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.OverrideDouble">
            <summary>
            A struct that shadows a double in, for example, a temperature controller, and indicates
            whether that double is to be read as its default state, or as an overridden value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.OverrideDouble.Override">
            <summary>
            Indicates true if this object's initial value has been overridden.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.OverrideDouble.DoubleValue">
            <summary>
            The double value contained in this Overridable. Override is set to true if this value is set.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.OverrideBool">
            <summary>
            A struct that shadows a boolean in, for example, a temperature controller, and indicates
            whether that boolean is to  is to be read as its default state, or as an overridden value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.OverrideBool.Override">
            <summary>
            Indicates true if this object's initial value has been overridden.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.OverrideBool.BoolValue">
            <summary>
            The bool value contained in this Overridable. Override is set to true if this value is set.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.SerialNumberService">
            <summary>
            Service that provides serial numbers.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.SerialNumberService.GetNext">
            <summary>
            Gets the next serial number from this service.
            </summary>
            <returns>The next serial number from this service.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.IHasSerialNumber">
            <summary>
            Implemented by an object that has a serial number.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.IHasSerialNumber.SerialNumber">
            <summary>
            The object's serial number.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.StringOperations">
            <summary>
            Summary description for StringOperations.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.ToCommasAndAndedList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given IEnumerable of strings such as {"Foo", "Bar", "Baz"} returns a string representation, "Foo, Bar and Baz".
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>the string representation.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.ToCommasAndAndedList(System.Collections.ArrayList)">
            <summary>
            Given a list of {"Foo", "Bar", "Baz"} returns a string representation, "Foo, Bar and Baz".
            </summary>
            <param name="alist">The list.</param>
            <returns>the string representation.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.ToCommasAndAndedList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Given an IEnumerable of type T and a converter function from T to string, returns a string representation such as "Foo, Bar and Baz".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ienum">The IEnumerable of type T.</param>
            <param name="converterFunc">The converter function.</param>
            <returns>the string representation.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.ToCommasAndAndedListOfNames``1(System.Collections.Generic.List{``0})">
            <summary>
            Given a List of type T, where T implements IHasName, returns a string representation such as "Foo, Bar and Baz".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns>the string representation.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.StringOperations.ArrayListToIEnumOfStr">
            <summary>
            A wrapper, used only in this class, to morph an arraylist that I know is going to be converted
            to strings, into an IEnumerable of strings - this way the same algo code as others can be used.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.UniqueString(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.String)">
            <summary>
            Returns a unique string in the context of the strings already in the collection. By default, if Dog exists in the list,
            and you pass in Dog, it will return Dog:1, then Dog:2 on the next call, and so on. Optionally, you can automatically
            update the list, and use a template for creating the new string.
            </summary>
            <param name="name">The name you want to use.</param>
            <param name="existingNames">the list of existing names.</param>
            <param name="addToList">if true, automatically updates the list with the new name.</param>
            <param name="template">The string format to use. It takes as {0} the name, and as {1}, the index, if any, to use.</param>
            <returns>the name you can use - that is unique.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.Compress(System.String)">
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.StringOperations.Decompress(System.String)">
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.SysInfoOperations">
            <summary>
            Wrapper for some key System Info functions.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetCpuid">
            <summary>
            Gets the CPU IDs for the processors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetVolumeSerial(System.String)">
            <summary>
            return Volume Serial Number from hard drive
            </summary>
            <param name="strDriveLetter">[optional] Drive letter</param>
            <returns>[string] VolumeSerialNumber</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetMacAddress">
            <summary>
            Returns MAC Address from first Network Card in Computer
            </summary>
            <returns>[string] MAC Address</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetCpuId">
            <summary>
            Return processorId from first CPU in machine
            </summary>
            <returns>[string] ProcessorId</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetCpuLoads">
            <summary>
            Gets the CPU load percentages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.SysInfoOperations.GetCpul2CachesInKb">
            <summary>
            Gets the CPU level 2 caches in KB.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.SubtreeChangeType">
            <summary>
            The types of subtree changes reported by the Tree Support classes.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.SubtreeChangeType.GainedNode">
            <summary>
            A node was added somewhere in the tree.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.SubtreeChangeType.LostNode">
            <summary>
            A node was removed somewhere in the tree.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.SubtreeChangeType.ChildrenResorted">
            <summary>
            A node's children were resorted somewhere in the tree.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.TreeNodeEvent`1">
            <summary>
            An event that pertains to some change in relationship between two nodes.
            </summary>
            <typeparam name="T">The payload type of the nodes.</typeparam>
            <param name="self">The node firing the event.</param>
            <param name="subject">The node to which the event refers.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.TreeChangeEvent`1">
            <summary>
            An event that pertains to some change in the tree underneath a given node.
            </summary>
            <typeparam name="T">The payload type of the nodes.</typeparam>
            <param name="changeType">The SubtreeChangeType.</param>
            <param name="where">The node to which the event refers.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.ITreeNode`1">
            <summary>
            The ITreeNode interface is implemented by any object that participates in a tree data structure.
            An object may derive from TreeNode&lt;T&gt; or implement ITreeNode&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.LostParent">
            <summary>
            Fired when this node is detached from a parent.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.GainedParent">
            <summary>
            Fired when this node is attached to a parent.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.LostChild">
            <summary>
            Fired when this node has lost a child.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.GainedChild">
            <summary>
            Fired when this node has gained a child.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.ChildrenResorted">
            <summary>
            <summary>
            Fired when this node's child list has been resorted.
            </summary>
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITreeNode`1.SubtreeChanged">
            <summary>
            Fired when a change (Gain, Loss or Child-Resorting) in this node's subtree has occurred.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.Root">
            <summary>
            Gets the root node above this one.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.Payload">
            <summary>
            Gets the payload of this node. The payload is the node itself, if the subject nodes inherit from TreeNode&lt;T&gt;.
            If the Payload is null, and you inherit from TreeNode&lt;T&gt;, you need to set SelfReferential to true in the ctor.
            </summary>
            <value>The payload.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.Parent">
            <summary>
            Gets or sets the parent of this tree node.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.SetParent(Highpoint.Sage.Utility.ITreeNode{`0},System.Boolean,System.Boolean)">
            <summary>
            Sets the parent of this node, but does not then set this node as a child to that parent if childAlreadyAdded is set to <c>true</c>.
            </summary>
            <param name="newParent">The new parent.</param>
            <param name="skipStructureChecking">if set to <c>true</c> [skip structure checking].</param>
            <param name="childAlreadyAdded">if set to <c>true</c> [child already added].</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.Siblings(System.Boolean)">
            <summary>
            Gets an enumerable over this node's siblings in the hierarchy.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.DescendantNodesBreadthFirst(System.Boolean)">
            <summary>
            Returns an iterator that traverses the descendant nodes breadth first, top down.
            </summary>
            <value>The descendant node iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.DescendantNodesDepthFirst(System.Boolean)">
            <summary>
            Returns an iterator that traverses the descendant nodes depth first, top down.
            </summary>
            <value>The descendant node iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.DescendantsBreadthFirst(System.Boolean)">
            <summary>
            Returns an IEnumerable that traverses the descendant payloads breadth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.DescendantsDepthFirst(System.Boolean)">
            <summary>
            Returns an IEnumerable that traverses the descendant payloads depth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITreeNode`1.IsChildOf(Highpoint.Sage.Utility.ITreeNode{`0})">
            <summary>
            Determines whether this node is a child of the specified 'possible parent' node.
            </summary>
            <param name="possibleParentNode">The possible parent node.</param>
            <returns>
            	<c>true</c> if this node is a child of the specified 'possible parent' node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.Children">
            <summary>
            Gets the children, if any, of this node. Return value will be an empty collection if there are no children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.ChildNodes">
            <summary>
            Provides an IEnumerable over the child nodes (i.e. the payloads of the children.)
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITreeNode`1.MyEventController">
            <summary>
            Gets the tree node event controller. This should only be obtained by a descendant
            or parent TreeNode or TreeNodeCollection to report changes that are taking place
            with respect to the subject TreeNode so that it may report its own changes.
            </summary>
            <value>The tree node event controller.</value>
        </member>
        <member name="T:Highpoint.Sage.Utility.TreeNode`1">
            <summary>
            Want to be able to use TreeNode as either a base class, a container or a wrapper.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.TreeNode`1"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.TreeNode`1"/> class.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNode`1.Children">
            <summary>
            Gets the children, if any, of this node. Return value will be an empty collection if there are no children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNode`1.ChildNodes">
            <summary>
            Provides an IEnumerable over the child nodes (i.e. the payloads of the children.)
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNode`1.Parent">
            <summary>
            Gets or sets the parent of this tree node.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNode`1.Root">
            <summary>
            Gets the root node above this one.
            </summary>
            <value>The root.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.Siblings(System.Boolean)">
            <summary>
            Gets an enumerator over this node's siblings in the hierarchy.
            </summary>
            <param name="includeSelf">if set to <c>true</c> [include self].</param>
            <returns></returns>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.DescendantNodesBreadthFirst(System.Boolean)">
            <summary>
            Returns an iterator that traverses the descendant nodes breadth first, top down.
            </summary>
            <value>The descendant node iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.DescendantNodesDepthFirst(System.Boolean)">
            <summary>
            Returns an iterator that traverses the descendant nodes depth first, top down.
            </summary>
            <value>The descendant node iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.DescendantsBreadthFirst(System.Boolean)">
            <summary>
            Returns an IEnumerable that traverses the descendant payloads breadth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.DescendantsDepthFirst(System.Boolean)">
            <summary>
            Returns an iterator that traverses the descendant payloads depth first.
            </summary>
            <value>The descendant payloads iterator.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNode`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Add(`0,System.Boolean)">
            <summary>
            Adds the specified new child to this collection.
            </summary>
            <param name="newChild">The new child.</param>
            <param name="skipStructuralChecking">if set to <c>true</c> addition of this child will be perforemd without structural checking.</param>
            <returns>
            The TreeNode that resulted from this addition - either the node to be added, or its TreeNode wrapper.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Remove(`0)">
            <summary>
            Removes the specified existing child from this collection.
            </summary>
            <param name="existingChild">The existing child node to be removed.</param>
            <returns>True if the removal was successful, otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Remove(Highpoint.Sage.Utility.ITreeNode{`0})">
            <summary>
            Removes the specified existing child from this collection.
            </summary>
            <param name="existingChild">The existing child.</param>
            <returns>True if the removal was successful, otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.TreeNodeCollection`1.Count">
            <summary>
            Gets the count of entries in this TreeNodeCollection.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Sort(System.Comparison{Highpoint.Sage.Utility.ITreeNode{`0}})">
            <summary>
            Sorts the specified list according to the provided comparison object.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Sort(System.Collections.Generic.IComparer{Highpoint.Sage.Utility.ITreeNode{`0}})">
            <summary>
            Sorts the specified list according to the provided comparer implementation.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{Highpoint.Sage.Utility.ITreeNode{`0}})">
            <summary>
            Sorts the specified list according to the provided comparer implementation.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.ForEach(System.Action{Highpoint.Sage.Utility.ITreeNode{`0}})">
            <summary>
            Foreaches the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.FindAll(System.Predicate{Highpoint.Sage.Utility.ITreeNode{`0}})">
            <summary>
            Finds all children for which the predicate returns true.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.TreeNodeCollection`1.Clear">
            <summary>
            Clears all children out of this collection.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.ITuple">
            <summary>
            Interface ITuple is a key/data pair. It is used only in the TupleSpace implementation
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITuple.Key">
            <summary>
            TODO: All objects in a tuple must be able to be a key. This is a simplified use case where the zeroth element is the only key.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITuple.Data">
            <summary>
            TODO: All objects in a tuple must be able to be a key. This is a simplified use case where the 1st element is the only data (though it may be a list.)
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITuple.OnPosted(Highpoint.Sage.Utility.ITupleSpace)">
            <summary>
            Called when a Tuple is posted to a TupleSpace.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITuple.OnRead(Highpoint.Sage.Utility.ITupleSpace)">
            <summary>
            Called when a Tuple is read from a TupleSpace.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITuple.OnTaken(Highpoint.Sage.Utility.ITupleSpace)">
            <summary>
            Called when a Tuple is taken from a TupleSpace.
            </summary>
            <param name="ts">The ts.</param>
        </member>
        <member name="T:Highpoint.Sage.Utility.TsOpType">
            <summary>
            Describes a participant's role in a handoff through a TupleSpace.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.TsOpType.Post">
            <summary>
            The participant will place the token into the common area.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.TsOpType.Read">
            <summary>
            The participant will read the token, and leave it in the common area.
            </summary>
        </member>
        <member name="F:Highpoint.Sage.Utility.TsOpType.Take">
            <summary>
            The participant will take the token from the common area.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.ITupleSpace">
            <summary>
            Interface ITupleSpace describes a simple tupleSpace, perhaps better thought of as a whiteboard or exchange. Things are posted (added), read, and removed according to a provided key value.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.ITupleSpace.PermitsDuplicateKeys">
            <summary>
            Gets a value indicating whether this TupleSpace permits multiple Tuples to be posted under the same key. Currently, this will be false.
            </summary>
            <value>
            	<c>true</c> if this TupleSpace permits multiple Tuples to be posted under the same key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITupleSpace.Post(Highpoint.Sage.Utility.ITuple,System.Boolean)">
            <summary>
            Posts the specified tuple. If blocking is true, this call blocks 
            the caller's thread until the Tuple is taken from the space by another caller.
            </summary>
            <param name="tuple">The tuple.</param>
            <param name="blocking">if set to <c>true</c> this call blocks 
            the caller's thread until the Tuple is taken from the space by another caller..</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITupleSpace.Post(System.Object,System.Object,System.Boolean)">
            <summary>
            Posts a Tuple with the specified key and data. If blocking is true, this call blocks 
            the caller's thread until the Tuple is taken from the space by another caller.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <param name="blocking">if set to <c>true</c> [blocking].</param>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITupleSpace.Read(System.Object,System.Boolean)">
            <summary>
            Reads the specified key, returning null if it is not present in the TupleSpace.
            </summary>
            <param name="key">The key.</param>
            <param name="blocking">if set to <c>true</c> [blocking].</param>
            <returns>The Tuple stored under the specified key</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITupleSpace.Take(System.Object,System.Boolean)">
            <summary>
            Takes the Tuple entered under the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="blocking">if set to <c>true</c> the calling thread will not return until a Tuple has been found with the
            specified key value.</param>
            <returns>The Tuple stored under the specified key</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.ITupleSpace.BlockWhilePresent(System.Object)">
            <summary>
            Blocks the calling thread until the specified key is not in the TupleSpace.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITupleSpace.TuplePosted">
            <summary>
            Fires when a Tuple has been posted.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITupleSpace.TupleRead">
            <summary>
            Fires when a Tuple has been read.
            </summary>
        </member>
        <member name="E:Highpoint.Sage.Utility.ITupleSpace.TupleTaken">
            <summary>
            Fires when a Tuple has been taken.
            </summary>
        </member>
        <member name="T:Highpoint.Sage.Utility.UniqueNameGenerator">
            <summary>
            Class UniqueNameGenerator creates unique names. 
            When asked for GetNextName("Dog") the first time, it produces "Dog:0".
            When asked for GetNextName("Dog") the second time, it produces "Dog:1".
            When asked for GetNextName("Cat") the first time, it produces "Cat:0".
            And so on.
            It is intended when automatically creating, say, 100 objects of type Restaurant,
            one would call myUniqueNameGenerator.GetNextName(typeof(Restaurant).Name, 3, false)
            to create Restaurant:001, Restaurant:002, Restaurant:003, etc.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.UniqueNameGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.UniqueNameGenerator"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.UniqueNameGenerator.GetNextName(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the next name for the provided seed, to the specified number 
            of places, with the index either zero-based or one-based, 
            depending on the value of 'zeroBased.'
            </summary>
            <param name="seed">The seed.</param>
            <param name="nPlaces">The number of places. Ignored on all but the first call for a particular seed.</param>
            <param name="zeroBased">if set to <c>true</c> the index will be zero based. Ignored on all but the first call for a particular seed.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.WeakHashtable">
            <summary>
            A hashtable whose entries are weak - that is, if the underlying object
            is discarded from the runtime, so is the entry in the hashtable.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Highpoint.Sage.Utility.WeakHashtable"/> class.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.Clean">
            <summary>
            Cleans this instance by removing all entries for which the Weak Link has been broken..
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakHashtable.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakHashtable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.WeakList">
            <summary>
            A list of objects that are held behind weak references. The list is not collapsed until explicitly told to do so.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:WeakList"/> class.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Collapse">
            <summary>
            Collapses this instance, removing weak reference objects for which the targets have been garbage collected.
            </summary>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:Highpoint.Sage.Utility.WeakList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.WeakList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Highpoint.Sage.Utility.XmlTransform">
            <summary>
            Class XmlTransform converts xml to non-xml and vice versa by changing angle-brackets to ampersand-l-t's, etc, and vice versa.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Utility.XmlTransform.Xmlify(System.String)">
            <summary>
            Xmlifies the specified source string - converts angle-brackets to ampersand-l-t's, etc.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="M:Highpoint.Sage.Utility.XmlTransform.DeXmlify(System.String)">
            <summary>
            Converse of Xmlify - converts ampersand-l-t's, etc., to angle-brackets, etc.
            </summary>
            <param name="src">The SRC.</param>
            <returns></returns>
        </member>
        <member name="T:Highpoint.Sage.Diagnostics.DiagnosticAids">
            <summary>
            DiagnosticAids is a class that holds many static methods for general-purpose diagnostics
            that can be performed throughout the remainder of the framework.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.Diagnostics(System.String)">
            <summary>
            Determines, for a specific key, whether diagnostic tracing is turned on. The on/off
            setting is determined by the presence of an entry in the diagnostics section of the
            App.config where the key appears and the value is 'true'. See below:<p></p>
            <!-- <diagnostics><add key="Mixture" value="false" /></diagnostics> -->
            </summary>
            <param name="whichOne">The key being queried.</param>
            <returns>True if diagnostic tracing has been requested.</returns>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.DumpPostMortems(System.Collections.Hashtable)">
            <summary>
            In a debug build, post-mortems of a task graph can be dumped, describing which
            vertices and edges fired. This method performs that activity. The post mortems
            are retrieved from the model through the GetPostMortems(){ ... } API. 
            </summary>
            <param name="postMortems">PostMortem data that can be acquired from the model via the GetPostMortems() API.</param>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.GraphToSimpleString(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Takes an edge, and returns a string that represents structural details about its
            child edges.
            </summary>
            <param name="parent">The parent edge to the graph.</param>
            <returns>A string that represents structural details about the parent's child edges</returns>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.GraphToString(Highpoint.Sage.Graphs.Edge)">
            <summary>
            Takes an edge, and returns a string that represents structural details about its
            child edges.
            </summary>
            <param name="parent">The parent edge to the graph.</param>
            <returns>A string that represents structural details about the parent's child edges</returns>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.DumpDictionary(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a string containing the contents of a dictionary.
            </summary>
            <param name="name">The name of this dictionary. Informational only.</param>
            <param name="dict">The dictionary to dump.</param>
            <returns>A string containing the contents of the specified dictionary.</returns>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.ReportOnTaskValidity(Highpoint.Sage.Graphs.Tasks.Task,System.Boolean)">
            <summary>
            Returns a string that indicates, in human-readable form, the validity state of the specified task.
            </summary>
            <param name="task">The task whose state is of interest.</param>
            <param name="deep">If set to true, checks this task and all of its descendants. 
            Only if all are valid, is this task considered to be valid.</param>
            <returns>A string that indicates, in human-readable form, the validity state of the specified task.</returns>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.DiagnosticAids.DumpMaterial(Highpoint.Sage.Materials.Chemistry.IMaterial)">
            <summary>
            Provides a human-readable string with the contents of a material.
            </summary>
            <param name="material">The material whose contents are of interest.</param>
        </member>
        <member name="T:Highpoint.Sage.Diagnostics.ExecEventLogger">
            <summary>
            Creates an event logger to store events from a particular executive into a file.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.ExecEventLogger.#ctor(Highpoint.Sage.SimCore.IExecutive,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EventLogger"/> class.
            </summary>
            <param name="exec">The executive to be logged.</param>
            <param name="filename">The filename into which to write the logs.</param>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.ExecEventLogger.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Highpoint.Sage.Diagnostics.EventLogger"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Highpoint.Sage.Diagnostics.ExecEventLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
